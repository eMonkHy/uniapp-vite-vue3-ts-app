/** Generate by ande-devops */
  // tslint:disable
/* eslint-disable */
  
import { IRequestOptions, IRequestConfig, getConfigs, axios } from "./serviceOptions";export const basePath = ''
  
    export interface IList<T> extends Array<T>{}
    export interface List<T> extends Array<T>{}
    export interface IDictionary<TValue>{
      [key: string]: TValue
    }
    export interface Dictionary<TValue> extends IDictionary<TValue>{
    
    }
  
  
export interface IListResult<T> {
  items?: T[]
}

export class ListResultDto<T> implements IListResult<T> {
  items?: T[]
}

export interface IPagedResult<T> extends IListResult<T> {
  totalCount?: number;
  items?: T[];
}

export class PagedResultDto<T=any> implements IPagedResult<T> {
  totalCount?: number;
  items?: T[];
}
  
  // customer definition
  export interface 接口返回对象<T=any> {
  code: number
  result: T
  message: string
  success: boolean
}
  

  
  export class 流程业务Service {
    
/**
 * 流程-查询流程类型
 */
static actZProcess(options:IRequestOptions={}):Promise<接口返回对象<List<ActZprocess>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/actZProcess'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-添加申请草稿状态
 */
static add(params: {
              
    /** actBusinessAddBo */
    actBusinessAddBo:ActBusinessAddEditBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActBusiness>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actBusinessAddBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-提交申请 启动流程
 */
static apply(params: {
              
    /** act */
    act:ActBusiness,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActBusiness>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/apply'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['act']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-撤回申请
 */
static cancel(params: {
              
    /** actBusinessCancelBo */
    actBusinessCancelBo:ActBusinessCancelBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/cancel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actBusinessCancelBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-通过id删除草稿状态申请
 */
static delByIds(params: {
              
    /** 流程扩展表id，多个,号相连 */
    ids?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/delByIds'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-查询申请列表 与 已办列表的合集
 */
static doAndApplyList(params: {
              
    /**  */
    applyTime?:string,
    /** 审批人（用户名），多个,号相连 */
    assignees?:string,
    /** 业务数据 */
    bizParams?:string,
    /** categoryId */
    categoryId?:string,
    /** 备注 */
    comment?:string,
    /**  */
    createBy?:string,
    /**  */
    createTime?:string,
    /**  */
    currTaskName?:string,
    /**  */
    dataMap?:object,
    /**  */
    delFlag?:number,
    /** 第一个节点是否为网关 */
    firstGateway?:boolean,
    /** id */
    id?:string,
    /**  */
    isHistory?:boolean,
    /** name */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程设置参数 */
    params?:object,
    /** priority */
    priority?:number,
    /** 流程定义id */
    procDefId?:string,
    /** 流程实例id */
    procInstId?:string,
    /**  */
    procInstStatus?:number,
    /**  */
    processName?:string,
    /**  */
    result?:number,
    /**  */
    routeName?:string,
    /** 是否发送邮件通知-暂无用 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知-暂无用 */
    sendSms?:boolean,
    /**  */
    status?:number,
    /**  */
    tableId?:string,
    /**  */
    tableName?:string,
    /**  */
    title?:string,
    /**  */
    updateBy?:string,
    /**  */
    updateTime?:string,
    /**  */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ActDoAndApplyVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/doAndApplyList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-修改业务表单信息
 */
static editForm(params: {
              
    /** actBusinessAddEditBo */
    actBusinessAddEditBo:ActBusinessAddEditBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/editForm'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actBusinessAddEditBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过流程实例id获取流程业务
 */
static getByProcInstId(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActBusiness>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/getByProcInstId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-获取业务表单信息
 */
static getForm(params: {
              
    /** 业务表id */
    tableId:string,
    /** 业务表名 */
    tableName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/getForm'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-流程列表
 */
static listData(params: {
              
    /**  */
    applyTime?:string,
    /** 审批人（用户名），多个,号相连 */
    assignees?:string,
    /** 业务数据 */
    bizParams?:string,
    /** 所属分类 */
    categoryId?:string,
    /** 备注 */
    comment?:string,
    /**  */
    createBy?:string,
    /**  */
    createTime?:string,
    /**  */
    currTaskName?:string,
    /**  */
    dataMap?:object,
    /**  */
    delFlag?:number,
    /** 第一个节点是否为网关 */
    firstGateway?:boolean,
    /** id */
    id?:string,
    /**  */
    isHistory?:boolean,
    /** 流程设置参数 */
    params?:object,
    /** 任务优先级 默认0 0普通1重要2紧急 */
    priority?:number,
    /** 流程定义id */
    procDefId?:string,
    /** 流程实例id */
    procInstId?:string,
    /**  */
    procInstStatus?:number,
    /**  */
    processName?:string,
    /**  */
    result?:number,
    /**  */
    routeName?:string,
    /** 是否发送邮件通知-暂无用 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知-暂无用 */
    sendSms?:boolean,
    /**  */
    status?:number,
    /**  */
    tableId?:string,
    /**  */
    tableName?:string,
    /**  */
    title?:string,
    /**  */
    updateBy?:string,
    /**  */
    updateTime?:string,
    /**  */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ActBusiness>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/listData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程业务-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActBusiness>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actBusiness/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程实例Service {
    
/**
 * 删除历史通过ids
 */
static delHistoricInsByIds(params: {
              
    /** ids */
    ids?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/delHistoricInsByIds'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除运行中的实例
 */
static delInsByIds(params: {
              
    /** ids */
    ids?:string,
    /** reason */
    reason?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/delInsByIds'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids'],'reason':params['reason']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取结束的的流程实例
 */
static getFinishedProcess(params: {
              
    /** categoryId */
    categoryId?:string,
    /** endDate */
    endDate?:string,
    /** key */
    key?:string,
    /** name */
    name?:string,
    /** startDate */
    startDate?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<HistoricProcessInsVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/getFinishedProcess'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-通过流程定义id获取第一个任务节点
 */
static getFirstNode(params: {
              
    /** procDefId */
    procDefId:string,
    /** tableId */
    tableId:string,
    /** tableName */
    tableName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ProcessNodeVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/getFirstNode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取运行中的流程实例
 */
static getRunningProcess(params: {
              
    /** categoryId */
    categoryId?:string,
    /** key */
    key?:string,
    /** name */
    name?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ProcessInsVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/getRunningProcess'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 激活或挂起流程实例
 */
static updateInsStatus(params: {
              
    /** id */
    id?:string,
    /** status */
    status?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actProcessIns/updateInsStatus'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id'],'status':params['status']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程任务Service {
    
/**
 * 流程-任务节点审批 驳回至发起人
 */
static back(params: {
              
    /** 意见评论 */
    comment?:string,
    /** 任务id */
    id?:string,
    /** 流程实例id */
    procInstId?:string,
    /** 是否发送邮件通知 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知 */
    sendSms?:boolean,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/back'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'comment':params['comment'],'id':params['id'],'procInstId':params['procInstId'],'sendEmail':params['sendEmail'],'sendMessage':params['sendMessage'],'sendSms':params['sendSms']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-任务节点审批 选择工单id并驳回至发起人
 */
static backTaskCenterId(params: {
              
    /** 意见评论 */
    comment?:string,
    /** 任务id */
    id?:string,
    /** 流程实例id */
    procInstId?:string,
    /** 是否发送邮件通知 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知 */
    sendSms?:boolean,
    /** 工单id */
    taskCenterIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/backTaskCenterId'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'comment':params['comment'],'id':params['id'],'procInstId':params['procInstId'],'sendEmail':params['sendEmail'],'sendMessage':params['sendMessage'],'sendSms':params['sendSms'],'taskCenterIds':params['taskCenterIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务节点审批驳回至指定历史节点
 */
static backToTask(params: {
              
    /** 原节点审批人 */
    assignees?:string,
    /** 驳回指定节点key */
    backTaskKey?:string,
    /** 意见评论 */
    comment?:string,
    /** 任务id */
    id?:string,
    /** 优先级 */
    priority?:number,
    /** 流程定义id */
    procDefId?:string,
    /** 流程实例id */
    procInstId?:string,
    /** 是否发送邮件通知 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知 */
    sendSms?:boolean,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/backToTask'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'assignees':params['assignees'],'backTaskKey':params['backTaskKey'],'comment':params['comment'],'id':params['id'],'priority':params['priority'],'procDefId':params['procDefId'],'procInstId':params['procInstId'],'sendEmail':params['sendEmail'],'sendMessage':params['sendMessage'],'sendSms':params['sendSms']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 委托他人代办
 */
static delegate(params: {
              
    /** 意见评论 */
    comment?:string,
    /** 任务id */
    id?:string,
    /** 流程实例id */
    procInstId?:string,
    /** 是否发送邮件通知 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知 */
    sendSms?:boolean,
    /** 委托用户id */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/delegate'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'comment':params['comment'],'id':params['id'],'procInstId':params['procInstId'],'sendEmail':params['sendEmail'],'sendMessage':params['sendMessage'],'sendSms':params['sendSms'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-删除任务历史
 */
static deleteHistoric(params: {
              
    /** ids */
    ids?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/deleteHistoric'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-已办列表
 */
static doneList(params: {
              
    /** categoryId */
    categoryId?:string,
    /** name */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** priority */
    priority?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_HistoricTaskVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/doneList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-获取可返回的节点
 */
static getBackList(params: {
              
    /** procInstId */
    procInstId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/getBackList/{procInstId}'
    url = url.replace('{procInstId}',params['procInstId']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-流程流转历史
 */
static historicFlow(params: {
              
    /** 实例Id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<HistoricTaskVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/historicFlow/{id}'
    url = url.replace('{id}',params['id']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务节点审批通过
 */
static pass(params: {
              
    /** 下个节点审批人 */
    assignees?:string,
    /** 意见评论 */
    comment?:string,
    /** 任务id */
    id?:string,
    /** 优先级 */
    priority?:number,
    /** 流程实例id */
    procInstId?:string,
    /** 是否发送邮件通知 */
    sendEmail?:boolean,
    /** 是否发送站内消息 */
    sendMessage?:boolean,
    /** 是否发送短信通知 */
    sendSms?:boolean,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/pass'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'assignees':params['assignees'],'comment':params['comment'],'id':params['id'],'priority':params['priority'],'procInstId':params['procInstId'],'sendEmail':params['sendEmail'],'sendMessage':params['sendMessage'],'sendSms':params['sendSms']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-待办条数
 */
static todoCounts(params: {
              
    /** 流程定义key */
    procDefIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_int>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/todoCounts'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-代办列表
 */
static todoList(params: {
              
    /** 任务分类 */
    categoryId?:string,
    /** 创建开始时间 */
    createTimeBegin?:string,
    /** 创建结束时间 */
    createTimeEnd?:string,
    /** 任务名称 */
    name?:string,
    /** 优先级 */
    priority?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TaskVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/actTask/todoList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作流模型详情Service {
    
/**
 * 工作流模型详情-添加
 */
static add(params: {
              
    /** actReModelDetail */
    actReModelDetail:ActReModelDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actReModelDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流模型详情-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流模型详情-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流模型详情-编辑
 */
static edit(params: {
              
    /** actReModelDetail */
    actReModelDetail:ActReModelDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actReModelDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据模型id获取模型详情
 */
static getModelDetailByModelId(params: {
              
    /** modelId */
    modelId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/getModelDetailByModelId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据模型key获取模型详情
 */
static getModelDetailByModelKey(params: {
              
    /** modelKey */
    modelKey:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/getModelDetailByModelKey'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作流模型详情列表
 */
static list(params: {
              
    /** 摘要规则 */
    abstractRules?:string,
    /** 附件发起 */
    applyNeedFile?:number,
    /** 业务id */
    bizId?:string,
    /** 所属分类 */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 流程描述 */
    description?:string,
    /** 需要流程配置 */
    flagFlow?:boolean,
    /** 是否需要表单 */
    flagForm?:boolean,
    /** 是否允许集中发起 */
    flagManualApply?:number,
    /** 是否需要加急 */
    flagUrgent?:number,
    /** 表单id */
    formId?:string,
    /** 表单名称 */
    formName?:string,
    /** 主键 */
    id?:string,
    /** 模型id */
    modelId?:string,
    /** 模型key */
    modelKey?:string,
    /** 模型名称 */
    modelName?:string,
    /** 监控人 */
    monitoringUser?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程标题规则 */
    processNameRules?:string,
    /** 授权的角色 */
    roles?:string,
    /** 是否可用 */
    status?:string,
    /** 表名 */
    tableName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流模型详情-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActReModelDetail/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作流单Service {
    
/**
 * 工作流单-添加
 */
static add(params: {
              
    /** actRuForm */
    actRuForm:ActRuForm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actRuForm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流单-编辑
 */
static edit(params: {
              
    /** actRuForm */
    actRuForm:ActRuForm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actRuForm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取动态表结构
 */
static getTableColumns(params: {
              
    /** tableName */
    tableName:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<Map>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/getTableColumns'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取所有表名
 */
static getTables(options:IRequestOptions={}):Promise<接口返回对象<List<Map>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/getTables'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 初始化流程模型表单
 */
static initFormByModelId(params: {
              
    /** modelId */
    modelId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActRuForm>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/initFormByModelId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作流单列表
 */
static list(params: {
              
    /** 组件 */
    component?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 字段json */
    formFields?:string,
    /** 表单json配置 */
    formJson?:string,
    /** 表单名称 */
    formName?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 表名 */
    tableName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActRuForm>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作流单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActRuForm>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActRuForm/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程中心代理Service {
    
/**
 * 流程中心代理-添加
 */
static add(params: {
              
    /** actZAgent */
    actZAgent:ActZAgent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actZAgent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程中心代理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程中心代理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程中心代理-编辑
 */
static edit(params: {
              
    /** actZAgent */
    actZAgent:ActZAgent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actZAgent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询流程中心代理列表
 */
static list(params: {
              
    /** 代理人 */
    agent?:string,
    /** 代理结束日期 */
    agentEndDate?:string,
    /** 代理人id */
    agentId?:string,
    /** 代理开始日期 */
    agentStartDate?:string,
    /** 业务类型 */
    businessType?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 流程所属公司（部门）;所属部门 */
    department?:string,
    /** 主键 */
    id?:string,
    /** 责任人是否处理;是否加签处理 */
    ifAddSignature?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户id */
    userId?:string,
    /** 用户名称;被代理人 */
    userName?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActZAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程中心代理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZAgent/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 业务数据Service {
    
/**
 * 业务数据-添加
 */
static add(params: {
              
    /** actZBusinessData */
    actZBusinessData:ActZBusinessData,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actZBusinessData']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务数据-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务数据-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务数据-编辑
 */
static edit(params: {
              
    /** actZBusinessData */
    actZBusinessData:ActZBusinessData,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actZBusinessData']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询业务数据列表
 */
static list(params: {
              
    /** 审批状态 */
    actStatus?:string,
    /**  */
    createBy?:string,
    /**  */
    createTime?:string,
    /** 数据 */
    dataJson?:string,
    /**  */
    delFlag?:number,
    /**  */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 状态 0草稿默认 1处理中 2结束 */
    status?:number,
    /**  */
    updateBy?:string,
    /**  */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActZBusinessData>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务数据-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZBusinessData>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZBusinessData/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程管理Service {
    
/**
 * 流程重置责任人
 */
static resetPerson(params: {
              
    /** procInstId */
    procInstId:string,
    /** realName */
    realName:string,
    /** resetUserName */
    resetUserName:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TaskVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZProcessMana/resetPerson'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'procInstId':params['procInstId'],'realName':params['realName'],'resetUserName':params['resetUserName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-根据用户查询待办列表
 */
static todoListByUser(params: {
              
    /** 任务分类 */
    categoryId?:string,
    /** 创建开始时间 */
    createTimeBegin?:string,
    /** 创建结束时间 */
    createTimeEnd?:string,
    /** 任务名称 */
    name?:string,
    /** 优先级 */
    priority?:number,
    /** 责任人Id */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TaskVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/ActZProcessMana/todoListByUser'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 模型保存Service {
    
/**
 * 保存模型实例bpmn新版
 */
static saveBpmnModel(params: {
              
    /** saveBPMNModelBo */
    saveBpmnModelBo:SaveBPMNModelBo,
          } = {} as any,options:IRequestOptions={}):Promise<any> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/activitiService/SaveBPMNModel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['saveBpmnModelBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存模型实例老版
 */
static save(params: {
              
    /** modelId */
    modelId:string,
          } = {} as any,options:IRequestOptions={}):Promise<any> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/activitiService/model/{modelId}/save'
    url = url.replace('{modelId}',params['modelId']+'')

    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作流测试Service {
    
/**
 * 测试1
 */
static demo1(params: {
              
    /** 字段名称,分隔 */
    filedNames?:string,
    /** 申请标题 */
    procDeTitle?:string,
    /** 流程定义Id */
    procDefId?:string,
    /** 表名 */
    tableName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/demo/demo1'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'filedNames':params['filedNames'],'procDeTitle':params['procDeTitle'],'procDefId':params['procDefId'],'tableName':params['tableName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统im2聊天Service {
    
/**
 * 新增聊天群组
 */
static addChatGroup(params: {
              
    /** 聊天群组实体(包括分组名称，用户list,分组类型 */
    chatGroup?:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/AddChatGroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单添加
 */
static addChatUserBlackList(params: {
              
    /** chatUserBlackList */
    chatUserBlackList:ChatUserBlackList,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/AddChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatUserBlackList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 邀请新人
 */
static addUser(params: {
              
    /** chatGroupInviteBo */
    chatGroupInviteBo:ChatGroupInviteBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/AddUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroupInviteBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 移除黑名单
 */
static delChatUserBlackList(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/DelChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 解散群聊
 */
static delGroup(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/DelGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑群信息
 */
static editgroup(params: {
              
    /** chatGroup */
    chatGroup:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/Editgroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单显示
 */
static findChatUserBlackList(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/FindChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取离线消息并删除
 */
static getOfflineMessageAndRemove(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/GetOfflineMessageAndRemove'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出群聊
 */
static quitGroup(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/QuitGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 前端发送消息请求接口111
 */
static sendToAll(params: {
              
    /** sendMessageBo */
    sendMessageBo:SendMessageBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/SendToAll'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sendMessageBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取用户所在的群聊
 */
static getUserGroup(options:IRequestOptions={}):Promise<接口返回对象<List<ChatGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im33/getUserGroup'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 新增聊天群组
 */
static addChatGroup1(params: {
              
    /** 聊天群组实体(包括分组名称，用户list,分组类型 */
    chatGroup?:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/AddChatGroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单添加
 */
static addChatUserBlackList1(params: {
              
    /** chatUserBlackList */
    chatUserBlackList:ChatUserBlackList,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/AddChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatUserBlackList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 邀请新人
 */
static addUser1(params: {
              
    /** chatGroupInviteBo */
    chatGroupInviteBo:ChatGroupInviteBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/AddUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroupInviteBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 移除黑名单
 */
static delChatUserBlackList1(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/DelChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 解散群聊
 */
static delGroup1(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/DelGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑群信息
 */
static editgroup1(params: {
              
    /** chatGroup */
    chatGroup:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/Editgroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单显示
 */
static findChatUserBlackList1(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/FindChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取离线消息并删除
 */
static getOfflineMessageAndRemove1(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/GetOfflineMessageAndRemove'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取离线消息并删除
 */
static getOfflineMessageAndRemove22(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/GetOfflineMessageAndRemove22'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出群聊
 */
static quitGroup1(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/QuitGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 前端发送消息请求接口111
 */
static sendToAll1(params: {
              
    /** sendMessageBo */
    sendMessageBo:SendMessageBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/SendToAll'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sendMessageBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取用户所在的群聊
 */
static getUserGroup1(options:IRequestOptions={}):Promise<接口返回对象<List<ChatGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/im4443/getUserGroup'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 新增聊天群组
 */
static addChatGroup2(params: {
              
    /** 聊天群组实体(包括分组名称，用户list,分组类型 */
    chatGroup?:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/AddChatGroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单添加
 */
static addChatUserBlackList2(params: {
              
    /** chatUserBlackList */
    chatUserBlackList:ChatUserBlackList,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/AddChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatUserBlackList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 邀请新人
 */
static addUser2(params: {
              
    /** chatGroupInviteBo */
    chatGroupInviteBo:ChatGroupInviteBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/AddUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroupInviteBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 移除黑名单
 */
static delChatUserBlackList2(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/DelChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 解散群聊
 */
static delGroup2(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/DelGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑群信息
 */
static editgroup2(params: {
              
    /** chatGroup */
    chatGroup:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/Editgroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单显示
 */
static findChatUserBlackList2(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/FindChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取离线消息并删除
 */
static getOfflineMessageAndRemove3(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/GetOfflineMessageAndRemove'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出群聊
 */
static quitGroup2(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/QuitGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 前端发送消息请求接口111
 */
static sendToAll2(params: {
              
    /** sendMessageBo */
    sendMessageBo:SendMessageBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/SendToAll'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sendMessageBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取用户所在的群聊
 */
static getUserGroup2(options:IRequestOptions={}):Promise<接口返回对象<List<ChatGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/message/sysIM233/getUserGroup'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 模型Service {
    
/**
 * 创建模型
 */
static create(params: {
              
    /** actReModelDetail */
    actReModelDetail:ActReModelDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/create'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actReModelDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部署
 */
static deployment(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/deployment'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部署
 */
static getById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Model>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/getById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询模型列表
 */
static modelListData(options:IRequestOptions={}):Promise<接口返回对象<List<Model>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/modelListData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新模型
 */
static updateModel(params: {
              
    /** actReModelDetail */
    actReModelDetail:ActReModelDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActReModelDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/models/updateModel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actReModelDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程节点设置Service {
    
/**
 * 流程节点设置-添加
 */
static add(params: {
              
    /** actZProcessNode */
    actZProcessNode:ActZProcessNode,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actZProcessNode']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程节点设置-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程节点设置-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程节点设置-编辑
 */
static edit(params: {
              
    /** actZProcessNode */
    actZProcessNode:ActZProcessNode,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actZProcessNode']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询流程节点设置列表
 */
static list(params: {
              
    /** activiti流程图节点id */
    activitiNodeId?:string,
    /** 审批类型 */
    approvalType?:string,
    /** 批量审批模式 */
    batchApproval?:string,
    /** 权限按钮,分割 */
    btnAuths?:string,
    /** 是否发起人的部门负责人 */
    chooseDepHeader?:string,
    /** 是否选择发起人 */
    chooseSponsor?:string,
    /** 配置json */
    configJson?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** delFlag */
    delFlag?:number,
    /** 部门负责人id, 分隔 */
    departmentManageids?:string,
    /** 部门id , 分隔 */
    departmentiIds?:string,
    /** 审批人为空模式 */
    emptyApprover?:string,
    /** 是否是模型节点 */
    flagModel?:number,
    /** 变量, 分隔 */
    formVariables?:string,
    /** 这个节点id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程定义id */
    procDefId?:string,
    /** 角色id , 分隔 */
    roleIds?:string,
    /** 节点名称 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户id ,分隔 */
    userIds?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActZProcessNode>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程节点设置-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZProcessNode>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/node/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程审批记录Service {
    
/**
 * 流程审批记录-添加
 */
static add(params: {
              
    /** actZApprovalRecord */
    actZApprovalRecord:ActZApprovalRecord,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actZApprovalRecord']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程审批记录-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程审批记录-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程审批记录-编辑
 */
static edit(params: {
              
    /** actZApprovalRecord */
    actZApprovalRecord:ActZApprovalRecord,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actZApprovalRecord']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询流程审批记录
 */
static getRecordList(params: {
              
    /** 流程实例id */
    procInstId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ActZApprovalRecord>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/getRecordList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询流程审批记录列表
 */
static list(params: {
              
    /** 工作流程业务id */
    actBusinessId?:string,
    /** 流程节点id */
    actNodeId?:string,
    /** 处理结果 */
    approvalResult?:string,
    /** 操作时间 */
    approvalTime?:string,
    /** 类别 */
    category?:string,
    /** 评论 */
    comment?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 相关数据 */
    dataJson?:string,
    /** 是否删除逻辑 */
    delFlag?:number,
    /** 耗时 */
    duration?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程定义id */
    procDefId?:string,
    /** 流程实例id */
    procInstId?:string,
    /** 接收时间 */
    receptionTime?:string,
    /**  */
    remark?:string,
    /** 发送人 */
    sendFrom?:string,
    /**  */
    tableId?:string,
    /** 任务id */
    taskId?:string,
    /** 任务名称 */
    taskName?:string,
    /** 时间戳 */
    timestamp?:number,
    /** 流程名称 */
    title?:string,
    /** 类型 */
    type?:string,
    /** 更改人 */
    updateBy?:string,
    /** 更改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActZApprovalRecord>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程审批记录-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZApprovalRecord>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti/record/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程Service {
    
/**
 * 转化流程为模型
 */
static convertToModel(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/convertToModel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除流程
 */
static delByIds(params: {
              
    /** ids */
    ids?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/delByIds'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑节点分配用户
 */
static editNodeUser(params: {
              
    /** editNodeUserBo */
    editNodeUserBo:EditNodeUserBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<EditNodeUserBo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/editNodeUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['editNodeUserBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过流程id获取流程
 */
static getActZProcessById(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZprocess>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getActZProcessById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过模型定义id获取流程节点
 */
static getModelNode(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ProcessNodeVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getModelNode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过模型key获取最新的流程定义
 */
static getNewestActZProcessByModelKey(params: {
              
    /** modelKey */
    modelKey?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActZprocess>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getNewestActZProcessByModelKey'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过当前节点定义id获取下一个节点
 */
static getNextNode(params: {
              
    /** 当前节点定义id */
    currActId?:string,
    /** 流程定义id */
    procDefId?:string,
    /** 当前节点定义id */
    procInstId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getNextNode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过节点nodeId获取审批人
 */
static getNode(params: {
              
    /** 节点nodeId */
    nodeId?:string,
    /** 表单id */
    tableId?:string,
    /** 表单名称 */
    tableName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ProcessNodeVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getNode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过流程定义id获取流程节点
 */
static getProcessNode(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ProcessNodeVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/getProcessNode'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程-获取可用流程
 */
static listData(params: {
              
    /** 类别 */
    categoryId?:string,
    /** 如果此项不为空，则会过滤集中发起 */
    flagManualApply?:boolean,
    /** 流程key */
    lckey?:string,
    /** 流程名称 */
    lcmc?:string,
    /** 如果此项不为空，则会过滤当前用户的角色权限 */
    roles?:boolean,
    /** 流程状态 部署后默认1激活 */
    status?:string,
    /** 是否最新 */
    zx?:boolean,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ActZprocess>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/listData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取最新部署的流程定义
 */
static queryNewestProcess(params: {
              
    /** 流程定义key */
    processKey?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ActZprocess>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/queryNewestProcess'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新流程定义
 */
static updateInfo(params: {
              
    /** actProcess */
    actProcess:ActZprocess,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/updateInfo'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actProcess']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 激活或挂起流程定义
 */
static updateStatus(params: {
              
    /** id */
    id?:string,
    /** status */
    status?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/activiti_process/updateStatus'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id'],'status':params['status']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 业务表单Service {
    
/**
 * 业务表单-添加
 */
static add(params: {
              
    /** actRuFormExtend */
    actRuFormExtend:ActRuFormExtend,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actRuFormExtend']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务表单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务表单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务表单-编辑
 */
static edit(params: {
              
    /** actRuFormExtend */
    actRuFormExtend:ActRuFormExtend,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['actRuFormExtend']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询业务表单列表
 */
static list(params: {
              
    /** 组件 */
    component?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 字段json */
    formFields?:string,
    /** 表单json配置 */
    formJson?:string,
    /** 表单名称 */
    formName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    fromType?:string,
    /** 主键 */
    id?:string,
    /** 是否启用 */
    ifEnabling?:number,
    /** 是否通用 */
    ifUniversal?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 用户部门多选 ,分割 */
    selecteddeparts?:string,
    /** 服务类型 */
    serviceType?:string,
    /** 服务类型id */
    serviceTypeId?:string,
    /** 是否可用 */
    status?:string,
    /** 表名 */
    tableName?:string,
    /** 任务类型 */
    taskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    twoFromType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    userLabel?:string,
    /** 权重 */
    weight?:number,
    /** 工作事项id */
    workItermId?:string,
    /** 工作事项名称 */
    workItermName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ActRuFormExtend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务表单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActRuFormExtend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-启用表单
 */
static startById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActRuFormExtend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ActRuFormExtend/startById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_展期订单项目清单Service {
    
/**
 * 展期订单项目清单-添加
 */
static add(params: {
              
    /** exDemandCenterExtensionProject */
    exDemandCenterExtensionProject:ExDemandCenterExtensionProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-批量添加
 */
static addList(params: {
              
    /** exDemandCenterExtensionProject */
    exDemandCenterExtensionProject:ExDemandCenterExtensionProject[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/addList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-编辑
 */
static edit(params: {
              
    /** exDemandCenterExtensionProject */
    exDemandCenterExtensionProject:ExDemandCenterExtensionProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展期订单项目清单列表
 */
static list(params: {
              
    /** 所属公司 */
    affiliatedCompany?:string,
    /** 审核通过时间 */
    approvalTime?:string,
    /** 附件 */
    attachment?:string,
    /** 批次id */
    batchId?:string,
    /** 展位号 */
    boothNumber?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 数据json */
    dateJson?:string,
    /** 拆除完成数量vo */
    dismantleCompCount?:number,
    /** 派单部门 */
    dispatchDepartment?:string,
    /** 派单部门id */
    dispatchDepartmentId?:string,
    /** 派单人 */
    dispatchUser?:string,
    /** 是否启用 */
    exhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhibitionArea?:string,
    /** 展会名称 */
    exhibitionName?:string,
    /** 文件 */
    file?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 主键 */
    id?:string,
    /** 安装完成数量Vo */
    installCompCount?:number,
    /** 详细位置 */
    location?:string,
    /** 材料 */
    material?:string,
    /** 新表单json */
    newFormJson?:string,
    /** 报馆时间 */
    newspaperTime?:string,
    /** 订单id */
    orderId?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单备注 */
    orderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    orderType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 展馆号 */
    pavilion?:string,
    /** 订单状态 */
    projectStatus?:string,
    /** 数量 */
    quantity?:number,
    /** 重组订单id */
    reOrderId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 接驳送电完成数量vo */
    sendCCompCount?:number,
    /** 服务分类 */
    serviceCategory?:string,
    /** 服务项 */
    serviceItems?:string,
    /** 服务名称 */
    serviceName?:string,
    /** 服务规格 */
    serviceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    sourceOfDemand?:string,
    /** 是否可用 */
    status?:string,
    /** 主体类型 */
    subjectType?:string,
    /** 同步时间 */
    synchronizationTime?:string,
    /** 任务id */
    taskId?:string,
    /** 单位 */
    unit?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterExtensionProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过PDF分析数据
 */
static byPdf(params: {
              
    /** fileUrl */
    fileUrl:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExDemandCenterExtensionProject>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/list/byPdf'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'fileUrl':params['fileUrl']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取所有展期的展会名称
 */
static exhibitionName(options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/list/exhibitionName'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据展会查询展期项目分组
 */
static byExhibitionName(params: {
              
    /** exhibitionName */
    exhibitionName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExDemandCenterExtensionProject>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/list/group/byExhibitionName'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 将提供的项目进行分组
 */
static generation(params: {
              
    /** projects */
    projects:ExDemandCenterExtensionProject[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExRecombinationOrder>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/list/group/generation'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['projects']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-批量派发
 */
static oneClickDispatch(params: {
              
    /** oneClickDispatchVo */
    oneClickDispatchVo:ExOneClickDispatchVo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/oneClickDispatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['oneClickDispatchVo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-多个项目批量派发成一个任务
 */
static oneDispatchTasks(params: {
              
    /** exDemandCenterExtensionProject */
    exDemandCenterExtensionProject:ExDemandCenterExtensionProject[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/oneDispatchTasks'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDemandCenterExtensionProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单项目清单-通过id查询任务详情
 */
static queryTask(params: {
              
    /** projectId */
    projectId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DemandCenterExtensionProject/queryTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备规格Service {
    
/**
 * 设备规格-添加
 */
static add(params: {
              
    /** dwiFacilityDefinitionTjgz */
    dwiFacilityDefinitionTjgz:DwiFacilityDefinitionTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['dwiFacilityDefinitionTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备规格-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备规格-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备规格-编辑
 */
static edit(params: {
              
    /** dwiFacilityDefinitionTjgz */
    dwiFacilityDefinitionTjgz:DwiFacilityDefinitionTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['dwiFacilityDefinitionTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备规格列表
 */
static list(params: {
              
    /** 操作类型 */
    actionType?:string,
    /** 设备规格的默认渠道标识符 */
    defaultChannelCode?:string,
    /** 设备规格的默认渠道名称 */
    defaultChannelName?:string,
    /** 设备规格分类的标识符 */
    definitionCategoryCode?:string,
    /** 设备规格分类的名称 */
    definitionCategoryName?:string,
    /** 设备规格的唯一编号 */
    definitionCode?:string,
    /** 设备规格的名称 */
    definitionName?:string,
    /** 设备规格的介绍文本 */
    description?:string,
    /** 数据批次号;已启用、未启用 */
    dwBatchNumber?:string,
    /** 数据创建者 */
    dwCreationBy?:string,
    /** 数据创建时间 */
    dwCreationDate?:string,
    /** 源系统名称 */
    dwDataSource?:string,
    /** 源系统编号 */
    dwDataSourceId?:string,
    /** 数据最后更新者 */
    dwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwLastUpdateDate?:string,
    /** 源系统表名 */
    dwSourceTable?:string,
    /** 主键 */
    id?:string,
    /** 数据插入时间 */
    insertTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_DwiFacilityDefinitionTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备规格-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<DwiFacilityDefinitionTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityDefinitionTjgz/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备实例Service {
    
/**
 * 设备实例-添加
 */
static add(params: {
              
    /** dwiFacilityInstanceTjgz */
    dwiFacilityInstanceTjgz:DwiFacilityInstanceTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['dwiFacilityInstanceTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备实例-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备实例-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备实例-编辑
 */
static edit(params: {
              
    /** dwiFacilityInstanceTjgz */
    dwiFacilityInstanceTjgz:DwiFacilityInstanceTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['dwiFacilityInstanceTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备实例列表
 */
static list(params: {
              
    /** 操作类型 */
    actionType?:string,
    /** 设备实例所在位置的高度 */
    altitude?:string,
    /** 一级二级分类 */
    belongsSystem?:string,
    /** 设备规格分类 */
    categoryCode?:string,
    /** 设备规格分类的名称 */
    categoryName?:string,
    /** 设备实例的接入外部渠道编码 */
    channelCode?:string,
    /** 设备实例接入的渠道系统名称 */
    channelName?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备实例的编码 */
    deviceCode?:string,
    /** 设备规格标识 */
    deviceDefinitionCode?:string,
    /** 设备ip */
    deviceIp?:string,
    /** 设备实例的名称 */
    deviceName?:string,
    /** 设备产品标识 */
    deviceProductCode?:string,
    /** 数据批次号 */
    dwBatchNumber?:string,
    /** 数据创建者 */
    dwCreationBy?:string,
    /** 数据创建时间 */
    dwCreationDate?:string,
    /** 源系统名称 */
    dwDataSource?:string,
    /** 源系统编号 */
    dwDataSourceId?:string,
    /** 数据最后更新者 */
    dwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwLastUpdateDate?:string,
    /** 源系统表名 */
    dwSourceTable?:string,
    /** 操作类型 */
    dwiFacilityDefinitionTjgzActionType?:string,
    /** 设备规格的默认渠道标识符 */
    dwiFacilityDefinitionTjgzDefaultChannelCode?:string,
    /** 设备规格的默认渠道名称 */
    dwiFacilityDefinitionTjgzDefaultChannelName?:string,
    /** 设备规格分类的标识符 */
    dwiFacilityDefinitionTjgzDefinitionCategoryCode?:string,
    /** 设备规格分类的名称 */
    dwiFacilityDefinitionTjgzDefinitionCategoryName?:string,
    /** 设备规格的唯一编号 */
    dwiFacilityDefinitionTjgzDefinitionCode?:string,
    /** 设备规格的名称 */
    dwiFacilityDefinitionTjgzDefinitionName?:string,
    /** 设备规格的介绍文本 */
    dwiFacilityDefinitionTjgzDescription?:string,
    /** 数据批次号;已启用、未启用 */
    dwiFacilityDefinitionTjgzDwBatchNumber?:string,
    /** 数据创建者 */
    dwiFacilityDefinitionTjgzDwCreationBy?:string,
    /** 数据创建时间 */
    dwiFacilityDefinitionTjgzDwCreationDate?:string,
    /** 源系统名称 */
    dwiFacilityDefinitionTjgzDwDataSource?:string,
    /** 源系统编号 */
    dwiFacilityDefinitionTjgzDwDataSourceId?:string,
    /** 数据最后更新者 */
    dwiFacilityDefinitionTjgzDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwiFacilityDefinitionTjgzDwLastUpdateDate?:string,
    /** 源系统表名 */
    dwiFacilityDefinitionTjgzDwSourceTable?:string,
    /** 主键 */
    dwiFacilityDefinitionTjgzId?:string,
    /** 数据插入时间 */
    dwiFacilityDefinitionTjgzInsertTime?:string,
    /** 权重 */
    dwiFacilityDefinitionTjgzWeight?:number,
    /** 设备规格默认分类名称 */
    dwiFacilityMenuTjgzCategoryName?:string,
    /** 创建时间 */
    dwiFacilityMenuTjgzCreatedDate?:string,
    /** 数据批次号;已启用、未启用 */
    dwiFacilityMenuTjgzDwBatchNumber?:string,
    /** 数据创建者 */
    dwiFacilityMenuTjgzDwCreationBy?:string,
    /** 数据创建时间 */
    dwiFacilityMenuTjgzDwCreationDate?:string,
    /** 源系统名称 */
    dwiFacilityMenuTjgzDwDataSource?:string,
    /** 源系统编号 */
    dwiFacilityMenuTjgzDwDataSourceId?:string,
    /** 数据最后更新者 */
    dwiFacilityMenuTjgzDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwiFacilityMenuTjgzDwLastUpdateDate?:string,
    /** 源系统表名 */
    dwiFacilityMenuTjgzDwSourceTable?:string,
    /** 主键 */
    dwiFacilityMenuTjgzId?:string,
    /** 数据插入时间 */
    dwiFacilityMenuTjgzInsertTime?:string,
    /** 是否删除 */
    dwiFacilityMenuTjgzIsDeleted?:string,
    /** 是否锁定 */
    dwiFacilityMenuTjgzIsLocked?:string,
    /** 最后修改时间 */
    dwiFacilityMenuTjgzLastModifiedDate?:string,
    /** 编码 */
    dwiFacilityMenuTjgzName?:string,
    /** 父级编码 */
    dwiFacilityMenuTjgzParent?:string,
    /** 权重 */
    dwiFacilityMenuTjgzWeight?:number,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    dwiSpaceRecordTjgzActionType?:string,
    /** 高度 */
    dwiSpaceRecordTjgzAltitude?:string,
    /** 空间实例编码 */
    dwiSpaceRecordTjgzCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    dwiSpaceRecordTjgzDelFlag?:number,
    /** 空间描述 */
    dwiSpaceRecordTjgzDescription?:string,
    /** 空间详细地址 */
    dwiSpaceRecordTjgzDetailAddress?:string,
    /** 数据批次号 */
    dwiSpaceRecordTjgzDwBatchNumber?:number,
    /** 数据创建者 */
    dwiSpaceRecordTjgzDwCreationBy?:string,
    /** 数据创建时间 */
    dwiSpaceRecordTjgzDwCreationDate?:string,
    /** 数据来源系统名称 */
    dwiSpaceRecordTjgzDwDataSource?:string,
    /** 数据来源系统ID */
    dwiSpaceRecordTjgzDwDataSourceId?:string,
    /** 数据最后更新者 */
    dwiSpaceRecordTjgzDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwiSpaceRecordTjgzDwLastUpdateDate?:string,
    /** 数据来源表 */
    dwiSpaceRecordTjgzDwSourceTable?:string,
    /** 停车场id */
    dwiSpaceRecordTjgzExtId?:string,
    /** 空间id */
    dwiSpaceRecordTjgzId?:string,
    /** 该记录在源表里的添加时间 */
    dwiSpaceRecordTjgzInsertTime?:string,
    /** 纬度 */
    dwiSpaceRecordTjgzLatitude?:string,
    /** 层级code) */
    dwiSpaceRecordTjgzLevelCode?:string,
    /** 层级描述 */
    dwiSpaceRecordTjgzLevelDescription?:string,
    /** 层级名称 */
    dwiSpaceRecordTjgzLevelName?:string,
    /** 层级级别 */
    dwiSpaceRecordTjgzLevelOrder?:string,
    /** 经度 */
    dwiSpaceRecordTjgzLongitude?:string,
    /** 上级空间编码 */
    dwiSpaceRecordTjgzParentSpaceCode?:string,
    /** 路径 */
    dwiSpaceRecordTjgzPath?:string,
    /** 空间实例名称 */
    dwiSpaceRecordTjgzSpaceName?:string,
    /** 状态 */
    dwiSpaceRecordTjgzStatus?:string,
    /** 该记录在源表里的更新时间 */
    dwiSpaceRecordTjgzUpdateTime?:string,
    /** 乐观锁 */
    dwiSpaceRecordTjgzVersion?:number,
    /** 设备扩展属性 */
    exAttributes?:string,
    /** 设备实例的外部编码 */
    externalCode?:string,
    /** 摄像头国标编码 */
    gbCode?:string,
    /** 主键 */
    id?:string,
    /** 数据插入时间 */
    insertTime?:string,
    /** 设备实例所在位置的纬度 */
    latitude?:string,
    /** 设备实例所在位置的经度 */
    longitude?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 设备品牌 */
    productBrand?:string,
    /** 设备厂商;已启用、未启用 */
    productManufacturer?:string,
    /** 设备产品型号 */
    productModel?:string,
    /** 功率 */
    ratedPower?:string,
    /** 备注 */
    remark?:string,
    /** 扩展字段 */
    sizeType?:string,
    /** 空间节点实例的编码 */
    spaceCode?:string,
    /** 空间节点实例所属的空间层级编码 */
    spaceLevelCode?:string,
    /** 设备实例的生命周期状态 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 电压 */
    voltageLineCode?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_DwiFacilityInstanceTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 上传PDF获取设备统计
 */
static getStatics(params: {
              
    /** file */
    file:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExhDeviceStatistic>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/pdf/getStatics'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'file':params['file']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 上传PDF获取设备统计
 */
static excel(params: {
              
    /** file */
    file:any,
          } = {} as any,options:IRequestOptions={}):Promise<any> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/pdf/getStatics/excel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'multipart/form-data', url, options)
    
    let data = null
    data = new FormData();
if(params['file']){
        if(Object.prototype.toString.call(params['file']) === '[object Array]'){
          for (const item of params['file']) {
            data.append('file',item as any)
          }
        } else {
          data.append('file',params['file'] as any)
        }
      }

      
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备实例-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<DwiFacilityInstanceTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityInstanceTjgz/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备分类Service {
    
/**
 * 设备分类-添加
 */
static add(params: {
              
    /** dwiFacilityMenuTjgz */
    dwiFacilityMenuTjgz:DwiFacilityMenuTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['dwiFacilityMenuTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备分类-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备分类-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备分类-编辑
 */
static edit(params: {
              
    /** dwiFacilityMenuTjgz */
    dwiFacilityMenuTjgz:DwiFacilityMenuTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['dwiFacilityMenuTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备分类列表
 */
static list(params: {
              
    /** 设备规格默认分类名称 */
    categoryName?:string,
    /** 创建时间 */
    createdDate?:string,
    /** 数据批次号;已启用、未启用 */
    dwBatchNumber?:string,
    /** 数据创建者 */
    dwCreationBy?:string,
    /** 数据创建时间 */
    dwCreationDate?:string,
    /** 源系统名称 */
    dwDataSource?:string,
    /** 源系统编号 */
    dwDataSourceId?:string,
    /** 数据最后更新者 */
    dwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwLastUpdateDate?:string,
    /** 源系统表名 */
    dwSourceTable?:string,
    /** 主键 */
    id?:string,
    /** 数据插入时间 */
    insertTime?:string,
    /** 是否删除 */
    isDeleted?:string,
    /** 是否锁定 */
    isLocked?:string,
    /** 最后修改时间 */
    lastModifiedDate?:string,
    /** 编码 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父级编码 */
    parent?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_DwiFacilityMenuTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备分类-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<DwiFacilityMenuTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityMenuTjgz/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备产品Service {
    
/**
 * 设备产品-添加
 */
static add(params: {
              
    /** dwiFacilityProductTjgz */
    dwiFacilityProductTjgz:DwiFacilityProductTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['dwiFacilityProductTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备产品-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备产品-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备产品-编辑
 */
static edit(params: {
              
    /** dwiFacilityProductTjgz */
    dwiFacilityProductTjgz:DwiFacilityProductTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['dwiFacilityProductTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备产品列表
 */
static list(params: {
              
    /** 操作类型 */
    actionType?:string,
    /** 设备产品的品牌 */
    brand?:string,
    /** 设备规格分类 */
    categoryCode?:string,
    /** 设备规格分类的名称 */
    categoryName?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备规格的唯一编号 */
    definitionCode?:string,
    /** 设备产品的介绍文本 */
    description?:string,
    /** 设备产品的显示模板 */
    displayTemplate?:string,
    /** 数据批次号;已启用、未启用 */
    dwBatchNumber?:string,
    /** 数据创建者 */
    dwCreationBy?:string,
    /** 数据创建时间 */
    dwCreationDate?:string,
    /** 源系统名称 */
    dwDataSource?:string,
    /** 源系统编号 */
    dwDataSourceId?:string,
    /** 数据最后更新者 */
    dwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwLastUpdateDate?:string,
    /** 源系统表名 */
    dwSourceTable?:string,
    /** 主键 */
    id?:string,
    /** 数据插入时间 */
    insertTime?:string,
    /** 设备产品的厂商 */
    manufacturer?:string,
    /** 设备产品的型号 */
    model?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 设备产品的唯一编号 */
    productCode?:string,
    /** 设备产品的名称 */
    productName?:string,
    /** 设备状态 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_DwiFacilityProductTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备产品-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<DwiFacilityProductTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/DwiFacilityProductTjgz/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_业务参数管理Service {
    
/**
 * 业务参数管理-添加
 */
static add(params: {
              
    /** exBusinessParameterManagement */
    exBusinessParameterManagement:ExBusinessParameterManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exBusinessParameterManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务参数管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务参数管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务参数管理-编辑
 */
static edit(params: {
              
    /** exBusinessParameterManagement */
    exBusinessParameterManagement:ExBusinessParameterManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exBusinessParameterManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询业务参数管理列表
 */
static list(params: {
              
    /** 安防告警是否自动归档 */
    afgjAutoArchiv?:number,
    /** 安防告警是否自动派单 */
    afgjAutoDispatch?:number,
    /** 安防告警是否指定派单 */
    afgjDesignDispatch?:number,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** 内部需求是否自动归档 */
    nbxqAutoArchiv?:number,
    /** 内部需求是否自动派单 */
    nbxqAutoDispatch?:number,
    /** 内部需求是否指定派单 */
    nbxqDesignDispatch?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 设备告警是否自动归档 */
    sbgjAutoArchiv?:number,
    /** 设备告警是否自动派单 */
    sbgjAutoDispatch?:number,
    /** 设备告警是否指定派单 */
    sbgjDesignDispatch?:number,
    /** 事件告警是否自动归档 */
    sjgjAutoArchiv?:number,
    /** 事件告警是否自动派单 */
    sjgjAutoDispatch?:number,
    /**  事件告警是否指定派单 */
    sjgjDesignDispatch?:number,
    /** 是否可用 */
    status?:string,
    /** 模块类型;安防、事件、设备、内部、展期、巡检、巡更 */
    type?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 外部需求是否自动归档 */
    wbxqAutoArchiv?:number,
    /** 外部需求是否自动派单 */
    wbxqAutoDispatch?:number,
    /** 外部需求是否指定派单 */
    wbxqDesignDispatch?:number,
    /** 权重 */
    weight?:number,
    /** 巡更计划是否自动归档 */
    xgjhAutoArchiv?:number,
    /** 巡检计划是否自动归档 */
    xjjhAutoArchiv?:number,
    /** 展期需求是否自动归档 */
    zqxqAutoArchiv?:number,
    /**  展期需求是否自动派单 */
    zqxqAutoDispatch?:number,
    /** 展期需求是否指定派单 */
    zqxqDesignDispatch?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExBusinessParameterManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务参数管理-参数配置
 */
static parameterConfiguration(params: {
              
    /** num */
    num:number,
    /** type */
    type:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/parameterConfiguration'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'num':params['num'],'type':params['type']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务参数管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExBusinessParameterManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExBusinessParameterManagement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_展期订单Service {
    
/**
 * 展期订单-添加
 */
static add(params: {
              
    /** exDemandCenterExtensionOrder */
    exDemandCenterExtensionOrder:ExDemandCenterExtensionOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单-编辑
 */
static edit(params: {
              
    /** exDemandCenterExtensionOrder */
    exDemandCenterExtensionOrder:ExDemandCenterExtensionOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 生成电箱数据
 */
static generateBoxData(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/generateBoxData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 生成测试数据
 */
static generateTestData(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/generateTestData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展期订单列表
 */
static list(params: {
              
    /** 附件 */
    attachment?:string,
    /** 批次id */
    batchId?:string,
    /** 公司名称 */
    company?:string,
    /** 已完成个数 */
    complatedNum?:number,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 展费 */
    exhibitionFees?:number,
    /** 展会名称 */
    exhibitionName?:string,
    /** 主键 */
    id?:string,
    /** 订单类别 */
    orderCategory?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单来源 */
    orderSource?:string,
    /** 订单状态 */
    orderStatus?:string,
    /** 订单时间 */
    orderTime?:string,
    /** 订单类型（现场单、预订单） */
    orderType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 项目个数 */
    projectNum?:number,
    /** 订单备注 */
    remark?:string,
    /** 审核日期 */
    reviewDate?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核人 */
    reviewer?:string,
    /** 服务类别 */
    serviceCategory?:string,
    /** 是否可用 */
    status?:string,
    /** 总金额 */
    totalAmount?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterExtensionOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展期订单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDemandCenterExtensionOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterExtensionOrder/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_需求中心内部订单Service {
    
/**
 * 需求中心内部订单-添加
 */
static add(params: {
              
    /** exDemandCenterInsideOrder */
    exDemandCenterInsideOrder:ExDemandCenterInsideOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 需求中心内部订单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 需求中心内部订单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 需求中心内部订单-编辑
 */
static edit(params: {
              
    /** exDemandCenterInsideOrder */
    exDemandCenterInsideOrder:ExDemandCenterInsideOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询需求中心内部订单列表
 */
static list(params: {
              
    /** 公司名称 */
    company?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 展费 */
    exhibitionFees?:number,
    /** 主键 */
    id?:string,
    /** 订单类别 */
    orderCategory?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单来源 */
    orderSource?:string,
    /** 订单状态 */
    orderStatus?:string,
    /** 订单时间 */
    orderTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 订单备注 */
    remark?:string,
    /** 审核日期 */
    reviewDate?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 总金额 */
    totalAmount?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterInsideOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内外部订单-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 需求中心内部订单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDemandCenterInsideOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideOrder/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_内部订单项目清单Service {
    
/**
 * 内部订单项目清单-添加
 */
static add(params: {
              
    /** exDemandCenterInsideProject */
    exDemandCenterInsideProject:ExDemandCenterInsideProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-派发
 */
static dispatchOrders(params: {
              
    /** exDemandCenterInsideProjectList */
    exDemandCenterInsideProjectList:ExDemandCenterInsideProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/dispatchOrders'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideProjectList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-编辑
 */
static edit(params: {
              
    /** exDemandCenterInsideProject */
    exDemandCenterInsideProject:ExDemandCenterInsideProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询内部订单项目清单列表
 */
static list(params: {
              
    /** 附件 */
    attachment?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建数据json */
    createDateJson?:string,
    /** 创建表单id */
    createFormId?:string,
    /** 创建表单json */
    createFormJson?:string,
    /** 创建时间 */
    createTime?:string,
    /** 决策需求任务类型 */
    decisionTaskType?:string,
    /** 派单部门 */
    dispatchDepartment?:string,
    /** 派单部门id */
    dispatchDepartmentId?:string,
    /** 派单人 */
    dispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exTaskType?:string,
    /** 文件 */
    file?:string,
    /** 主键 */
    id?:string,
    /** 内部需求任务类型 */
    insideTaskType?:string,
    /** 一键发起需求id */
    oneClickId?:string,
    /** 订单id */
    orderId?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 外部需求任务类型 */
    outsideTaskType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 项目状态 */
    projectStatus?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    requirementType?:string,
    /** 需求来源 */
    sourceOfDemand?:string,
    /** 是否可用 */
    status?:string,
    /** 流转数据json */
    taskDateJson?:string,
    /** 流转表单id */
    taskFormId?:string,
    /** 流转表单json */
    taskFormJson?:string,
    /** 任务类型id */
    taskTypeId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterInsideProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-批量派发
 */
static oneClickDispatch(params: {
              
    /** exDemandCenterInsideProjectList */
    exDemandCenterInsideProjectList:ExDemandCenterInsideProject[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/oneClickDispatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterInsideProjectList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内外部订单项目清单-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 内部订单项目清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDemandCenterInsideProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDemandCenterInsideProject/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 点位字典Service {
    
/**
 * 点位字典-添加
 */
static add(params: {
              
    /** exDictPointPosition */
    exDictPointPosition:ExDictPointPosition,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDictPointPosition']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点位字典-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点位字典-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点位字典-编辑
 */
static edit(params: {
              
    /** exDictPointPosition */
    exDictPointPosition:ExDictPointPosition,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDictPointPosition']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询点位字典列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备名称 */
    deviceName?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    dwiSpaceRecordTjgzActionType?:string,
    /** 高度 */
    dwiSpaceRecordTjgzAltitude?:string,
    /** 空间实例编码 */
    dwiSpaceRecordTjgzCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    dwiSpaceRecordTjgzDelFlag?:number,
    /** 空间描述 */
    dwiSpaceRecordTjgzDescription?:string,
    /** 空间详细地址 */
    dwiSpaceRecordTjgzDetailAddress?:string,
    /** 数据批次号 */
    dwiSpaceRecordTjgzDwBatchNumber?:number,
    /** 数据创建者 */
    dwiSpaceRecordTjgzDwCreationBy?:string,
    /** 数据创建时间 */
    dwiSpaceRecordTjgzDwCreationDate?:string,
    /** 数据来源系统名称 */
    dwiSpaceRecordTjgzDwDataSource?:string,
    /** 数据来源系统ID */
    dwiSpaceRecordTjgzDwDataSourceId?:string,
    /** 数据最后更新者 */
    dwiSpaceRecordTjgzDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwiSpaceRecordTjgzDwLastUpdateDate?:string,
    /** 数据来源表 */
    dwiSpaceRecordTjgzDwSourceTable?:string,
    /** 停车场id */
    dwiSpaceRecordTjgzExtId?:string,
    /** 空间id */
    dwiSpaceRecordTjgzId?:string,
    /** 该记录在源表里的添加时间 */
    dwiSpaceRecordTjgzInsertTime?:string,
    /** 纬度 */
    dwiSpaceRecordTjgzLatitude?:string,
    /** 层级code) */
    dwiSpaceRecordTjgzLevelCode?:string,
    /** 层级描述 */
    dwiSpaceRecordTjgzLevelDescription?:string,
    /** 层级名称 */
    dwiSpaceRecordTjgzLevelName?:string,
    /** 层级级别 */
    dwiSpaceRecordTjgzLevelOrder?:string,
    /** 经度 */
    dwiSpaceRecordTjgzLongitude?:string,
    /** 上级空间编码 */
    dwiSpaceRecordTjgzParentSpaceCode?:string,
    /** 路径 */
    dwiSpaceRecordTjgzPath?:string,
    /** 空间实例名称 */
    dwiSpaceRecordTjgzSpaceName?:string,
    /** 状态 */
    dwiSpaceRecordTjgzStatus?:string,
    /** 该记录在源表里的更新时间 */
    dwiSpaceRecordTjgzUpdateTime?:string,
    /** 乐观锁 */
    dwiSpaceRecordTjgzVersion?:number,
    /** 设备id */
    equipmentId?:string,
    /** 设备型号 */
    equipmentModel?:string,
    /** 高度 */
    height?:string,
    /** 主键 */
    id?:string,
    /** 纬度 */
    latitude?:string,
    /** 经度 */
    longitude?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 位置 */
    position?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDictPointPosition>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点位字典-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDictPointPosition>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictPointPosition/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 服务字典Service {
    
/**
 * 服务字典-添加
 */
static add(params: {
              
    /** exDictServiceCategory */
    exDictServiceCategory:ExDictServiceCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDictServiceCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务字典-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务字典-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务字典-编辑
 */
static edit(params: {
              
    /** exDictServiceCategory */
    exDictServiceCategory:ExDictServiceCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDictServiceCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询服务字典列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 服务名称 */
    serviceName?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDictServiceCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询服务字典树状结构
 */
static tree(options:IRequestOptions={}):Promise<接口返回对象<List<ExDictServiceCategory>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/list/tree'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务字典-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDictServiceCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceCategory/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_字典服务字典Service {
    
/**
 * 字典服务字典-添加
 */
static add(params: {
              
    /** exDictServiceDictionary */
    exDictServiceDictionary:ExDictServiceDictionary,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDictServiceDictionary']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 字典服务字典-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 字典服务字典-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 字典服务字典-编辑
 */
static edit(params: {
              
    /** exDictServiceDictionary */
    exDictServiceDictionary:ExDictServiceDictionary,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDictServiceDictionary']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询字典服务字典列表
 */
static list(params: {
              
    /** 计费方式 */
    billingMethod?:string,
    /** 服务项类别id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 服务项目描述说明 */
    remark?:string,
    /** 服务项类别 */
    serviceCategory?:string,
    /** 服务项目 */
    serviceItems?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDictServiceDictionary>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 字典服务字典-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDictServiceDictionary>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDictServiceDictionary/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_派单规则Service {
    
/**
 * 派单规则-添加
 */
static add(params: {
              
    /** exDispatchRules */
    exDispatchRules:ExDispatchRules,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDispatchRules']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-编辑
 */
static edit(params: {
              
    /** exDispatchRules */
    exDispatchRules:ExDispatchRules,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDispatchRules']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询派单规则列表
 */
static list(params: {
              
    /** 告警类型 */
    alarmType?:string,
    /** 条件设置 */
    conditionSettings?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departmentId?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型id */
    equipmentTypeId?:string,
    /** 创建人 */
    exDictServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDictServiceCategoryCreateTime?:string,
    /** 主键 */
    exDictServiceCategoryId?:string,
    /** 父id */
    exDictServiceCategoryParentId?:string,
    /** 服务名称 */
    exDictServiceCategoryServiceName?:string,
    /** 是否可用 */
    exDictServiceCategoryStatus?:string,
    /** 更新人 */
    exDictServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDictServiceCategoryUpdateTime?:string,
    /** 权重 */
    exDictServiceCategoryWeight?:number,
    /** 创建人 */
    exDictServiceCategorySubCreateBy?:string,
    /** 创建时间 */
    exDictServiceCategorySubCreateTime?:string,
    /** 主键 */
    exDictServiceCategorySubId?:string,
    /** 父id */
    exDictServiceCategorySubParentId?:string,
    /** 服务名称 */
    exDictServiceCategorySubServiceName?:string,
    /** 是否可用 */
    exDictServiceCategorySubStatus?:string,
    /** 更新人 */
    exDictServiceCategorySubUpdateBy?:string,
    /** 更新时间 */
    exDictServiceCategorySubUpdateTime?:string,
    /** 权重 */
    exDictServiceCategorySubWeight?:number,
    /** 主键 */
    id?:string,
    /** 是否启用 */
    ifEnabling?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 需求类型;内部、展期 */
    requirementType?:string,
    /** 规则类别;告警规则、需求规则 */
    ruleCategories?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则编号 */
    ruleNumber?:string,
    /** 任务类型id */
    serviceCategoryId?:string,
    /** 任务类型名称 */
    serviceCategoryName?:string,
    /** 服务项 */
    serviceItems?:string,
    /** 服务子项 */
    serviceSubItems?:string,
    /** 是否可用 */
    status?:string,
    /** 内外部任务类型 */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDispatchRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDispatchRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-启用派单规则
 */
static startById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDispatchRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRules/startById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_派单规则工单Service {
    
/**
 * 派单规则工单-添加
 */
static add(params: {
              
    /** exDispatchRulesDetails */
    exDispatchRulesDetails:ExDispatchRulesDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDispatchRulesDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则工单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则工单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则工单-编辑
 */
static edit(params: {
              
    /** exDispatchRulesDetails */
    exDispatchRulesDetails:ExDispatchRulesDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDispatchRulesDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询派单规则工单列表
 */
static list(params: {
              
    /** 所属分类 */
    classification?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程id */
    processId?:string,
    /** 流程标识 */
    processIdentification?:string,
    /** 流程名称 */
    processName?:string,
    /** 派单规则id */
    ruleId?:string,
    /** 是否可用 */
    status?:string,
    /** 分类名称 */
    typeName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDispatchRulesDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则工单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDispatchRulesDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDispatchRulesDetails/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 图纸上传展期订单项目清单Service {
    
/**
 * 图纸上传展期订单项目清单-添加
 */
static add(params: {
              
    /** project */
    project:ExDrawingDemandCenterExtensionProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['project']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 图纸上传展期订单项目清单-批量添加
 */
static addList(params: {
              
    /** exDrawingDemandCenterExtensionProjects */
    exDrawingDemandCenterExtensionProjects:ExDrawingDemandCenterExtensionProject[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/addList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDrawingDemandCenterExtensionProjects']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 图纸上传展期订单项目清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 图纸上传展期订单项目清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 图纸上传展期订单项目清单-编辑
 */
static edit(params: {
              
    /** exDrawingDemandCenterExtensionProject */
    exDrawingDemandCenterExtensionProject:ExDrawingDemandCenterExtensionProject,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDrawingDemandCenterExtensionProject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询图纸上传展期订单项目清单列表
 */
static list(params: {
              
    /** 所属公司 */
    affiliatedCompany?:string,
    /** 审核通过时间 */
    approvalTime?:string,
    /** 附件 */
    attachment?:string,
    /** 批次id */
    batchId?:string,
    /** 展位号 */
    boothNumber?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 执行部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 派单部门 */
    dispatchDepartment?:string,
    /** 派单部门id */
    dispatchDepartmentId?:string,
    /** 派单人 */
    dispatchUser?:string,
    /** 执行人 */
    executor?:string,
    /** 展区 */
    exhibitionArea?:string,
    /** 展馆号 */
    exhibitionHallNumber?:string,
    /** 展会名称 */
    exhibitionName?:string,
    /** 文件 */
    file?:string,
    /** 主键 */
    id?:string,
    /** 报馆时间 */
    newspaperTime?:string,
    /** 接单部门 */
    orderDepartment?:string,
    /** 订单id */
    orderId?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单备注 */
    orderRemarks?:string,
    /** 订单类型 */
    orderType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 展馆号 */
    pavilion?:string,
    /** 订单状态 */
    projectStatus?:string,
    /** 数量 */
    quantity?:number,
    /** 服务分类 */
    serviceCategory?:string,
    /** 服务分类 */
    serviceClassification?:string,
    /** 服务项 */
    serviceItems?:string,
    /** 服务名称 */
    serviceName?:string,
    /** 服务规格 */
    serviceSpecifications?:string,
    /** 是否可用 */
    status?:string,
    /** 主体类型 */
    subjectType?:string,
    /** 同步时间 */
    synchronizationTime?:string,
    /** 任务id */
    taskId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工单号 */
    workOrderNumber?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDrawingDemandCenterExtensionProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 图纸上传展期订单项目清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDrawingDemandCenterExtensionProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExDrawingDemandCenterExtension/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备电梯管理Service {
    
/**
 * 设备电梯管理-添加
 */
static add(params: {
              
    /** exEquipmentElevatorManagement */
    exEquipmentElevatorManagement:ExEquipmentElevatorManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exEquipmentElevatorManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备电梯管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备电梯管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备电梯管理-编辑
 */
static edit(params: {
              
    /** exEquipmentElevatorManagement */
    exEquipmentElevatorManagement:ExEquipmentElevatorManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exEquipmentElevatorManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备电梯管理列表
 */
static list(params: {
              
    /** 电梯名称 */
    companyName?:string,
    /** 展区 */
    contactInformation?:string,
    /** 电梯分类 */
    contacts?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 电梯编号 */
    unitType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEquipmentElevatorManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备电梯管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExEquipmentElevatorManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEquipmentElevatorManagement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_展会合作单位管理Service {
    
/**
 * 展会合作单位管理-添加
 */
static add(params: {
              
    /** exEventCooperativeManagement */
    exEventCooperativeManagement:ExEventCooperativeManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exEventCooperativeManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会合作单位管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会合作单位管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会合作单位管理-编辑
 */
static edit(params: {
              
    /** exEventCooperativeManagement */
    exEventCooperativeManagement:ExEventCooperativeManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exEventCooperativeManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展会合作单位管理列表
 */
static list(params: {
              
    /** 合作单位名称 */
    companyName?:string,
    /** 联系方式 */
    contactInformation?:string,
    /** 联系人 */
    contacts?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 合作单位类型;主办、主运、主场 */
    unitType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEventCooperativeManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会合作单位管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExEventCooperativeManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventCooperativeManagement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_展会管理Service {
    
/**
 * 展会管理-添加
 */
static add(params: {
              
    /** exEventManagement */
    exEventManagement:ExEventManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exEventManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会管理-编辑
 */
static edit(params: {
              
    /** exEventManagement */
    exEventManagement:ExEventManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exEventManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展会管理列表
 */
static list(params: {
              
    /** 地址 */
    address?:string,
    /** 面积 */
    area?:number,
    /** 主搭建商 */
    builderImportant?:string,
    /** 闭展日期 */
    closingDate?:string,
    /** 协办单位 */
    coOrganizer?:string,
    /** 联系方式 */
    contactInformation?:string,
    /** 展会联系人 */
    contactPerson?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 开展日期 */
    dateImplementation?:string,
    /** 进场日期 */
    entryDate?:string,
    /** 展会简介 */
    exhibitionIntroduction?:string,
    /** 展会名称 */
    exhibitionName?:string,
    /** 展会编号 */
    exhibitionNumber?:string,
    /** 展会状态 */
    exhibitionStatus?:string,
    /** 主键 */
    id?:string,
    /** 所属行业 */
    industry?:string,
    /** 主办单位 */
    organizer?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 承办单位 */
    undertakingUnit?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEventManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExEventManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExEventManagement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_展馆管理Service {
    
/**
 * 展馆管理-添加
 */
static add(params: {
              
    /** exExhibitionHallManagement */
    exExhibitionHallManagement:ExExhibitionHallManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exExhibitionHallManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展馆管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展馆管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展馆管理-编辑
 */
static edit(params: {
              
    /** exExhibitionHallManagement */
    exExhibitionHallManagement:ExExhibitionHallManagement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exExhibitionHallManagement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展馆管理列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 场馆类型 */
    type?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 场馆名字 */
    venueName?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExExhibitionHallManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展馆管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExExhibitionHallManagement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExExhibitionHallManagement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 一键发起详细任务Service {
    
/**
 * 一键发起详细任务-添加
 */
static add(params: {
              
    /** exOneClickTasksDetailed */
    exOneClickTasksDetailed:ExOneClickTasksDetailed,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exOneClickTasksDetailed']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起详细任务-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起详细任务-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起详细任务-编辑
 */
static edit(params: {
              
    /** exOneClickTasksDetailed */
    exOneClickTasksDetailed:ExOneClickTasksDetailed,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exOneClickTasksDetailed']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询一键发起详细任务列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 数据json */
    dataJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 任务所属类别 */
    fromType?:string,
    /** 主键 */
    id?:string,
    /** jsonId */
    jsonId?:string,
    /** 新json */
    newFormJson?:string,
    /** 一键发起需求id */
    oneClickId?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 接单部门id */
    receiveDepartId?:string,
    /** 接单部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单部门姓名 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 是否可用 */
    status?:string,
    /** 任务状态 */
    taskStatus?:string,
    /** 任务类型 */
    taskType?:string,
    /** 任务类型id */
    taskTypeId?:string,
    /** 需求/告警分类 */
    twoFromType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExOneClickTasksDetailed>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起详细任务-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExOneClickTasksDetailed>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExOneClickTasksDetailed/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划巡检计划Service {
    
/**
 * 计划巡检计划-全部启动任务
 */
static allStartTask(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/AllStartTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-添加
 */
static add(params: {
              
    /** exPlanInspectionPlan */
    exPlanInspectionPlan:ExPlanInspectionPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-添加至模板
 */
static addTemplate(params: {
              
    /** exPlanInspectionPlan */
    exPlanInspectionPlan:ExPlanInspectionPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/addTemplate'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-批量启动任务
 */
static batchStart(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/batchStart'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-编辑
 */
static edit(params: {
              
    /** exPlanInspectionPlan */
    exPlanInspectionPlan:ExPlanInspectionPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanInspectionPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-巡检项目
 */
static inspectionItems(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetailsVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/inspectionItems'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-巡检任务
 */
static inspectionTasks(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetails>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/inspectionTasks'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-引入模板
 */
static leadIntoTemplate(params: {
              
    /** exPlanInspectionPatrolPlanTemplate */
    exPlanInspectionPatrolPlanTemplate:ExPlanInspectionPatrolPlanTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/leadIntoTemplate'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划巡检计划列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 每日时间结束时间 */
    dailyTimeEnd?:string,
    /** 每日时间范围 */
    dailyTimeRange?:string,
    /** 每日时间开始时间 */
    dailyTimeStart?:string,
    /** 类型 */
    dateType?:string,
    /** 执行部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    equipmentTypeIds?:string,
    /** 执行人 */
    executor?:string,
    /** 执行人id */
    executorId?:string,
    /** 频次 */
    frequency?:number,
    /** 是否生成任务 */
    generateTask?:string,
    /** 生成任务时间 */
    generateTaskTime?:string,
    /** 主键 */
    id?:string,
    /** 节假日是否继续生成任务 */
    ifGenerateTask?:string,
    /** 是否指定日期 */
    ifSpecifyDate?:string,
    /** 巡检类型 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划执行日期 */
    planActivatedDate?:string[],
    /** 计划完成度 */
    planCompletion?:number,
    /** 计划周期类型 */
    planCycleType?:string,
    /** 计划名称 */
    planName?:string,
    /** 计划编号 */
    planNumber?:string,
    /** 计划状态 */
    planStuas?:string,
    /** 组件 */
    planTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    planTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    planTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    planTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    planTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    planTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    planTaskActRuFormExtendFromType?:string,
    /** 主键 */
    planTaskActRuFormExtendId?:string,
    /** 是否启用 */
    planTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    planTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    planTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    planTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    planTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    planTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    planTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    planTaskActRuFormExtendStatus?:string,
    /** 表名 */
    planTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    planTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    planTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    planTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    planTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    planTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    planTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    planTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    planTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    planTaskApprovalStatus?:string,
    /** 归档id */
    planTaskArchiveId?:string,
    /** 归档时间 */
    planTaskArchiveTime?:string,
    /** 归档人 */
    planTaskArchivedBy?:string,
    /** 所属分类Id */
    planTaskCategoryId?:string,
    /** 创建人 */
    planTaskCreateBy?:string,
    /** 创建时间 */
    planTaskCreateTime?:string,
    /** 当前状态 */
    planTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    planTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    planTaskCurrteParentId?:string,
    /** 数据json */
    planTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskDelFlag?:number,
    /** 派单人部门id */
    planTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    planTaskDispatchDepartName?:string,
    /** 派单时间 */
    planTaskDispatchTime?:string,
    /** 派单人id */
    planTaskDispatchUserId?:string,
    /** 派单人名称 */
    planTaskDispatchUserName?:string,
    /** 所属公司 */
    planTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    planTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    planTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    planTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    planTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    planTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    planTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    planTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    planTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    planTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    planTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    planTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    planTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    planTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    planTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    planTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    planTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    planTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    planTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    planTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    planTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    planTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    planTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    planTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    planTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    planTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    planTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    planTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    planTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    planTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    planTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    planTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    planTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    planTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    planTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    planTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    planTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    planTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    planTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    planTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    planTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    planTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    planTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    planTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    planTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    planTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    planTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    planTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    planTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    planTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    planTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    planTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    planTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    planTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    planTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    planTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    planTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    planTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    planTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    planTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    planTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    planTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    planTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    planTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    planTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    planTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    planTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    planTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    planTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    planTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    planTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    planTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    planTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    planTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    planTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    planTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    planTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    planTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    planTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    planTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    planTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    planTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    planTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    planTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    planTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    planTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    planTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    planTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    planTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    planTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    planTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    planTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    planTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    planTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    planTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    planTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    planTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    planTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    planTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    planTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    planTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    planTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    planTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    planTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    planTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    planTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    planTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    planTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    planTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    planTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    planTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    planTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    planTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    planTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    planTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    planTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    planTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    planTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    planTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    planTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    planTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    planTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    planTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    planTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    planTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    planTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    planTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    planTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    planTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    planTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    planTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    planTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    planTaskExhAlarmStatus?:string,
    /** 流转数据json */
    planTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    planTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    planTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    planTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmVersion?:number,
    /** 权重 */
    planTaskExhAlarmWeight?:number,
    /** 工作组id */
    planTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    planTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    planTaskFlowTypeVo?:string,
    /** 表单id */
    planTaskFormId?:string,
    /** 表单json */
    planTaskFormJson?:string,
    /** 表单名称Vo */
    planTaskFromNameVo?:string,
    /** 主键 */
    planTaskId?:string,
    /** 是否为流程审批任务 */
    planTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    planTaskIfService?:number,
    /** 操作说明 */
    planTaskOperatingInstructions?:string,
    /** 父id */
    planTaskParentId?:string,
    /** 计划执行时间范围 */
    planTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    planTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    planTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    planTaskProcessId?:string,
    /** 接单人部门id */
    planTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskReceiveDepartName?:string,
    /** 接单时间 */
    planTaskReceiveTime?:string,
    /** 接单人id */
    planTaskReceiveUserId?:string,
    /** 接单人名称 */
    planTaskReceiveUserName?:string,
    /** 备注 */
    planTaskRemark?:string,
    /** 所属分类 */
    planTaskServiceCategory?:string,
    /** 服务项目Vo */
    planTaskServiceItemsVo?:string,
    /** 是否可用 */
    planTaskStatus?:string,
    /** 任务处理完成时间 */
    planTaskTaskEndTime?:string,
    /** 任务名称 */
    planTaskTaskName?:string,
    /** 任务源id */
    planTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    planTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    planTaskTaskType?:string,
    /** 更新人 */
    planTaskUpdateBy?:string,
    /** 更新时间 */
    planTaskUpdateTime?:string,
    /** 乐观锁 */
    planTaskVersion?:number,
    /** 权重 */
    planTaskWeight?:number,
    /** 工作内容 */
    planTaskWorkDetail?:string,
    /** 工作事项 */
    planTaskWorkItem?:string,
    /** 工作事项id */
    planTaskWorkItemId?:string,
    /** 工单号 */
    planTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    planTaskWorkOrderStatus?:string,
    /** 工作组id */
    planTaskWorkgroupId?:string,
    /** 工作组名称 */
    planTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    plannedDateEnd?:string,
    /** 计划日期范围 */
    plannedDateRange?:string,
    /** 计划日期开始时间 */
    plannedDateStart?:string,
    /** 项目类别 */
    projectCategory?:string,
    /** 所属区域 */
    region?:string,
    /** 发布计划类型;暂存、已发布 */
    releaseType?:string,
    /** 备注 */
    remark?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核时间 */
    reviewTime?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 模板id */
    templateId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划-巡检-按月查询计划甘特图
 */
static month(params: {
              
    /** month */
    month:number,
    /** year */
    year:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlan>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/list/activated/month'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划-巡检-按年查询计划甘特图
 */
static year(params: {
              
    /** year */
    year:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlan>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/list/activated/year'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanInspectionPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据设备类型id和周期类型查询具体巡检项目列表
 */
static standardDetailListByEqidAndPeriodLabel(params: {
              
    /** equipmentTypeId */
    equipmentTypeId:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** periodLabel */
    periodLabel:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExInspectionStandardsProjectDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlan/standardDetailListByEqidAndPeriodLabel'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划巡检计划设备事件清单Service {
    
/**
 * 计划巡检计划设备事件清单-添加
 */
static add(params: {
              
    /** exPlanInspectionPlanDetails */
    exPlanInspectionPlanDetails:ExPlanInspectionPlanDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPlanDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划设备事件清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划设备事件清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划设备事件清单-编辑
 */
static edit(params: {
              
    /** exPlanInspectionPlanDetails */
    exPlanInspectionPlanDetails:ExPlanInspectionPlanDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanInspectionPlanDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划巡检计划设备事件清单列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型id */
    equipmentTypeId?:string,
    /** 事件名称 */
    eventName?:string,
    /** 填写值 */
    fillInValues?:string,
    /** 主键 */
    id?:string,
    /** 点检内容 */
    inspectionContent?:string,
    /** 点检标准 */
    inspectionStandards?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 巡更计划id */
    patrolPlanId?:string,
    /** 周期标签(年、月、日可多选) */
    periodLabel?:string,
    /** 巡检计划id */
    planId?:string,
    /** 计划类型 */
    playType?:string,
    /** 记录方式 */
    recordingMethod?:string,
    /** 备注 */
    remark?:string,
    /** 点检库id */
    standardId?:string,
    /** 上限/异常值 */
    standardValueOffline?:string,
    /** 下限/正常值 */
    standardValueOnline?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPlanDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询巡检巡更设备类型list
 */
static listByType(params: {
              
    /** planDetails */
    planDetails:ExPlanInspectionPlanDetails[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetailsVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/listByType'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['planDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检计划设备事件清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanInspectionPlanDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanInspectionPlanDetails/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划巡更计划Service {
    
/**
 * 计划巡更计划-全部启动任务
 */
static allStartTask(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/AllStartTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-添加
 */
static add(params: {
              
    /** exPlanPatrolPlan */
    exPlanPatrolPlan:ExPlanPatrolPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanPatrolPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-添加至模板
 */
static addTemplate(params: {
              
    /** exPlanPatrolPlan */
    exPlanPatrolPlan:ExPlanPatrolPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/addTemplate'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanPatrolPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-批量启动任务
 */
static batchStart(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/batchStart'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-编辑
 */
static edit(params: {
              
    /** exPlanPatrolPlan */
    exPlanPatrolPlan:ExPlanPatrolPlan,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanPatrolPlan']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-巡更项目
 */
static inspectionItems(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetails>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/inspectionItems'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-巡更任务
 */
static inspectionTasks(params: {
              
    /** planId */
    planId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetails>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/inspectionTasks'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-引入模板
 */
static leadIntoTemplate(params: {
              
    /** exPlanInspectionPatrolPlanTemplate */
    exPlanInspectionPatrolPlanTemplate:ExPlanInspectionPatrolPlanTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/leadIntoTemplate'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划巡更计划列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 每日时间结束时间 */
    dailyTimeEnd?:string,
    /** 每日时间范围 */
    dailyTimeRange?:string,
    /** 每日时间开始时间 */
    dailyTimeStart?:string,
    /** 类型 */
    dateType?:string,
    /** 执行部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 执行人 */
    executor?:string,
    /** 执行人id */
    executorId?:string,
    /** 频次 */
    frequency?:number,
    /** 生成任务时间 */
    generateTaskTime?:string,
    /** 主键 */
    id?:string,
    /** 节假日是否继续生成任务 */
    ifGenerateTask?:string,
    /** 是否指定日期 */
    ifSpecifyDate?:string,
    /** 巡检类型 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划执行日期 */
    planActivatedDate?:string[],
    /** 计划完成度 */
    planCompletion?:number,
    /** 计划周期类型 */
    planCycleType?:string,
    /** 计划名称 */
    planName?:string,
    /** 计划编号 */
    planNumber?:string,
    /** 计划状态 */
    planStuas?:string,
    /** 组件 */
    planTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    planTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    planTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    planTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    planTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    planTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    planTaskActRuFormExtendFromType?:string,
    /** 主键 */
    planTaskActRuFormExtendId?:string,
    /** 是否启用 */
    planTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    planTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    planTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    planTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    planTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    planTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    planTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    planTaskActRuFormExtendStatus?:string,
    /** 表名 */
    planTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    planTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    planTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    planTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    planTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    planTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    planTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    planTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    planTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    planTaskApprovalStatus?:string,
    /** 归档id */
    planTaskArchiveId?:string,
    /** 归档时间 */
    planTaskArchiveTime?:string,
    /** 归档人 */
    planTaskArchivedBy?:string,
    /** 所属分类Id */
    planTaskCategoryId?:string,
    /** 创建人 */
    planTaskCreateBy?:string,
    /** 创建时间 */
    planTaskCreateTime?:string,
    /** 当前状态 */
    planTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    planTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    planTaskCurrteParentId?:string,
    /** 数据json */
    planTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskDelFlag?:number,
    /** 派单人部门id */
    planTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    planTaskDispatchDepartName?:string,
    /** 派单时间 */
    planTaskDispatchTime?:string,
    /** 派单人id */
    planTaskDispatchUserId?:string,
    /** 派单人名称 */
    planTaskDispatchUserName?:string,
    /** 所属公司 */
    planTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    planTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    planTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    planTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    planTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    planTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    planTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    planTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    planTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    planTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    planTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    planTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    planTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    planTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    planTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    planTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    planTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    planTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    planTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    planTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    planTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    planTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    planTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    planTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    planTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    planTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    planTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    planTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    planTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    planTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    planTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    planTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    planTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    planTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    planTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    planTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    planTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    planTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    planTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    planTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    planTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    planTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    planTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    planTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    planTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    planTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    planTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    planTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    planTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    planTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    planTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    planTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    planTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    planTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    planTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    planTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    planTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    planTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    planTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    planTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    planTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    planTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    planTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    planTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    planTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    planTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    planTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    planTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    planTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    planTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    planTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    planTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    planTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    planTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    planTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    planTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    planTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    planTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    planTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    planTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    planTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    planTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    planTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    planTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    planTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    planTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    planTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    planTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    planTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    planTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    planTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    planTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    planTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    planTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    planTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    planTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    planTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    planTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    planTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    planTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    planTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    planTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    planTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    planTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    planTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    planTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    planTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    planTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    planTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    planTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    planTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    planTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    planTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    planTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    planTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    planTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    planTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    planTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    planTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    planTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    planTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    planTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    planTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    planTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    planTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    planTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    planTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    planTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    planTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    planTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    planTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    planTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    planTaskExhAlarmStatus?:string,
    /** 流转数据json */
    planTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    planTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    planTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    planTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmVersion?:number,
    /** 权重 */
    planTaskExhAlarmWeight?:number,
    /** 工作组id */
    planTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    planTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    planTaskFlowTypeVo?:string,
    /** 表单id */
    planTaskFormId?:string,
    /** 表单json */
    planTaskFormJson?:string,
    /** 表单名称Vo */
    planTaskFromNameVo?:string,
    /** 主键 */
    planTaskId?:string,
    /** 是否为流程审批任务 */
    planTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    planTaskIfService?:number,
    /** 操作说明 */
    planTaskOperatingInstructions?:string,
    /** 父id */
    planTaskParentId?:string,
    /** 计划执行时间范围 */
    planTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    planTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    planTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    planTaskProcessId?:string,
    /** 接单人部门id */
    planTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskReceiveDepartName?:string,
    /** 接单时间 */
    planTaskReceiveTime?:string,
    /** 接单人id */
    planTaskReceiveUserId?:string,
    /** 接单人名称 */
    planTaskReceiveUserName?:string,
    /** 备注 */
    planTaskRemark?:string,
    /** 所属分类 */
    planTaskServiceCategory?:string,
    /** 服务项目Vo */
    planTaskServiceItemsVo?:string,
    /** 是否可用 */
    planTaskStatus?:string,
    /** 任务处理完成时间 */
    planTaskTaskEndTime?:string,
    /** 任务名称 */
    planTaskTaskName?:string,
    /** 任务源id */
    planTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    planTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    planTaskTaskType?:string,
    /** 更新人 */
    planTaskUpdateBy?:string,
    /** 更新时间 */
    planTaskUpdateTime?:string,
    /** 乐观锁 */
    planTaskVersion?:number,
    /** 权重 */
    planTaskWeight?:number,
    /** 工作内容 */
    planTaskWorkDetail?:string,
    /** 工作事项 */
    planTaskWorkItem?:string,
    /** 工作事项id */
    planTaskWorkItemId?:string,
    /** 工单号 */
    planTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    planTaskWorkOrderStatus?:string,
    /** 工作组id */
    planTaskWorkgroupId?:string,
    /** 工作组名称 */
    planTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    plannedDateEnd?:string,
    /** 计划日期范围 */
    plannedDateRange?:string,
    /** 计划日期开始时间 */
    plannedDateStart?:string,
    /** 项目类别 */
    projectCategory?:string,
    /** 所属区域 */
    region?:string,
    /** 发布计划类型;暂存、已发布 */
    releaseType?:string,
    /** 备注 */
    remark?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核时间 */
    reviewTime?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 模板id */
    templateId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanPatrolPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划-巡更-按月查询计划甘特图
 */
static month(params: {
              
    /** month */
    month:number,
    /** year */
    year:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanPatrolPlan>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/list/activated/month'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划-巡更-按年查询计划甘特图
 */
static year(params: {
              
    /** year */
    year:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanPatrolPlan>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/list/activated/year'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-查看处理进度
 */
static planSchedule(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetails>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/planSchedule'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanPatrolPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-根据任务id查询计划list
 */
static taskIdQuery(params: {
              
    /** taskId */
    taskId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/taskIdQuery'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-模板list
 */
static templateList(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPatrolPlanTemplate>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExPlanPatrolPlan/templateList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 流程工单规则Service {
    
/**
 * 流程工单规则-添加
 */
static add(params: {
              
    /** exProcessWorkOrderRules */
    exProcessWorkOrderRules:ExProcessWorkOrderRules,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exProcessWorkOrderRules']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程工单规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程工单规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程工单规则-编辑
 */
static edit(params: {
              
    /** exProcessWorkOrderRules */
    exProcessWorkOrderRules:ExProcessWorkOrderRules,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exProcessWorkOrderRules']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询流程工单规则列表
 */
static list(params: {
              
    /** 告警类型 */
    alarmType?:string,
    /** 所属分类（审批流的分类） */
    classification?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备分类 */
    equipmentType?:string,
    /** 主键 */
    id?:string,
    /** 是否启用 */
    ifEnabling?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 流程id */
    processId?:string,
    /** 流程标识 */
    processIdentification?:string,
    /** 流程名称 */
    processName?:string,
    /** 流程类型（正常、异常） */
    processType?:string,
    /** 需求类型（内部、外部、展期） */
    requirementType?:string,
    /** 服务分类 */
    serviceClassification?:string,
    /** 是否可用 */
    status?:string,
    /** 分类名称（告警中心、需求中心） */
    typeName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExProcessWorkOrderRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程工单规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExProcessWorkOrderRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 流程工单规则-启用派单规则
 */
static startById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExProcessWorkOrderRules>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExProcessWorkOrderRules/startById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_任务中心Service {
    
/**
 * 任务中心-添加
 */
static add(params: {
              
    /** exTaskCenter */
    exTaskCenter:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exTaskCenter']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-告警中心测试点击数据回传
 */
static dataFeedback(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/dataFeedback'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-派单人撤回任务
 */
static deleteTask(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/deleteTask'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-编辑
 */
static edit(params: {
              
    /** exTaskCenter */
    exTaskCenter:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exTaskCenter']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 已完成任务栏
 */
static finished(params: {
              
    /** departId */
    departId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/finished'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查询当前任务下所有叶子节点
 */
static getChildByTaskId(params: {
              
    /** taskId */
    taskId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/getChildByTaskId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 处理中任务栏
 */
static handling(params: {
              
    /** departId */
    departId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/handling'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询任务中心列表
 */
static list(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询叶子节点任务
 */
static leaf(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** statusType */
    statusType:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/list/leaf'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询任务树状结构
 */
static tree(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/list/tree'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查看当前部门下级部门以及平级部门
 */
static lowerLevelDepartmentList(params: {
              
    /** departmentId */
    departmentId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/lowerLevelDepartmentList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询我的已办
 */
static myDoneList(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/myDoneList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询我的待办
 */
static myToDoList(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/myToDoList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-审核完成
 */
static approved(params: {
              
    /** task */
    task:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/approved'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['task']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-协同
 */
static coordination(params: {
              
    /** task */
    task:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/coordination'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['task']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-派单
 */
static dispatch(params: {
              
    /** dispatchDepartId */
    dispatchDepartId?:string,
    /** dispatchDepartName */
    dispatchDepartName?:string,
    /** dispatchUserId */
    dispatchUserId?:string,
    /** dispatchUserName */
    dispatchUserName?:string,
    /** receiveDepartId */
    receiveDepartId?:string,
    /** receiveDepartName */
    receiveDepartName?:string,
    /** receiveUserId */
    receiveUserId?:string,
    /** receiveUserName */
    receiveUserName?:string,
    /** taskId */
    taskId?:string,
    /** workgroupId */
    workgroupId?:string,
    /** workgroupName */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/dispatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'dispatchDepartId':params['dispatchDepartId'],'dispatchDepartName':params['dispatchDepartName'],'dispatchUserId':params['dispatchUserId'],'dispatchUserName':params['dispatchUserName'],'receiveDepartId':params['receiveDepartId'],'receiveDepartName':params['receiveDepartName'],'receiveUserId':params['receiveUserId'],'receiveUserName':params['receiveUserName'],'taskId':params['taskId'],'workgroupId':params['workgroupId'],'workgroupName':params['workgroupName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-处理完成
 */
static finished1(params: {
              
    /** task */
    task:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/finished'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['task']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-处理
 */
static processing(params: {
              
    /** task */
    task:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/processing'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['task']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-接单
 */
static receive(params: {
              
    /** task */
    task:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/receive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['task']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-转单
 */
static turnOrder(params: {
              
    /** dispatchDepartId */
    dispatchDepartId?:string,
    /** dispatchDepartName */
    dispatchDepartName?:string,
    /** dispatchUserId */
    dispatchUserId?:string,
    /** dispatchUserName */
    dispatchUserName?:string,
    /** receiveDepartId */
    receiveDepartId?:string,
    /** receiveDepartName */
    receiveDepartName?:string,
    /** receiveUserId */
    receiveUserId?:string,
    /** receiveUserName */
    receiveUserName?:string,
    /** taskId */
    taskId?:string,
    /** workgroupId */
    workgroupId?:string,
    /** workgroupName */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/operation/turnOrder'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'dispatchDepartId':params['dispatchDepartId'],'dispatchDepartName':params['dispatchDepartName'],'dispatchUserId':params['dispatchUserId'],'dispatchUserName':params['dispatchUserName'],'receiveDepartId':params['receiveDepartId'],'receiveDepartName':params['receiveDepartName'],'receiveUserId':params['receiveUserId'],'receiveUserName':params['receiveUserName'],'taskId':params['taskId'],'workgroupId':params['workgroupId'],'workgroupName':params['workgroupName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 待处理任务栏
 */
static pendingTask(params: {
              
    /** departId */
    departId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/pendingTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-发起异常流程申请
 */
static processApplication(params: {
              
    /** exTaskCenter */
    exTaskCenter:ExTaskCenter,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/processApplication'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exTaskCenter']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-任务处理进程
 */
static processingProcess(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCneterProcessingVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/processingProcess'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查询会展商业电箱完成情况
 */
static queryElectricBox(params: {
              
    /** projectIds */
    projectIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExProjectElectricBoxVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/queryElectricBox'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查询任务所有叶子结点
 */
static queryLeafTask(params: {
              
    /** taskId */
    taskId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExTaskCenter>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenter/queryLeafTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 任务中心日志Service {
    
/**
 * 任务中心日志-添加
 */
static add(params: {
              
    /** exTaskCenterLog */
    exTaskCenterLog:ExTaskCenterLog,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exTaskCenterLog']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心日志-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心日志-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心日志-编辑
 */
static edit(params: {
              
    /** exTaskCenterLog */
    exTaskCenterLog:ExTaskCenterLog,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exTaskCenterLog']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询任务中心日志列表
 */
static list(params: {
              
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 主键 */
    id?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务id */
    taskId?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务状态 */
    taskStatus?:string,
    /** 任务类型（展期需求、内部需求、外部需求、巡检计划、巡更计划、设备告警、安防告警、事件告警） */
    taskType?:string,
    /** 时间戳 */
    timestamp?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenterLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过任务查询任务中心日志列表
 */
static listByTask(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<日志Vo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/listByTask'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心日志-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExTaskCenterLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskCenterLog/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 任务流程中间Service {
    
/**
 * 任务流程中间-添加
 */
static add(params: {
              
    /** exTaskProcessIntermediate */
    exTaskProcessIntermediate:ExTaskProcessIntermediate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exTaskProcessIntermediate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务流程中间-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务流程中间-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务流程中间-编辑
 */
static edit(params: {
              
    /** exTaskProcessIntermediate */
    exTaskProcessIntermediate:ExTaskProcessIntermediate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exTaskProcessIntermediate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询任务流程中间列表
 */
static list(params: {
              
    /**  */
    bId?:string,
    /**  */
    tId?:string,
    /** 审批类型;验证审批、异常审批 */
    approvalType?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskProcessIntermediate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务流程中间-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExTaskProcessIntermediate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExTaskProcessIntermediate/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作组Service {
    
/**
 * 工作组-添加
 */
static add(params: {
              
    /** exWorkingGroup */
    exWorkingGroup:ExWorkingGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exWorkingGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组-编辑
 */
static edit(params: {
              
    /** exWorkingGroup */
    exWorkingGroup:ExWorkingGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exWorkingGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作组列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组名称 */
    workerName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExWorkingGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExWorkingGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组-批量查询id
 */
static queryByIds(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExWorkingGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/queryByIds'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据工作事项筛选工作组id
 */
static queryByOrderDepartment(params: {
              
    /** taskType */
    taskType:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExWorkingGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroup/queryByOrderDepartment'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作组人员Service {
    
/**
 * 工作组人员-添加
 */
static add(params: {
              
    /** exWorkingGroupPerson */
    exWorkingGroupPerson:ExWorkingGroupPerson,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exWorkingGroupPerson']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组人员-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组人员-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组人员-编辑
 */
static edit(params: {
              
    /** exWorkingGroupPerson */
    exWorkingGroupPerson:ExWorkingGroupPerson,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exWorkingGroupPerson']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作组人员列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 所属部门ids */
    departIds?:string,
    /** 所属部门 */
    departments?:string,
    /** 主键 */
    id?:string,
    /** 是否启用 */
    isEnabled?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 联系方式 */
    phone?:string,
    /** 职位id */
    postId?:string,
    /** 职位名称 */
    postName?:string,
    /** 真实姓名 */
    realname?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 所属组别 */
    userGroup?:string,
    /** 用户id */
    userId?:string,
    /** 姓名 */
    username?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workerId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExWorkingGroupPerson>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组人员-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExWorkingGroupPerson>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作组人员-批量查询id
 */
static queryByIds(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExWorkingGroupPerson>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExWorkingGroupPerson/queryByIds'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_升级规则Service {
    
/**
 * 告警升级规则-添加
 */
static add(params: {
              
    /** exhAlarmUpgradRule */
    exhAlarmUpgradRule:ExhAlarmUpgradRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmUpgradRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警升级规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警升级规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警升级规则-编辑
 */
static edit(params: {
              
    /** exhAlarmUpgradRule */
    exhAlarmUpgradRule:ExhAlarmUpgradRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmUpgradRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警升级规则列表
 */
static list(params: {
              
    /** 告警类型 */
    alarmType?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否启用 */
    startStatus?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 升级时间 */
    upgradeTime?:number,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmUpgradRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警升级规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmUpgradRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警升级规则-启用规则
 */
static startById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmUpgradRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExhAlarmUpgradRule/startById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 会展商业项目处理清单Service {
    
/**
 * 会展商业项目处理清单-添加
 */
static add(params: {
              
    /** exDemandCenterExtensionProjectDetails */
    exDemandCenterExtensionProjectDetails:ExDemandCenterExtensionProjectDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProjectDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 会展商业项目处理清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 会展商业项目处理清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 会展商业项目处理清单-编辑
 */
static edit(params: {
              
    /** exDemandCenterExtensionProjectDetails */
    exDemandCenterExtensionProjectDetails:ExDemandCenterExtensionProjectDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exDemandCenterExtensionProjectDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询会展商业项目处理清单列表
 */
static list(params: {
              
    /** 电缆需求数量（米） */
    cableQuantity?:string,
    /** 所属分类 */
    category?:string,
    /** 完成图片 */
    complatePicture?:string,
    /** 接驳图片 */
    connectionPicture?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 拆除图片 */
    dismantlePicture?:string,
    /** 电箱ID */
    electricBox?:string,
    /** 固定电箱ID */
    fixedElectricBox?:string,
    /** 主键 */
    id?:string,
    /** 是否开通布展施工用电 */
    ifActivate?:string,
    /** 是否接驳完成 */
    ifConnectionComplate?:string,
    /** 是否拆除完成 */
    ifDismantleComplate?:string,
    /** 是否安装完成 */
    ifInstallComplate?:string,
    /** 是否超长电缆 */
    ifLongCable?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 项目id */
    projectId?:string,
    /** 数量 */
    quantity?:string,
    /** 备注 */
    remark?:string,
    /** 责任人 */
    responsiblePerson?:string,
    /** 服务项目规格 */
    serviceSpecifications?:string,
    /** 服务项目标准 */
    serviceStandard?:string,
    /** 是否可用 */
    status?:string,
    /** 任务编码 */
    taskCode?:string,
    /** 任务id */
    taskId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterExtensionProjectDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 会展商业项目处理清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExDemandCenterExtensionProjectDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 会展商业项目处理清单-根据项目查询处理清单
 */
static queryByProjectList(params: {
              
    /** projectId */
    projectId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExDemandCenterExtensionProjectDetails>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/ExtensionProjectDetails/queryByProjectList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划巡检巡更计划模板Service {
    
/**
 * 计划巡检巡更计划模板-添加
 */
static add(params: {
              
    /** exPlanInspectionPatrolPlanTemplate */
    exPlanInspectionPatrolPlanTemplate:ExPlanInspectionPatrolPlanTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划模板-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划模板-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划模板-编辑
 */
static edit(params: {
              
    /** exPlanInspectionPatrolPlanTemplate */
    exPlanInspectionPatrolPlanTemplate:ExPlanInspectionPatrolPlanTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划巡检巡更计划模板列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 每日时间范围 */
    dailyTimeRange?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 执行人 */
    executor?:string,
    /** 频次 */
    frequency?:number,
    /** 主键 */
    id?:string,
    /** 节假日是否继续生成任务 */
    ifGenerateTask?:string,
    /** 是否指定日期 */
    ifSpecifyDate?:string,
    /** 巡检类型 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划周期类型 */
    planCycleType?:string,
    /** 模板名称 */
    planName?:string,
    /** 模板编号 */
    planNumber?:string,
    /** 计划状态 */
    planStuas?:string,
    /** 计划日期结束时间 */
    plannedDateEnd?:string,
    /** 计划日期范围 */
    plannedDateRange?:string,
    /** 计划日期开始时间 */
    plannedDateStart?:string,
    /** 项目类别 */
    projectCategory?:string,
    /** 所属区域 */
    region?:string,
    /** 发布计划类型;暂存、已发布 */
    releaseType?:string,
    /** 备注 */
    remark?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核时间 */
    reviewTime?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 模板id */
    templateId?:string,
    /** 模板类型 */
    templateType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPatrolPlanTemplate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划模板-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanInspectionPatrolPlanTemplate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡更计划-模板list
 */
static templateList(params: {
              
    /** type */
    type:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPatrolPlanTemplate>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/InspectionPatrolPlanTemplate/templateList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'type':params['type']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 巡检巡更计划任务清单Service {
    
/**
 * 巡检巡更计划任务清单-添加
 */
static add(params: {
              
    /** exPlanInspectionPatrolPlanTaskDetail */
    exPlanInspectionPatrolPlanTaskDetail:ExPlanInspectionPatrolPlanTaskDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTaskDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更计划任务清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更计划任务清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更计划任务清单-编辑
 */
static edit(params: {
              
    /** exPlanInspectionPatrolPlanTaskDetail */
    exPlanInspectionPatrolPlanTaskDetail:ExPlanInspectionPatrolPlanTaskDetail,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTaskDetail']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询巡检巡更计划任务清单列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型id */
    equipmentTypeId?:string,
    /** 事件名称 */
    eventName?:string,
    /** 填写值 */
    fillInValues?:string,
    /** 主键 */
    id?:string,
    /** 点检内容 */
    inspectionContent?:string,
    /** 点检标准 */
    inspectionStandards?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 巡更计划id */
    patrolPlanId?:string,
    /** 周期标签(年、月、日可多选) */
    periodLabel?:string,
    /** 巡检计划id */
    planId?:string,
    /** 计划类型 */
    playType?:string,
    /** 记录方式 */
    recordingMethod?:string,
    /** 备注 */
    remark?:string,
    /** 点检库id */
    standardId?:string,
    /** 上限/异常值 */
    standardValueOffline?:string,
    /** 下限/正常值 */
    standardValueOnline?:string,
    /** 是否可用 */
    status?:string,
    /** 任务id */
    taskId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPatrolPlanTaskDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更计划任务清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanInspectionPatrolPlanTaskDetail>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTaskDetail/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划巡检巡更计划项目模板清单Service {
    
/**
 * 计划巡检巡更计划项目模板清单-添加
 */
static add(params: {
              
    /** exPlanInspectionPatrolPlanTemplateDetails */
    exPlanInspectionPatrolPlanTemplateDetails:ExPlanInspectionPatrolPlanTemplateDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplateDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划项目模板清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划项目模板清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划项目模板清单-编辑
 */
static edit(params: {
              
    /** exPlanInspectionPatrolPlanTemplateDetails */
    exPlanInspectionPatrolPlanTemplateDetails:ExPlanInspectionPatrolPlanTemplateDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exPlanInspectionPatrolPlanTemplateDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划巡检巡更计划项目模板清单列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型id */
    equipmentTypeId?:string,
    /** 事件名称 */
    eventName?:string,
    /** 主键 */
    id?:string,
    /** 点检内容 */
    inspectionContent?:string,
    /** 点检标准 */
    inspectionStandards?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 巡更计划id */
    patrolPlanId?:string,
    /** 周期标签(年、月、日可多选) */
    periodLabel?:string,
    /** 巡检计划id */
    planId?:string,
    /** 计划类型 */
    playType?:string,
    /** 记录方式 */
    recordingMethod?:string,
    /** 备注 */
    remark?:string,
    /** 点检库id */
    standardId?:string,
    /** 上限/异常值 */
    standardValueOffline?:string,
    /** 下限/正常值 */
    standardValueOnline?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPatrolPlanTemplateDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划项目模板清单list
 */
static listByType(params: {
              
    /** templateDetails */
    templateDetails:ExPlanInspectionPatrolPlanTemplateDetails[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExPlanInspectionPlanDetailsVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/listByType'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['templateDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划巡检巡更计划项目模板清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExPlanInspectionPatrolPlanTemplateDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/PatrolPlanTemplateDetails/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警Service {
    
/**
 * 告警-添加
 */
static add(params: {
              
    /** alarm */
    alarm:ExhAlarm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['alarm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-随机生成数据
 */
static random(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/add/random'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-根据规格分类随机生成数据
 */
static random1(params: {
              
    /** category */
    category:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/add/random/{category}'
    url = url.replace('{category}',params['category']+'')

    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-批量添加
 */
static addBatch(params: {
              
    /** exhAlarms */
    exhAlarms:ExhAlarm[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarms']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-清除随机生成数据缓存
 */
static random2(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/delete/cache/random'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-派单
 */
static dispatch(params: {
              
    /** alarm */
    alarm:ExhAlarm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['alarm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-批量派单
 */
static dispatchBatch(params: {
              
    /** alarms */
    alarms:ExhAlarm[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatchBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['alarms']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-编辑
 */
static edit(params: {
              
    /** exhAlarm */
    exhAlarm:ExhAlarm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-批量编辑
 */
static editBatch(params: {
              
    /** alarms */
    alarms:ExhAlarm[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['alarms']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警列表
 */
static list(params: {
              
    /** (电箱)告警展位号 */
    alarmBoothCode?:string,
    /** 电箱告警实例级别 */
    alarmBoxLevel?:number,
    /** 告警规格标识符 */
    alarmDefCode?:string,
    /** 创建人 */
    alarmDefCreateBy?:string,
    /** 创建时间 */
    alarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    alarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    alarmDefDefCategoryCode?:string,
    /** 创建人 */
    alarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    alarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    alarmDefDefCategoryId?:string,
    /** 是否可用 */
    alarmDefDefCategoryStatus?:string,
    /** 更新人 */
    alarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    alarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    alarmDefDefCategoryVersion?:number,
    /** 权重 */
    alarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    alarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    alarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmDefDelFlag?:number,
    /** 告警规格ID */
    alarmDefId?:string,
    /** 是否可用 */
    alarmDefStatus?:string,
    /** 更新人 */
    alarmDefUpdateBy?:string,
    /** 更新时间 */
    alarmDefUpdateTime?:string,
    /** 乐观锁 */
    alarmDefVersion?:number,
    /** 权重 */
    alarmDefWeight?:number,
    /** 告警规格分类标识符 */
    alarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    alarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    alarmDefCategoryName?:string,
    /** 告警规格标识符 */
    alarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    alarmDefId?:string,
    /** 告警规格名称 */
    alarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    alarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    alarmLocationActionType?:string,
    /** 高度 */
    alarmLocationAltitude?:string,
    /** 空间实例编码 */
    alarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmLocationDelFlag?:number,
    /** 空间描述 */
    alarmLocationDescription?:string,
    /** 空间详细地址 */
    alarmLocationDetailAddress?:string,
    /** 数据批次号 */
    alarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    alarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    alarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    alarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    alarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    alarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    alarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    alarmLocationDwSourceTable?:string,
    /** 停车场id */
    alarmLocationExtId?:string,
    /** 空间id */
    alarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    alarmLocationInsertTime?:string,
    /** 纬度 */
    alarmLocationLatitude?:string,
    /** 层级code) */
    alarmLocationLevelCode?:string,
    /** 层级描述 */
    alarmLocationLevelDescription?:string,
    /** 层级名称 */
    alarmLocationLevelName?:string,
    /** 层级级别 */
    alarmLocationLevelOrder?:string,
    /** 经度 */
    alarmLocationLongitude?:string,
    /** 上级空间编码 */
    alarmLocationParentSpaceCode?:string,
    /** 路径 */
    alarmLocationPath?:string,
    /** 空间实例名称 */
    alarmLocationSpaceName?:string,
    /** 状态 */
    alarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    alarmLocationUpdateTime?:string,
    /** 乐观锁 */
    alarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    alarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    alarmLocationId?:string,
    /** 告警实例空间路径 */
    alarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    alarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    alarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    alarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    alarmStatus?:string,
    /** 组件 */
    alarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    alarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    alarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    alarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    alarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    alarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    alarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    alarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    alarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    alarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    alarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    alarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    alarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    alarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    alarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    alarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    alarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    alarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    alarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    alarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    alarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    alarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    alarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    alarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    alarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    alarmTaskApprovalStatus?:string,
    /** 归档id */
    alarmTaskArchiveId?:string,
    /** 归档时间 */
    alarmTaskArchiveTime?:string,
    /** 归档人 */
    alarmTaskArchivedBy?:string,
    /** 所属分类Id */
    alarmTaskCategoryId?:string,
    /** 创建人 */
    alarmTaskCreateBy?:string,
    /** 创建时间 */
    alarmTaskCreateTime?:string,
    /** 当前状态 */
    alarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    alarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    alarmTaskCurrteParentId?:string,
    /** 数据json */
    alarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskDelFlag?:number,
    /** 派单人部门id */
    alarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    alarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    alarmTaskDispatchTime?:string,
    /** 派单人id */
    alarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    alarmTaskDispatchUserName?:string,
    /** 所属公司 */
    alarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    alarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    alarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    alarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    alarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    alarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    alarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    alarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    alarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    alarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    alarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    alarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    alarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    alarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    alarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    alarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    alarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    alarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    alarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    alarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    alarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    alarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    alarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    alarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    alarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    alarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    alarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    alarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    alarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    alarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    alarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    alarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    alarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    alarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    alarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    alarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    alarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    alarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    alarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    alarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    alarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    alarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    alarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    alarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    alarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    alarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    alarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    alarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    alarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    alarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    alarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    alarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    alarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    alarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    alarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    alarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    alarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    alarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    alarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    alarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    alarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    alarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    alarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    alarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    alarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    alarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    alarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    alarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    alarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    alarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    alarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    alarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    alarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    alarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    alarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    alarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    alarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    alarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    alarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    alarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    alarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    alarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    alarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    alarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    alarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    alarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    alarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    alarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    alarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    alarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    alarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    alarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    alarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    alarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    alarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    alarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    alarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    alarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    alarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    alarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    alarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    alarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    alarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    alarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    alarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    alarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    alarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    alarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    alarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    alarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    alarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    alarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    alarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    alarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    alarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    alarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    alarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    alarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    alarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    alarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    alarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    alarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    alarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    alarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    alarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    alarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    alarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    alarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    alarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    alarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    alarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    alarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    alarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    alarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    alarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    alarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    alarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    alarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    alarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    alarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    alarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    alarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    alarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    alarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    alarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    alarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    alarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    alarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    alarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    alarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    alarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    alarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    alarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    alarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    alarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    alarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    alarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    alarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    alarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    alarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    alarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    alarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    alarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    alarmTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    alarmTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    alarmTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    alarmTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    alarmTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    alarmTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    alarmTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    alarmTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    alarmTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    alarmTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    alarmTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    alarmTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    alarmTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    alarmTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    alarmTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    alarmTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    alarmTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    alarmTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    alarmTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    alarmTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    alarmTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    alarmTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    alarmTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    alarmTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    alarmTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    alarmTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    alarmTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    alarmTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    alarmTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    alarmTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    alarmTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    alarmTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    alarmTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    alarmTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    alarmTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    alarmTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    alarmTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    alarmTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    alarmTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    alarmTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    alarmTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    alarmTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    alarmTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    alarmTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    alarmTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    alarmTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    alarmTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    alarmTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    alarmTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    alarmTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    alarmTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    alarmTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    alarmTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    alarmTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    alarmTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    alarmTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    alarmTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    alarmTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    alarmTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    alarmTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    alarmTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    alarmTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    alarmTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    alarmTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    alarmTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    alarmTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    alarmTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    alarmTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    alarmTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    alarmTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    alarmTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    alarmTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    alarmTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    alarmTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    alarmTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    alarmTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    alarmTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    alarmTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    alarmTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    alarmTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    alarmTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    alarmTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    alarmTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    alarmTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    alarmTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    alarmTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    alarmTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    alarmTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    alarmTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    alarmTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    alarmTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    alarmTaskExhAlarmStatus?:string,
    /** 流转数据json */
    alarmTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    alarmTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    alarmTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    alarmTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    alarmTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskExhAlarmVersion?:number,
    /** 权重 */
    alarmTaskExhAlarmWeight?:number,
    /** 工作组id */
    alarmTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    alarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    alarmTaskFlowTypeVo?:string,
    /** 表单id */
    alarmTaskFormId?:string,
    /** 表单json */
    alarmTaskFormJson?:string,
    /** 表单名称Vo */
    alarmTaskFromNameVo?:string,
    /** 主键 */
    alarmTaskId?:string,
    /** 是否为流程审批任务 */
    alarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    alarmTaskIfService?:number,
    /** 操作说明 */
    alarmTaskOperatingInstructions?:string,
    /** 父id */
    alarmTaskParentId?:string,
    /** 计划执行时间范围 */
    alarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    alarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    alarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    alarmTaskProcessId?:string,
    /** 接单人部门id */
    alarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    alarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    alarmTaskReceiveTime?:string,
    /** 接单人id */
    alarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    alarmTaskReceiveUserName?:string,
    /** 备注 */
    alarmTaskRemark?:string,
    /** 所属分类 */
    alarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    alarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    alarmTaskStatus?:string,
    /** 任务处理完成时间 */
    alarmTaskTaskEndTime?:string,
    /** 任务名称 */
    alarmTaskTaskName?:string,
    /** 任务源id */
    alarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    alarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    alarmTaskTaskType?:string,
    /** 更新人 */
    alarmTaskUpdateBy?:string,
    /** 更新时间 */
    alarmTaskUpdateTime?:string,
    /** 乐观锁 */
    alarmTaskVersion?:number,
    /** 权重 */
    alarmTaskWeight?:number,
    /** 工作内容 */
    alarmTaskWorkDetail?:string,
    /** 工作事项 */
    alarmTaskWorkItem?:string,
    /** 工作事项id */
    alarmTaskWorkItemId?:string,
    /** 工单号 */
    alarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    alarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    alarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    alarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    channelIdAlarm?:string,
    /** 告警关闭原因 */
    closeReason?:string,
    /** 告警实例的关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建数据json */
    createDateJson?:string,
    /** 创建表单id */
    createFormId?:string,
    /** 创建表单json */
    createFormJson?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 部门负责人 */
    department?:string,
    /** 部门负责人id */
    departmentHeadId?:string,
    /** 告警实例的描述文本 */
    description?:string,
    /** 设备告警任务类型 */
    deviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    deviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    deviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    deviceName?:string,
    /** 告警误报原因 */
    distortReason?:string,
    /** 事件告警任务类型 */
    eventAlarmTaskType?:string,
    /** 告警实例ID */
    id?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    lastUpdateTime?:string,
    /** 是否为人工告警 */
    manualFlag?:number,
    /** 告警实例的发生时间 */
    occurringTime?:string,
    /** 一键发起需求id */
    oneClickId?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    relatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    reportTimes?:number,
    /** 告警上报人的身份id */
    reporterId?:string,
    /** 安防告警任务类型 */
    securityAlarmTaskType?:string,
    /** 是否可用 */
    status?:string,
    /** 流转数据json */
    taskDateJson?:string,
    /** 流转表单id */
    taskFormId?:string,
    /** 流转表单json */
    taskFormJson?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarm>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-归档
 */
static archive(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/operation/archive'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarm>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_附件Service {
    
/**
 * 告警附件-添加
 */
static add(params: {
              
    /** exhAlarmAttachment */
    exhAlarmAttachment:ExhAlarmAttachment,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmAttachment']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警附件-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警附件-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警附件-编辑
 */
static edit(params: {
              
    /** exhAlarmAttachment */
    exhAlarmAttachment:ExhAlarmAttachment,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmAttachment']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警附件列表
 */
static list(params: {
              
    /** 告警实例的ID */
    alarmIdAttach?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 附件的描述 */
    description?:string,
    /** 该字段为设备实例ID，表示该附件是由哪个设备捕捉生成的 */
    deviceIdAttach?:string,
    /** 告警实例的附件ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 附件的URL路径 */
    path?:string,
    /** 告警消息中位置信息，以逗号隔开，顺序为左，上，右，下 */
    position?:string,
    /** 是否可用 */
    status?:string,
    /** 告警实例的附件类型 */
    type?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmAttachment>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警附件-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmAttachment>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attachment/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_实例属性Service {
    
/**
 * 告警实例属性-添加
 */
static add(params: {
              
    /** exhAlarmAttribute */
    exhAlarmAttribute:ExhAlarmAttribute,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmAttribute']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性-编辑
 */
static edit(params: {
              
    /** exhAlarmAttribute */
    exhAlarmAttribute:ExhAlarmAttribute,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmAttribute']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警实例属性列表
 */
static list(params: {
              
    /** 告警属性单位 */
    alarmAttributeUnit?:string,
    /** 告警ID */
    alarmIdAttr?:string,
    /** 告警规格属性的标识符 */
    attrDefCode?:string,
    /** 创建人 */
    attrDefCreateBy?:string,
    /** 创建时间 */
    attrDefCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    attrDefDelFlag?:number,
    /** 告警规格属性定义的ID */
    attrDefId?:string,
    /** 告警规格属性的名称 */
    attrDefLabel?:string,
    /** 告警规格属性是否强制的 */
    attrDefMandatoryFlag?:number,
    /** 当原始类型为枚举类型时，可选项所来自的Picklist的名称 */
    attrDefPicklistName?:string,
    /** 告警规格属性的原始类型 */
    attrDefPrimaryType?:string,
    /** 是否可用 */
    attrDefStatus?:string,
    /** 单位定义的标识符 */
    attrDefUnitCode?:string,
    /** 创建人 */
    attrDefUnitCreateBy?:string,
    /** 创建时间 */
    attrDefUnitCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    attrDefUnitDelFlag?:number,
    /** 单位定义的ID */
    attrDefUnitId?:string,
    /** 是否可用 */
    attrDefUnitStatus?:string,
    /** 单位定义的名称 */
    attrDefUnitUnitLabel?:string,
    /** 更新人 */
    attrDefUnitUpdateBy?:string,
    /** 更新时间 */
    attrDefUnitUpdateTime?:string,
    /** 乐观锁 */
    attrDefUnitVersion?:number,
    /** 权重 */
    attrDefUnitWeight?:number,
    /** 告警规格属性的单位ID */
    attrDefUnitId?:string,
    /** 更新人 */
    attrDefUpdateBy?:string,
    /** 更新时间 */
    attrDefUpdateTime?:string,
    /** 乐观锁 */
    attrDefVersion?:number,
    /** 权重 */
    attrDefWeight?:number,
    /** 告警实例属性的属性定义ID */
    attrDefId?:string,
    /** 告警实例属性的属性值 */
    attrValue?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警属性id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmAttribute>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmAttribute>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 告警实例属性定义Service {
    
/**
 * 告警实例属性定义-添加
 */
static add(params: {
              
    /** exhAlarmAttributeDef */
    exhAlarmAttributeDef:ExhAlarmAttributeDef,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmAttributeDef']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性定义-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性定义-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性定义-编辑
 */
static edit(params: {
              
    /** exhAlarmAttributeDef */
    exhAlarmAttributeDef:ExhAlarmAttributeDef,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmAttributeDef']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警实例属性定义列表
 */
static list(params: {
              
    /** 告警规格属性的标识符 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警规格属性定义的ID */
    id?:string,
    /** 告警规格属性的名称 */
    label?:string,
    /** 告警规格属性是否强制的 */
    mandatoryFlag?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 当原始类型为枚举类型时，可选项所来自的Picklist的名称 */
    picklistName?:string,
    /** 告警规格属性的原始类型 */
    primaryType?:string,
    /** 是否可用 */
    status?:string,
    /** 单位定义的标识符 */
    unitCode?:string,
    /** 创建人 */
    unitCreateBy?:string,
    /** 创建时间 */
    unitCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    unitDelFlag?:number,
    /** 单位定义的ID */
    unitId?:string,
    /** 是否可用 */
    unitStatus?:string,
    /** 单位定义的名称 */
    unitUnitLabel?:string,
    /** 更新人 */
    unitUpdateBy?:string,
    /** 更新时间 */
    unitUpdateTime?:string,
    /** 乐观锁 */
    unitVersion?:number,
    /** 权重 */
    unitWeight?:number,
    /** 告警规格属性的单位ID */
    unitId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmAttributeDef>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实例属性定义-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmAttributeDef>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/attribute/def/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_规格Service {
    
/**
 * 告警规格-添加
 */
static add(params: {
              
    /** exhAlarmDef */
    exhAlarmDef:ExhAlarmDef,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmDef']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格-编辑
 */
static edit(params: {
              
    /** exhAlarmDef */
    exhAlarmDef:ExhAlarmDef,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmDef']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警规格列表
 */
static list(params: {
              
    /** 告警规格标识符 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 告警规格分类名称 */
    defCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    defCategoryCode?:string,
    /** 创建人 */
    defCategoryCreateBy?:string,
    /** 创建时间 */
    defCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    defCategoryDelFlag?:number,
    /** 告警规格分类ID */
    defCategoryId?:string,
    /** 是否可用 */
    defCategoryStatus?:string,
    /** 更新人 */
    defCategoryUpdateBy?:string,
    /** 更新时间 */
    defCategoryUpdateTime?:string,
    /** 乐观锁 */
    defCategoryVersion?:number,
    /** 权重 */
    defCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    defCategoryId?:string,
    /** 告警规格名称 */
    defName?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警规格ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDef>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmDef>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_规格分类Service {
    
/**
 * 告警规格分类-添加
 */
static add(params: {
              
    /** exhAlarmDefCategory */
    exhAlarmDefCategory:ExhAlarmDefCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmDefCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格分类-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格分类-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格分类-编辑
 */
static edit(params: {
              
    /** exhAlarmDefCategory */
    exhAlarmDefCategory:ExhAlarmDefCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmDefCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警规格分类列表
 */
static list(params: {
              
    /** 告警规格分类名称 */
    categoryName?:string,
    /** 告警规格分类标识符 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警规格分类ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDefCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警规格分类-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmDefCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/def/category/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_设备Service {
    
/**
 * 设备告警-添加
 */
static add(params: {
              
    /** exhAlarmDevice */
    exhAlarmDevice:ExhAlarmDevice,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmDevice']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-批量添加
 */
static addBatch(params: {
              
    /** exhAlarmDeviceList */
    exhAlarmDeviceList:ExhAlarmDevice[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmDeviceList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-编辑
 */
static edit(params: {
              
    /** exhAlarmDevice */
    exhAlarmDevice:ExhAlarmDevice,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmDevice']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-批量编辑
 */
static editBatch(params: {
              
    /** exhAlarmDeviceList */
    exhAlarmDeviceList:ExhAlarmDevice[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmDeviceList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备告警列表
 */
static list(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 设备关闭时间 */
    deviceCloseTime?:string,
    /** 设备id */
    deviceIdAlarm?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片链接 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频链接 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDevice>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmDevice>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-更新告警等级
 */
static updateAlarmLevel(params: {
              
    /** alarmLevel */
    alarmLevel:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/updateAlarmLevel'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'alarmLevel':params['alarmLevel'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-误报提交
 */
static updateDistort(params: {
              
    /** distortReason */
    distortReason:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/updateDistort'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-批量误报
 */
static updateDistortBatch(params: {
              
    /** distortReason */
    distortReason:string,
    /** ids */
    ids:string[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/updateDistortBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason'],'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-关闭告警
 */
static updateStop(params: {
              
    /** id */
    id:string,
    /** stopReason */
    stopReason:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/updateStop'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id'],'stopReason':params['stopReason']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-批量关闭告警
 */
static updateStopBatch(params: {
              
    /** ids */
    ids:string[],
    /** stopReason */
    stopReason:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/device/updateStopBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids'],'stopReason':params['stopReason']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_自动派单规则Service {
    
/**
 * 告警自动派单规则-添加
 */
static add(params: {
              
    /** rule */
    rule:ExhAlarmDispatchRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['rule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警自动派单规则-规则应用
 */
static applyRule(params: {
              
    /** rule */
    rule:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/applyRule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'rule':params['rule']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据告警匹配派单规则
 */
static check(params: {
              
    /** alarm */
    alarm:ExhAlarm,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/check'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['alarm']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警自动派单规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警自动派单规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警自动派单规则-编辑
 */
static edit(params: {
              
    /** rule */
    rule:ExhAlarmDispatchRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['rule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警自动派单规则列表
 */
static list(params: {
              
    /** 是否启用 */
    activatedFlag?:number,
    /** 告警规格分类ID */
    alarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    alarmDefCategoryName?:string,
    /** 告警规格ID */
    alarmDefId?:string,
    /** 告警规格名称 */
    alarmDefName?:string,
    /** 告警位置ID */
    alarmLocationId?:string,
    /** 告警位置名称 */
    alarmLocationName?:string,
    /** 告警派单规则的标识符 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 部门负责人ID */
    departmentHeadId?:string,
    /** 告警派单规则ID */
    id?:string,
    /** 告警派单规则的名称 */
    label?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDispatchRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警自动派单规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmDispatchRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/dispatch/rule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_显示资源Service {
    
/**
 * 告警显示资源-添加
 */
static add(params: {
              
    /** exhAlarmDefDisplay */
    exhAlarmDefDisplay:ExhAlarmDefDisplay,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmDefDisplay']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警显示资源-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警显示资源-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警显示资源-编辑
 */
static edit(params: {
              
    /** exhAlarmDefDisplay */
    exhAlarmDefDisplay:ExhAlarmDefDisplay,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmDefDisplay']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警显示资源列表
 */
static list(params: {
              
    /** 告警到达时提示音频ID */
    audioId?:string,
    /** 告警到达时提示音频URL */
    audioUrl?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警的显示图标ID */
    iconId?:string,
    /** 告警的显示图标URL */
    iconUrl?:string,
    /** 显示信息id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDefDisplay>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警显示资源-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmDefDisplay>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/display/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_档案Service {
    
/**
 * 查询设备告警档案
 */
static device(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 设备关闭时间 */
    deviceCloseTime?:string,
    /** 设备id */
    deviceIdAlarm?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片链接 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频链接 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmDevice>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/document/list/device'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询事件告警档案
 */
static event(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmEvent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/document/list/event'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询事件告警档案
 */
static security(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmSecurity>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/document/list/security'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_事件Service {
    
/**
 * 事件告警-添加
 */
static add(params: {
              
    /** exhAlarmEvent */
    exhAlarmEvent:ExhAlarmEvent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmEvent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-批量添加
 */
static addBatch(params: {
              
    /** exhAlarmEvents */
    exhAlarmEvents:ExhAlarmEvent[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmEvents']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-编辑
 */
static edit(params: {
              
    /** exhAlarmEvent */
    exhAlarmEvent:ExhAlarmEvent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmEvent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-批量编辑
 */
static editBatch(params: {
              
    /** exhAlarmEvents */
    exhAlarmEvents:ExhAlarmEvent[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmEvents']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询事件告警列表
 */
static list(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmEvent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmEvent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-误报提交
 */
static updateDistort(params: {
              
    /** distortReason */
    distortReason:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/updateDistort'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-批量误报
 */
static updateDistortBatch(params: {
              
    /** distortReason */
    distortReason:string,
    /** ids */
    ids:string[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/updateDistortBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason'],'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-关闭告警
 */
static updateStop(params: {
              
    /** id */
    id:string,
    /** stopReason */
    stopReason:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/updateStop'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id'],'stopReason':params['stopReason']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 事件告警-批量关闭告警
 */
static updateStopBatch(params: {
              
    /** ids */
    ids:string[],
    /** stopReason */
    stopReason:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/event/updateStopBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids'],'stopReason':params['stopReason']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_超时规则Service {
    
/**
 * 告警超时规则-添加
 */
static add(params: {
              
    /** exhAlarmExpireRule */
    exhAlarmExpireRule:ExhAlarmExpireRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmExpireRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警超时规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警超时规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警超时规则-编辑
 */
static edit(params: {
              
    /** exhAlarmExpireRule */
    exhAlarmExpireRule:ExhAlarmExpireRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmExpireRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警超时规则列表
 */
static list(params: {
              
    /** 告警类型 */
    alarmType?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 过期时长 */
    expireTime?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否启用 */
    startStatus?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmExpireRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警超时规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmExpireRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警超时规则-启用规则
 */
static startById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmExpireRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/expire/startById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_位置Service {
    
/**
 * 告警位置-添加
 */
static add(params: {
              
    /** exhAlarmLocation */
    exhAlarmLocation:ExhAlarmLocation,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmLocation']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置-编辑
 */
static edit(params: {
              
    /** exhAlarmLocation */
    exhAlarmLocation:ExhAlarmLocation,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmLocation']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警位置列表
 */
static list(params: {
              
    /** 告警实例所在的地理坐标 */
    coordinate?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 告警位置id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 告警实例所在的最小空间实例的ID */
    spaceId?:string,
    /** 告警实例所在的最小空间实例的名称 */
    spaceName?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmLocation>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmLocation>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/location/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_归档规则Service {
    
/**
 * 告警归档规则-添加
 */
static add(params: {
              
    /** exhAlarmArchivedRule */
    exhAlarmArchivedRule:ExhAlarmArchivedRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmArchivedRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警归档规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警归档规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警归档规则-编辑
 */
static edit(params: {
              
    /** exhAlarmArchivedRule */
    exhAlarmArchivedRule:ExhAlarmArchivedRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmArchivedRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警归档规则列表
 */
static list(params: {
              
    /** 是否启用 */
    activeFlag?:number,
    /** 告警设备类型(设备告警 | 安防告警 专用) */
    alarmDeviceCategory?:string,
    /** 告警类型(设备告警 | 安防告警 | 事件告警) */
    alarmType?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 需求服务项(会展商业需求 专用) */
    demandServiceItem?:string,
    /** 需求任务类型(内部需求 | 外部需求 专用) */
    demandTaskType?:string,
    /** 需求类型(会展商业需求 | 内部需求 | 外部需求) */
    demandType?:string,
    /** 过期时长 */
    expireTime?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划类型(巡检计划 | 巡更计划) */
    planType?:string,
    /** 规则类型(告警|需求|计划) */
    ruleType?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmArchivedRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警归档规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmArchivedRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/rule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_安防Service {
    
/**
 * 安防告警-添加
 */
static add(params: {
              
    /** exhAlarmSecurity */
    exhAlarmSecurity:ExhAlarmSecurity,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmSecurity']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-批量添加
 */
static addBatch(params: {
              
    /** exhAlarmSecurities */
    exhAlarmSecurities:ExhAlarmSecurity[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmSecurities']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-编辑
 */
static edit(params: {
              
    /** exhAlarmSecurity */
    exhAlarmSecurity:ExhAlarmSecurity,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmSecurity']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-批量编辑
 */
static editBatch(params: {
              
    /** exhAlarmSecurities */
    exhAlarmSecurities:ExhAlarmSecurity[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmSecurities']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询安防告警列表
 */
static list(params: {
              
    /** 告警编号 */
    alarmCode?:string,
    /** 告警描述 */
    alarmDescription?:string,
    /** 告警等级 */
    alarmLevel?:string,
    /** 告警进度 */
    alarmProcess?:string,
    /** 告警状态 */
    alarmStatus?:string,
    /** 告警类型 */
    alarmType?:string,
    /** 关闭原因 */
    closeReason?:string,
    /** 关闭时间 */
    closingTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 误报原因 */
    distortReason?:string,
    /** 超时时间 */
    expireTime?:string,
    /** 主键 */
    id?:string,
    /** 图片 */
    image?:string,
    /** 发生位置 */
    location?:string,
    /** 发生时间 */
    occurTime?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 责任人id */
    responsibleId?:string,
    /** 责任人名称 */
    responsibleName?:string,
    /** 是否可用 */
    status?:string,
    /** 标题 */
    title?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 视频 */
    video?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmSecurity>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmSecurity>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备告警-更新告警等级
 */
static updateAlarmLevel(params: {
              
    /** alarmLevel */
    alarmLevel:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/updateAlarmLevel'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'alarmLevel':params['alarmLevel'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-误报提交
 */
static updateDistort(params: {
              
    /** distortReason */
    distortReason:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/updateDistort'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-批量误报提交
 */
static updateDistortBatch(params: {
              
    /** distortReason */
    distortReason:string,
    /** ids */
    ids:any | null[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/updateDistortBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'distortReason':params['distortReason']}
    let data = params['ids']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-关闭告警
 */
static updateStop(params: {
              
    /** closeReason */
    closeReason:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/updateStop'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'closeReason':params['closeReason'],'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 安防告警-批量关闭告警
 */
static updateStopBatch(params: {
              
    /** closeReason */
    closeReason:string,
    /** ids */
    ids:any | null[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/security/updateStopBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'closeReason':params['closeReason']}
    let data = params['ids']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_位置空间Service {
    
/**
 * 告警位置空间-添加
 */
static add(params: {
              
    /** exhAlarmSpace */
    exhAlarmSpace:ExhAlarmSpace,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmSpace']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置空间-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置空间-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置空间-编辑
 */
static edit(params: {
              
    /** exhAlarmSpace */
    exhAlarmSpace:ExhAlarmSpace,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmSpace']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警位置空间列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 空间节点实例的ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 空间节点实例的父亲节点ID */
    parentId?:string,
    /** 空间节点实例所属的空间层级ID */
    spaceLevel?:string,
    /** 空间节点实例的名称 */
    spaceName?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmSpace>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警位置空间-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmSpace>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/space/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_告警_实体单位Service {
    
/**
 * 告警实体单位-添加
 */
static add(params: {
              
    /** exhAlarmUnit */
    exhAlarmUnit:ExhAlarmUnit,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhAlarmUnit']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实体单位-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实体单位-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实体单位-编辑
 */
static edit(params: {
              
    /** exhAlarmUnit */
    exhAlarmUnit:ExhAlarmUnit,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhAlarmUnit']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询告警实体单位列表
 */
static list(params: {
              
    /** 单位定义的标识符 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 单位定义的ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 单位定义的名称 */
    unitLabel?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhAlarmUnit>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 告警实体单位-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhAlarmUnit>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/alarm/unit/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_需求_档案Service {
    
/**
 * 查询会展商业档案
 */
static exhibition(params: {
              
    /** 所属公司 */
    affiliatedCompany?:string,
    /** 审核通过时间 */
    approvalTime?:string,
    /** 附件 */
    attachment?:string,
    /** 批次id */
    batchId?:string,
    /** 展位号 */
    boothNumber?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 数据json */
    dateJson?:string,
    /** 拆除完成数量vo */
    dismantleCompCount?:number,
    /** 派单部门 */
    dispatchDepartment?:string,
    /** 派单部门id */
    dispatchDepartmentId?:string,
    /** 派单人 */
    dispatchUser?:string,
    /** 是否启用 */
    exhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhibitionArea?:string,
    /** 展会名称 */
    exhibitionName?:string,
    /** 文件 */
    file?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 主键 */
    id?:string,
    /** 安装完成数量Vo */
    installCompCount?:number,
    /** 详细位置 */
    location?:string,
    /** 材料 */
    material?:string,
    /** 新表单json */
    newFormJson?:string,
    /** 报馆时间 */
    newspaperTime?:string,
    /** 订单id */
    orderId?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单备注 */
    orderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    orderType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 展馆号 */
    pavilion?:string,
    /** 订单状态 */
    projectStatus?:string,
    /** 数量 */
    quantity?:number,
    /** 重组订单id */
    reOrderId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 接驳送电完成数量vo */
    sendCCompCount?:number,
    /** 服务分类 */
    serviceCategory?:string,
    /** 服务项 */
    serviceItems?:string,
    /** 服务名称 */
    serviceName?:string,
    /** 服务规格 */
    serviceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    sourceOfDemand?:string,
    /** 是否可用 */
    status?:string,
    /** 主体类型 */
    subjectType?:string,
    /** 同步时间 */
    synchronizationTime?:string,
    /** 任务id */
    taskId?:string,
    /** 单位 */
    unit?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterExtensionProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/demand/document/list/exhibition'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询内外部需求档案
 */
static inside(params: {
              
    /** 附件 */
    attachment?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建数据json */
    createDateJson?:string,
    /** 创建表单id */
    createFormId?:string,
    /** 创建表单json */
    createFormJson?:string,
    /** 创建时间 */
    createTime?:string,
    /** 决策需求任务类型 */
    decisionTaskType?:string,
    /** 派单部门 */
    dispatchDepartment?:string,
    /** 派单部门id */
    dispatchDepartmentId?:string,
    /** 派单人 */
    dispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exTaskType?:string,
    /** 文件 */
    file?:string,
    /** 主键 */
    id?:string,
    /** 内部需求任务类型 */
    insideTaskType?:string,
    /** 一键发起需求id */
    oneClickId?:string,
    /** 订单id */
    orderId?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 外部需求任务类型 */
    outsideTaskType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 项目状态 */
    projectStatus?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    requirementType?:string,
    /** 需求来源 */
    sourceOfDemand?:string,
    /** 是否可用 */
    status?:string,
    /** 流转数据json */
    taskDateJson?:string,
    /** 流转表单id */
    taskFormId?:string,
    /** 流转表单json */
    taskFormJson?:string,
    /** 任务类型id */
    taskTypeId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExDemandCenterInsideProject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/demand/document/list/inside'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备_参数Service {
    
/**
 * 设备参数-添加
 */
static add(params: {
              
    /** exhDeviceParam */
    exhDeviceParam:ExhDeviceParam,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceParam']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数-编辑
 */
static edit(params: {
              
    /** exhDeviceParam */
    exhDeviceParam:ExhDeviceParam,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhDeviceParam']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备参数列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 设备id */
    deviceIdParam?:string,
    /** 参数字典id */
    dictIdParam?:string,
    /** 主键 */
    id?:string,
    /** 参数名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 参数值 */
    value?:string,
    /** 值类型 */
    valueType?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhDeviceParam>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhDeviceParam>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备_参数字典Service {
    
/**
 * 设备参数字典-添加
 */
static add(params: {
              
    /** exhDeviceParamDict */
    exhDeviceParamDict:ExhDeviceParamDict,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceParamDict']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数字典-批量添加
 */
static addBatch(params: {
              
    /** exhDeviceParamDictList */
    exhDeviceParamDictList:ExhDeviceParamDict[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceParamDictList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数字典-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数字典-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数字典-编辑
 */
static edit(params: {
              
    /** exhDeviceParamDict */
    exhDeviceParamDict:ExhDeviceParamDict,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhDeviceParamDict']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备参数字典列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 默认值 */
    defaultValue?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** 设备型号 */
    model?:string,
    /** 参数名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhDeviceParamDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备参数字典-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhDeviceParamDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 返回字典中所有设备类型
 */
static types(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/param/dict/types'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备_点检维修记录Service {
    
/**
 * 设备点检维修记录-添加
 */
static add(params: {
              
    /** exhDeviceRecord */
    exhDeviceRecord:ExhDeviceRecord,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceRecord']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-批量添加
 */
static addBatch(params: {
              
    /** exhDeviceRecords */
    exhDeviceRecords:ExhDeviceRecord[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/addBatch'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceRecords']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-编辑
 */
static edit(params: {
              
    /** exhDeviceRecord */
    exhDeviceRecord:ExhDeviceRecord,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhDeviceRecord']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-批量编辑
 */
static editBatch(params: {
              
    /** exhDeviceRecords */
    exhDeviceRecords:ExhDeviceRecord[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhDeviceRecords']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备点检维修记录列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 设备id */
    deviceIdRecord?:string,
    /** 设备状态 */
    deviceStatus?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 创建人 */
    planDetailsCreateBy?:string,
    /** 创建时间 */
    planDetailsCreateTime?:string,
    /** 设备类型 */
    planDetailsEquipmentType?:string,
    /** 设备类型id */
    planDetailsEquipmentTypeId?:string,
    /** 事件名称 */
    planDetailsEventName?:string,
    /** 填写值 */
    planDetailsFillInValues?:string,
    /** 主键 */
    planDetailsId?:string,
    /** 点检内容 */
    planDetailsInspectionContent?:string,
    /** 点检标准 */
    planDetailsInspectionStandards?:string,
    /** 巡更计划id */
    planDetailsPatrolPlanId?:string,
    /** 周期标签(年、月、日可多选) */
    planDetailsPeriodLabel?:string,
    /** 巡检计划id */
    planDetailsPlanId?:string,
    /** 计划类型 */
    planDetailsPlayType?:string,
    /** 记录方式 */
    planDetailsRecordingMethod?:string,
    /** 备注 */
    planDetailsRemark?:string,
    /** 点检库id */
    planDetailsStandardId?:string,
    /** 上限/异常值 */
    planDetailsStandardValueOffline?:string,
    /** 下限/正常值 */
    planDetailsStandardValueOnline?:string,
    /** 是否可用 */
    planDetailsStatus?:string,
    /** 更新人 */
    planDetailsUpdateBy?:string,
    /** 更新时间 */
    planDetailsUpdateTime?:string,
    /** 权重 */
    planDetailsWeight?:number,
    /** 记录详述 */
    recordDetail?:string,
    /** 记录时间 */
    recordTime?:string,
    /** 记录类型(点检/维修) */
    recordType?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /**  */
    计划事件id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhDeviceRecord>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备点检维修记录-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhDeviceRecord>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/record/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_设备_标签_二维码NfcService {
    
/**
 * 设备标签(二维码/NFC)-添加
 */
static add(params: {
              
    /** exhDeviceTag */
    exhDeviceTag:ExhDeviceTag,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhDeviceTag']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备标签(二维码/NFC)-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备标签(二维码/NFC)-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备标签(二维码/NFC)-编辑
 */
static edit(params: {
              
    /** exhDeviceTag */
    exhDeviceTag:ExhDeviceTag,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhDeviceTag']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询设备标签(二维码/NFC)列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 设备id */
    deviceId?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 标签编码 */
    tagCode?:string,
    /** 标签名称 */
    tagName?:string,
    /** 标签类型(二维码/NFC) */
    tagType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhDeviceTag>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备标签(二维码/NFC)-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhDeviceTag>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/device/tag/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 管理端_业务日志Service {
    
/**
 * 业务日志-添加
 */
static add(params: {
              
    /** sjLog */
    sjLog:SjLog,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sjLog']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务日志-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务日志-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务日志-编辑
 */
static edit(params: {
              
    /** sjLog */
    sjLog:SjLog,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sjLog']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询业务日志列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** 日志内容 */
    logContent?:string,
    /** 日志标题 */
    logTitle?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SjLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 业务日志-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SjLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/log/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 管理端_用户Service {
    
/**
 * 管理端用户-添加
 */
static add(params: {
              
    /** appMember */
    appMember:AppMember,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['appMember']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 管理端用户-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 管理端用户-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 管理端用户-编辑
 */
static edit(params: {
              
    /** appMember */
    appMember:AppMember,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['appMember']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询管理端用户列表
 */
static list(params: {
              
    /** 同步工作流引擎(1-同步,0-不同步) */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备ID */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件 */
    email?:string,
    /** 主键id */
    id?:string,
    /** 机构编码 */
    orgCode?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户标识 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别(0-默认未知,1-男,2-女) */
    sex?:number,
    /** 性别(1-正常,2-冻结) */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 第三方登录的唯一标识 */
    thirdId?:string,
    /** 第三方类型 */
    thirdType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（1普通成员 2上级） */
    userIdentity?:number,
    /** 登录账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_AppMember>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 管理端用户-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<AppMember>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/member/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_订单Service {
    
/**
 * 订单-添加
 */
static add(params: {
              
    /** exhOrder */
    exhOrder:ExhOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 订单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 订单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 订单-编辑
 */
static edit(params: {
              
    /** exhOrder */
    exhOrder:ExhOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询订单列表
 */
static list(params: {
              
    /** 订单委托人 */
    assignee?:string,
    /** 订单编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 订单描述 */
    description?:string,
    /** 主键 */
    id?:string,
    /** 订单进度 */
    orderProcess?:string,
    /** 订单状态 */
    orderStatus?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 订单责任人 */
    responsible?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 订单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_订单_需求_档案Service {
    
/**
 * 查询订单(需求)档案
 */
static list(params: {
              
    /** 订单委托人 */
    assignee?:string,
    /** 订单编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 订单描述 */
    description?:string,
    /** 主键 */
    id?:string,
    /** 订单进度 */
    orderProcess?:string,
    /** 订单状态 */
    orderStatus?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 订单责任人 */
    responsible?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/order/document/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_巡检巡更打卡记录Service {
    
/**
 * 巡检巡更打卡记录-添加
 */
static add(params: {
              
    /** exhPatrolAttendance */
    exhPatrolAttendance:ExhPatrolAttendance,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhPatrolAttendance']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更打卡记录-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更打卡记录-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更打卡记录-编辑
 */
static edit(params: {
              
    /** exhPatrolAttendance */
    exhPatrolAttendance:ExhPatrolAttendance,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhPatrolAttendance']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询巡检巡更打卡记录列表
 */
static list(params: {
              
    /** 出勤人 */
    attendee?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 清单id */
    detailId?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 巡检巡更计划id */
    patrolId?:string,
    /** 计划类型 */
    patrolType?:string,
    /** 记录时间 */
    recordTime?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhPatrolAttendance>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 巡检巡更打卡记录-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhPatrolAttendance>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/attendance/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_计划档案Service {
    
/**
 * 计划档案-添加
 */
static add(params: {
              
    /** exhPlanDocument */
    exhPlanDocument:ExhPlanDocument,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhPlanDocument']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划档案-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划档案-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划档案-编辑
 */
static edit(params: {
              
    /** exhPlanDocument */
    exhPlanDocument:ExhPlanDocument,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhPlanDocument']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询计划档案列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间（归档日期） */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划id */
    planId?:string,
    /** 处理结果 */
    result?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhPlanDocument>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 计划档案-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhPlanDocument>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_巡x计划档案Service {
    
/**
 * 查询巡检计划档案
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 每日时间结束时间 */
    dailyTimeEnd?:string,
    /** 每日时间范围 */
    dailyTimeRange?:string,
    /** 每日时间开始时间 */
    dailyTimeStart?:string,
    /** 类型 */
    dateType?:string,
    /** 执行部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    equipmentTypeIds?:string,
    /** 执行人 */
    executor?:string,
    /** 执行人id */
    executorId?:string,
    /** 频次 */
    frequency?:number,
    /** 是否生成任务 */
    generateTask?:string,
    /** 生成任务时间 */
    generateTaskTime?:string,
    /** 主键 */
    id?:string,
    /** 节假日是否继续生成任务 */
    ifGenerateTask?:string,
    /** 是否指定日期 */
    ifSpecifyDate?:string,
    /** 巡检类型 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划执行日期 */
    planActivatedDate?:string[],
    /** 计划完成度 */
    planCompletion?:number,
    /** 计划周期类型 */
    planCycleType?:string,
    /** 计划名称 */
    planName?:string,
    /** 计划编号 */
    planNumber?:string,
    /** 计划状态 */
    planStuas?:string,
    /** 组件 */
    planTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    planTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    planTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    planTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    planTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    planTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    planTaskActRuFormExtendFromType?:string,
    /** 主键 */
    planTaskActRuFormExtendId?:string,
    /** 是否启用 */
    planTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    planTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    planTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    planTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    planTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    planTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    planTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    planTaskActRuFormExtendStatus?:string,
    /** 表名 */
    planTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    planTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    planTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    planTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    planTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    planTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    planTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    planTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    planTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    planTaskApprovalStatus?:string,
    /** 归档id */
    planTaskArchiveId?:string,
    /** 归档时间 */
    planTaskArchiveTime?:string,
    /** 归档人 */
    planTaskArchivedBy?:string,
    /** 所属分类Id */
    planTaskCategoryId?:string,
    /** 创建人 */
    planTaskCreateBy?:string,
    /** 创建时间 */
    planTaskCreateTime?:string,
    /** 当前状态 */
    planTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    planTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    planTaskCurrteParentId?:string,
    /** 数据json */
    planTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskDelFlag?:number,
    /** 派单人部门id */
    planTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    planTaskDispatchDepartName?:string,
    /** 派单时间 */
    planTaskDispatchTime?:string,
    /** 派单人id */
    planTaskDispatchUserId?:string,
    /** 派单人名称 */
    planTaskDispatchUserName?:string,
    /** 所属公司 */
    planTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    planTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    planTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    planTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    planTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    planTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    planTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    planTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    planTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    planTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    planTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    planTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    planTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    planTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    planTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    planTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    planTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    planTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    planTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    planTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    planTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    planTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    planTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    planTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    planTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    planTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    planTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    planTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    planTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    planTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    planTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    planTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    planTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    planTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    planTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    planTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    planTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    planTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    planTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    planTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    planTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    planTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    planTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    planTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    planTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    planTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    planTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    planTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    planTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    planTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    planTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    planTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    planTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    planTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    planTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    planTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    planTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    planTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    planTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    planTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    planTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    planTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    planTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    planTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    planTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    planTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    planTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    planTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    planTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    planTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    planTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    planTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    planTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    planTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    planTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    planTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    planTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    planTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    planTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    planTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    planTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    planTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    planTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    planTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    planTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    planTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    planTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    planTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    planTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    planTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    planTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    planTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    planTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    planTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    planTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    planTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    planTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    planTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    planTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    planTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    planTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    planTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    planTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    planTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    planTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    planTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    planTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    planTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    planTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    planTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    planTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    planTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    planTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    planTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    planTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    planTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    planTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    planTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    planTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    planTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    planTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    planTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    planTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    planTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    planTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    planTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    planTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    planTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    planTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    planTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    planTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    planTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    planTaskExhAlarmStatus?:string,
    /** 流转数据json */
    planTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    planTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    planTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    planTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmVersion?:number,
    /** 权重 */
    planTaskExhAlarmWeight?:number,
    /** 工作组id */
    planTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    planTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    planTaskFlowTypeVo?:string,
    /** 表单id */
    planTaskFormId?:string,
    /** 表单json */
    planTaskFormJson?:string,
    /** 表单名称Vo */
    planTaskFromNameVo?:string,
    /** 主键 */
    planTaskId?:string,
    /** 是否为流程审批任务 */
    planTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    planTaskIfService?:number,
    /** 操作说明 */
    planTaskOperatingInstructions?:string,
    /** 父id */
    planTaskParentId?:string,
    /** 计划执行时间范围 */
    planTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    planTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    planTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    planTaskProcessId?:string,
    /** 接单人部门id */
    planTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskReceiveDepartName?:string,
    /** 接单时间 */
    planTaskReceiveTime?:string,
    /** 接单人id */
    planTaskReceiveUserId?:string,
    /** 接单人名称 */
    planTaskReceiveUserName?:string,
    /** 备注 */
    planTaskRemark?:string,
    /** 所属分类 */
    planTaskServiceCategory?:string,
    /** 服务项目Vo */
    planTaskServiceItemsVo?:string,
    /** 是否可用 */
    planTaskStatus?:string,
    /** 任务处理完成时间 */
    planTaskTaskEndTime?:string,
    /** 任务名称 */
    planTaskTaskName?:string,
    /** 任务源id */
    planTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    planTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    planTaskTaskType?:string,
    /** 更新人 */
    planTaskUpdateBy?:string,
    /** 更新时间 */
    planTaskUpdateTime?:string,
    /** 乐观锁 */
    planTaskVersion?:number,
    /** 权重 */
    planTaskWeight?:number,
    /** 工作内容 */
    planTaskWorkDetail?:string,
    /** 工作事项 */
    planTaskWorkItem?:string,
    /** 工作事项id */
    planTaskWorkItemId?:string,
    /** 工单号 */
    planTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    planTaskWorkOrderStatus?:string,
    /** 工作组id */
    planTaskWorkgroupId?:string,
    /** 工作组名称 */
    planTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    plannedDateEnd?:string,
    /** 计划日期范围 */
    plannedDateRange?:string,
    /** 计划日期开始时间 */
    plannedDateStart?:string,
    /** 项目类别 */
    projectCategory?:string,
    /** 所属区域 */
    region?:string,
    /** 发布计划类型;暂存、已发布 */
    releaseType?:string,
    /** 备注 */
    remark?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核时间 */
    reviewTime?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 模板id */
    templateId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanInspectionPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/inspect/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询巡更计划档案
 */
static list1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 每日时间结束时间 */
    dailyTimeEnd?:string,
    /** 每日时间范围 */
    dailyTimeRange?:string,
    /** 每日时间开始时间 */
    dailyTimeStart?:string,
    /** 类型 */
    dateType?:string,
    /** 执行部门 */
    department?:string,
    /** 部门id */
    departmentId?:string,
    /** 设备类型 */
    equipmentType?:string,
    /** 执行人 */
    executor?:string,
    /** 执行人id */
    executorId?:string,
    /** 频次 */
    frequency?:number,
    /** 生成任务时间 */
    generateTaskTime?:string,
    /** 主键 */
    id?:string,
    /** 节假日是否继续生成任务 */
    ifGenerateTask?:string,
    /** 是否指定日期 */
    ifSpecifyDate?:string,
    /** 巡检类型 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 计划执行日期 */
    planActivatedDate?:string[],
    /** 计划完成度 */
    planCompletion?:number,
    /** 计划周期类型 */
    planCycleType?:string,
    /** 计划名称 */
    planName?:string,
    /** 计划编号 */
    planNumber?:string,
    /** 计划状态 */
    planStuas?:string,
    /** 组件 */
    planTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    planTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    planTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    planTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    planTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    planTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    planTaskActRuFormExtendFromType?:string,
    /** 主键 */
    planTaskActRuFormExtendId?:string,
    /** 是否启用 */
    planTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    planTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    planTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    planTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    planTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    planTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    planTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    planTaskActRuFormExtendStatus?:string,
    /** 表名 */
    planTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    planTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    planTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    planTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    planTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    planTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    planTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    planTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    planTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    planTaskApprovalStatus?:string,
    /** 归档id */
    planTaskArchiveId?:string,
    /** 归档时间 */
    planTaskArchiveTime?:string,
    /** 归档人 */
    planTaskArchivedBy?:string,
    /** 所属分类Id */
    planTaskCategoryId?:string,
    /** 创建人 */
    planTaskCreateBy?:string,
    /** 创建时间 */
    planTaskCreateTime?:string,
    /** 当前状态 */
    planTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    planTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    planTaskCurrteParentId?:string,
    /** 数据json */
    planTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskDelFlag?:number,
    /** 派单人部门id */
    planTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    planTaskDispatchDepartName?:string,
    /** 派单时间 */
    planTaskDispatchTime?:string,
    /** 派单人id */
    planTaskDispatchUserId?:string,
    /** 派单人名称 */
    planTaskDispatchUserName?:string,
    /** 所属公司 */
    planTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    planTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    planTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    planTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    planTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    planTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    planTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    planTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    planTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    planTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    planTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    planTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    planTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    planTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    planTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    planTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    planTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    planTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    planTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    planTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    planTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    planTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    planTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    planTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    planTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    planTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    planTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    planTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    planTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    planTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    planTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    planTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    planTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    planTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    planTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    planTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    planTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    planTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    planTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    planTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    planTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    planTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    planTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    planTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    planTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    planTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    planTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    planTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    planTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    planTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    planTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    planTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    planTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    planTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    planTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    planTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    planTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    planTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    planTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    planTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    planTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    planTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    planTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    planTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    planTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    planTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    planTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    planTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    planTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    planTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    planTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    planTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    planTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    planTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    planTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    planTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    planTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    planTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    planTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    planTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    planTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    planTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    planTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    planTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    planTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    planTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    planTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    planTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    planTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    planTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    planTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    planTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    planTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    planTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    planTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    planTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    planTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    planTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    planTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    planTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    planTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    planTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    planTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    planTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    planTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    planTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    planTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    planTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    planTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    planTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    planTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    planTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    planTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    planTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    planTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    planTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    planTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    planTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    planTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    planTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    planTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    planTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    planTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    planTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    planTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    planTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    planTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    planTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    planTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    planTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    planTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    planTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    planTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    planTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    planTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    planTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    planTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    planTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    planTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    planTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    planTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    planTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    planTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    planTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    planTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    planTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    planTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    planTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    planTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    planTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    planTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    planTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    planTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    planTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    planTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    planTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    planTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    planTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    planTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    planTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    planTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    planTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    planTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    planTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    planTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    planTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    planTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    planTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    planTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    planTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    planTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    planTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    planTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    planTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    planTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    planTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    planTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    planTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    planTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    planTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    planTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    planTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    planTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    planTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    planTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    planTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    planTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    planTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    planTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    planTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    planTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    planTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    planTaskExhAlarmStatus?:string,
    /** 流转数据json */
    planTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    planTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    planTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    planTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    planTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    planTaskExhAlarmVersion?:number,
    /** 权重 */
    planTaskExhAlarmWeight?:number,
    /** 工作组id */
    planTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    planTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    planTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    planTaskFlowTypeVo?:string,
    /** 表单id */
    planTaskFormId?:string,
    /** 表单json */
    planTaskFormJson?:string,
    /** 表单名称Vo */
    planTaskFromNameVo?:string,
    /** 主键 */
    planTaskId?:string,
    /** 是否为流程审批任务 */
    planTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    planTaskIfService?:number,
    /** 操作说明 */
    planTaskOperatingInstructions?:string,
    /** 父id */
    planTaskParentId?:string,
    /** 计划执行时间范围 */
    planTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    planTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    planTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    planTaskProcessId?:string,
    /** 接单人部门id */
    planTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    planTaskReceiveDepartName?:string,
    /** 接单时间 */
    planTaskReceiveTime?:string,
    /** 接单人id */
    planTaskReceiveUserId?:string,
    /** 接单人名称 */
    planTaskReceiveUserName?:string,
    /** 备注 */
    planTaskRemark?:string,
    /** 所属分类 */
    planTaskServiceCategory?:string,
    /** 服务项目Vo */
    planTaskServiceItemsVo?:string,
    /** 是否可用 */
    planTaskStatus?:string,
    /** 任务处理完成时间 */
    planTaskTaskEndTime?:string,
    /** 任务名称 */
    planTaskTaskName?:string,
    /** 任务源id */
    planTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    planTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    planTaskTaskType?:string,
    /** 更新人 */
    planTaskUpdateBy?:string,
    /** 更新时间 */
    planTaskUpdateTime?:string,
    /** 乐观锁 */
    planTaskVersion?:number,
    /** 权重 */
    planTaskWeight?:number,
    /** 工作内容 */
    planTaskWorkDetail?:string,
    /** 工作事项 */
    planTaskWorkItem?:string,
    /** 工作事项id */
    planTaskWorkItemId?:string,
    /** 工单号 */
    planTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    planTaskWorkOrderStatus?:string,
    /** 工作组id */
    planTaskWorkgroupId?:string,
    /** 工作组名称 */
    planTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    plannedDateEnd?:string,
    /** 计划日期范围 */
    plannedDateRange?:string,
    /** 计划日期开始时间 */
    plannedDateStart?:string,
    /** 项目类别 */
    projectCategory?:string,
    /** 所属区域 */
    region?:string,
    /** 发布计划类型;暂存、已发布 */
    releaseType?:string,
    /** 备注 */
    remark?:string,
    /** 审核状态 */
    reviewStatus?:string,
    /** 审核时间 */
    reviewTime?:string,
    /** 审核人 */
    reviewer?:string,
    /** 是否可用 */
    status?:string,
    /** 模板id */
    templateId?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExPlanPatrolPlan>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/plan/document/patrol/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_服务类型分组规则Service {
    
/**
 * 服务类型分组规则-添加
 */
static add(params: {
              
    /** exhServiceGroupRule */
    exhServiceGroupRule:ExhServiceGroupRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhServiceGroupRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务类型分组规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务类型分组规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务类型分组规则-编辑
 */
static edit(params: {
              
    /** exhServiceGroupRule */
    exhServiceGroupRule:ExhServiceGroupRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhServiceGroupRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询服务类型分组规则列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间（归档日期） */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 分组名称 */
    groupName?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 服务类型id */
    serviceCategoryIds?:string,
    /** 服务类型名称 */
    serviceCategoryNames?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhServiceGroupRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 服务类型分组规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhServiceGroupRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/service/rule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_空间信息Service {
    
/**
 * 空间信息-添加
 */
static add(params: {
              
    /** dwiSpaceRecordTjgz */
    dwiSpaceRecordTjgz:DwiSpaceRecordTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['dwiSpaceRecordTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 空间信息-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 空间信息-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 空间信息-编辑
 */
static edit(params: {
              
    /** dwiSpaceRecordTjgz */
    dwiSpaceRecordTjgz:DwiSpaceRecordTjgz,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['dwiSpaceRecordTjgz']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询空间信息列表
 */
static list(params: {
              
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    actionType?:string,
    /** 高度 */
    altitude?:string,
    /** 空间实例编码 */
    code?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 空间描述 */
    description?:string,
    /** 空间详细地址 */
    detailAddress?:string,
    /** 数据批次号 */
    dwBatchNumber?:number,
    /** 数据创建者 */
    dwCreationBy?:string,
    /** 数据创建时间 */
    dwCreationDate?:string,
    /** 数据来源系统名称 */
    dwDataSource?:string,
    /** 数据来源系统ID */
    dwDataSourceId?:string,
    /** 数据最后更新者 */
    dwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    dwLastUpdateDate?:string,
    /** 数据来源表 */
    dwSourceTable?:string,
    /** 停车场id */
    extId?:string,
    /** 空间id */
    id?:string,
    /** 该记录在源表里的添加时间 */
    insertTime?:string,
    /** 纬度 */
    latitude?:string,
    /** 层级code) */
    levelCode?:string,
    /** 层级描述 */
    levelDescription?:string,
    /** 层级名称 */
    levelName?:string,
    /** 层级级别 */
    levelOrder?:string,
    /** 经度 */
    longitude?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 上级空间编码 */
    parentSpaceCode?:string,
    /** 路径 */
    path?:string,
    /** 空间实例名称 */
    spaceName?:string,
    /** 状态 */
    status?:string,
    /** 该记录在源表里的更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_DwiSpaceRecordTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 空间信息-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<DwiSpaceRecordTjgz>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/space/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_任务_档案Service {
    
/**
 * 查询任务档案
 */
static task(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/task/document/list/task'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工单档案
 */
static workOrder(params: {
              
    /** 组件 */
    actRuFormExtendComponent?:string,
    /** 创建人 */
    actRuFormExtendCreateBy?:string,
    /** 创建时间 */
    actRuFormExtendCreateTime?:string,
    /** 字段json */
    actRuFormExtendFormFields?:string,
    /** 表单json配置 */
    actRuFormExtendFormJson?:string,
    /** 表单名称 */
    actRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    actRuFormExtendFromType?:string,
    /** 主键 */
    actRuFormExtendId?:string,
    /** 是否启用 */
    actRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    actRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    actRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    actRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    actRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    actRuFormExtendServiceType?:string,
    /** 服务类型id */
    actRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    actRuFormExtendStatus?:string,
    /** 表名 */
    actRuFormExtendTableName?:string,
    /** 任务类型 */
    actRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    actRuFormExtendTwoFromType?:string,
    /** 更新人 */
    actRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    actRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    actRuFormExtendUserLabel?:string,
    /** 权重 */
    actRuFormExtendWeight?:number,
    /** 工作事项id */
    actRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    actRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    approvalStatus?:string,
    /** 归档id */
    archiveId?:string,
    /** 归档时间 */
    archiveTime?:string,
    /** 归档人 */
    archivedBy?:string,
    /** 所属分类Id */
    categoryId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 当前状态 */
    currentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    currentStateVo?:string,
    /** 当前任务最父亲id */
    currteParentId?:string,
    /** 数据json */
    dateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 派单人部门id */
    dispatchDepartId?:string,
    /** 派单人部门名称 */
    dispatchDepartName?:string,
    /** 派单时间 */
    dispatchTime?:string,
    /** 派单人id */
    dispatchUserId?:string,
    /** 派单人名称 */
    dispatchUserName?:string,
    /** 所属公司 */
    exDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanStuas?:string,
    /** 组件 */
    exPlanInspectionPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanInspectionPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanInspectionPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanInspectionPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanInspectionPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanInspectionPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanInspectionPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanInspectionPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanInspectionPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanInspectionPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanInspectionPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanInspectionPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanInspectionPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanInspectionPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanInspectionPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanInspectionPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanInspectionPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanInspectionPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanInspectionPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanInspectionPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanInspectionPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanInspectionPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanInspectionPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanInspectionPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanInspectionPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanInspectionPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanInspectionPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanInspectionPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanInspectionPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanInspectionPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanInspectionPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanInspectionPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanInspectionPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanInspectionPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanInspectionPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanInspectionPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanInspectionPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanInspectionPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanInspectionPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanInspectionPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanInspectionPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanInspectionPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanInspectionPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanInspectionPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanInspectionPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanInspectionPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanInspectionPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanInspectionPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanInspectionPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanInspectionPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanInspectionPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanInspectionPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanInspectionPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanInspectionPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanInspectionPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanInspectionPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanInspectionPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanInspectionPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanInspectionPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanInspectionPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanInspectionPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanInspectionPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanInspectionPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanInspectionPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanInspectionPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanInspectionPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanInspectionPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanInspectionPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanInspectionPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanInspectionPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanInspectionPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanInspectionPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanInspectionPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanInspectionPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanInspectionPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanInspectionPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanInspectionPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanInspectionPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanStuas?:string,
    /** 组件 */
    exPlanPatrolPlanPlanTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exPlanPatrolPlanPlanTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exPlanPatrolPlanPlanTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exPlanPatrolPlanPlanTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exPlanPatrolPlanPlanTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exPlanPatrolPlanPlanTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exPlanPatrolPlanPlanTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exPlanPatrolPlanPlanTaskApprovalStatus?:string,
    /** 归档id */
    exPlanPatrolPlanPlanTaskArchiveId?:string,
    /** 归档时间 */
    exPlanPatrolPlanPlanTaskArchiveTime?:string,
    /** 归档人 */
    exPlanPatrolPlanPlanTaskArchivedBy?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskCreateTime?:string,
    /** 当前状态 */
    exPlanPatrolPlanPlanTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exPlanPatrolPlanPlanTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exPlanPatrolPlanPlanTaskCurrteParentId?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskDelFlag?:number,
    /** 派单人部门id */
    exPlanPatrolPlanPlanTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exPlanPatrolPlanPlanTaskDispatchDepartName?:string,
    /** 派单时间 */
    exPlanPatrolPlanPlanTaskDispatchTime?:string,
    /** 派单人id */
    exPlanPatrolPlanPlanTaskDispatchUserId?:string,
    /** 派单人名称 */
    exPlanPatrolPlanPlanTaskDispatchUserName?:string,
    /** 所属公司 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExPlanInspectionPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exPlanPatrolPlanPlanTaskExhAlarmAlarmStatus?:string,
    /** 告警实例发生的来源渠道ID */
    exPlanPatrolPlanPlanTaskExhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exPlanPatrolPlanPlanTaskExhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exPlanPatrolPlanPlanTaskExhAlarmClosingTime?:string,
    /** 创建人 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateBy?:string,
    /** 创建数据json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormId?:string,
    /** 创建表单json */
    exPlanPatrolPlanPlanTaskExhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exPlanPatrolPlanPlanTaskExhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exPlanPatrolPlanPlanTaskExhAlarmDelFlag?:number,
    /** 部门负责人 */
    exPlanPatrolPlanPlanTaskExhAlarmDepartment?:string,
    /** 部门负责人id */
    exPlanPatrolPlanPlanTaskExhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exPlanPatrolPlanPlanTaskExhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exPlanPatrolPlanPlanTaskExhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exPlanPatrolPlanPlanTaskExhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exPlanPatrolPlanPlanTaskExhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exPlanPatrolPlanPlanTaskExhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exPlanPatrolPlanPlanTaskExhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exPlanPatrolPlanPlanTaskExhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exPlanPatrolPlanPlanTaskExhAlarmOneClickId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskExhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exPlanPatrolPlanPlanTaskExhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exPlanPatrolPlanPlanTaskExhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exPlanPatrolPlanPlanTaskExhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exPlanPatrolPlanPlanTaskExhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskExhAlarmStatus?:string,
    /** 流转数据json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormId?:string,
    /** 流转表单json */
    exPlanPatrolPlanPlanTaskExhAlarmTaskFormJson?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskExhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskExhAlarmVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskExhAlarmWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskExhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exPlanPatrolPlanPlanTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exPlanPatrolPlanPlanTaskFlowTypeVo?:string,
    /** 表单id */
    exPlanPatrolPlanPlanTaskFormId?:string,
    /** 表单json */
    exPlanPatrolPlanPlanTaskFormJson?:string,
    /** 表单名称Vo */
    exPlanPatrolPlanPlanTaskFromNameVo?:string,
    /** 主键 */
    exPlanPatrolPlanPlanTaskId?:string,
    /** 是否为流程审批任务 */
    exPlanPatrolPlanPlanTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exPlanPatrolPlanPlanTaskIfService?:number,
    /** 操作说明 */
    exPlanPatrolPlanPlanTaskOperatingInstructions?:string,
    /** 父id */
    exPlanPatrolPlanPlanTaskParentId?:string,
    /** 计划执行时间范围 */
    exPlanPatrolPlanPlanTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exPlanPatrolPlanPlanTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exPlanPatrolPlanPlanTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exPlanPatrolPlanPlanTaskProcessId?:string,
    /** 接单人部门id */
    exPlanPatrolPlanPlanTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exPlanPatrolPlanPlanTaskReceiveDepartName?:string,
    /** 接单时间 */
    exPlanPatrolPlanPlanTaskReceiveTime?:string,
    /** 接单人id */
    exPlanPatrolPlanPlanTaskReceiveUserId?:string,
    /** 接单人名称 */
    exPlanPatrolPlanPlanTaskReceiveUserName?:string,
    /** 备注 */
    exPlanPatrolPlanPlanTaskRemark?:string,
    /** 所属分类 */
    exPlanPatrolPlanPlanTaskServiceCategory?:string,
    /** 服务项目Vo */
    exPlanPatrolPlanPlanTaskServiceItemsVo?:string,
    /** 是否可用 */
    exPlanPatrolPlanPlanTaskStatus?:string,
    /** 任务处理完成时间 */
    exPlanPatrolPlanPlanTaskTaskEndTime?:string,
    /** 任务名称 */
    exPlanPatrolPlanPlanTaskTaskName?:string,
    /** 任务源id */
    exPlanPatrolPlanPlanTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exPlanPatrolPlanPlanTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exPlanPatrolPlanPlanTaskTaskType?:string,
    /** 更新人 */
    exPlanPatrolPlanPlanTaskUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanPlanTaskUpdateTime?:string,
    /** 乐观锁 */
    exPlanPatrolPlanPlanTaskVersion?:number,
    /** 权重 */
    exPlanPatrolPlanPlanTaskWeight?:number,
    /** 工作内容 */
    exPlanPatrolPlanPlanTaskWorkDetail?:string,
    /** 工作事项 */
    exPlanPatrolPlanPlanTaskWorkItem?:string,
    /** 工作事项id */
    exPlanPatrolPlanPlanTaskWorkItemId?:string,
    /** 工单号 */
    exPlanPatrolPlanPlanTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exPlanPatrolPlanPlanTaskWorkOrderStatus?:string,
    /** 工作组id */
    exPlanPatrolPlanPlanTaskWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanPlanTaskWorkgroupName?:string,
    /** 计划日期结束时间 */
    exPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exPlanPatrolPlanStatus?:string,
    /** 模板id */
    exPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exPlanPatrolPlanWorkgroupName?:string,
    /** (电箱)告警展位号 */
    exhAlarmAlarmBoothCode?:string,
    /** 电箱告警实例级别 */
    exhAlarmAlarmBoxLevel?:number,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefCreateTime?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefDefCategoryCategoryName?:string,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefDefCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmDefDefCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmDefDefCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDefCategoryDelFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefDefCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefDefCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefDefCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefDefCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefDefCategoryWeight?:number,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefDefCategoryId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefDefName?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmDefDelFlag?:number,
    /** 告警规格ID */
    exhAlarmAlarmDefId?:string,
    /** 是否可用 */
    exhAlarmAlarmDefStatus?:string,
    /** 更新人 */
    exhAlarmAlarmDefUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmDefUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmDefVersion?:number,
    /** 权重 */
    exhAlarmAlarmDefWeight?:number,
    /** 告警规格分类标识符 */
    exhAlarmAlarmDefCategoryCode?:string,
    /** 告警规格所在分类对象ID */
    exhAlarmAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmDefCategoryName?:string,
    /** 告警规格标识符 */
    exhAlarmAlarmDefCode?:string,
    /** 告警实例所属的告警规格对象ID */
    exhAlarmAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmDefName?:string,
    /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
    exhAlarmAlarmLevel?:string,
    /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
    exhAlarmAlarmLocationActionType?:string,
    /** 高度 */
    exhAlarmAlarmLocationAltitude?:string,
    /** 空间实例编码 */
    exhAlarmAlarmLocationCode?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmLocationDelFlag?:number,
    /** 空间描述 */
    exhAlarmAlarmLocationDescription?:string,
    /** 空间详细地址 */
    exhAlarmAlarmLocationDetailAddress?:string,
    /** 数据批次号 */
    exhAlarmAlarmLocationDwBatchNumber?:number,
    /** 数据创建者 */
    exhAlarmAlarmLocationDwCreationBy?:string,
    /** 数据创建时间 */
    exhAlarmAlarmLocationDwCreationDate?:string,
    /** 数据来源系统名称 */
    exhAlarmAlarmLocationDwDataSource?:string,
    /** 数据来源系统ID */
    exhAlarmAlarmLocationDwDataSourceId?:string,
    /** 数据最后更新者 */
    exhAlarmAlarmLocationDwLastUpdateBy?:string,
    /** 数据最后更新时间 */
    exhAlarmAlarmLocationDwLastUpdateDate?:string,
    /** 数据来源表 */
    exhAlarmAlarmLocationDwSourceTable?:string,
    /** 停车场id */
    exhAlarmAlarmLocationExtId?:string,
    /** 空间id */
    exhAlarmAlarmLocationId?:string,
    /** 该记录在源表里的添加时间 */
    exhAlarmAlarmLocationInsertTime?:string,
    /** 纬度 */
    exhAlarmAlarmLocationLatitude?:string,
    /** 层级code) */
    exhAlarmAlarmLocationLevelCode?:string,
    /** 层级描述 */
    exhAlarmAlarmLocationLevelDescription?:string,
    /** 层级名称 */
    exhAlarmAlarmLocationLevelName?:string,
    /** 层级级别 */
    exhAlarmAlarmLocationLevelOrder?:string,
    /** 经度 */
    exhAlarmAlarmLocationLongitude?:string,
    /** 上级空间编码 */
    exhAlarmAlarmLocationParentSpaceCode?:string,
    /** 路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 空间实例名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 状态 */
    exhAlarmAlarmLocationStatus?:string,
    /** 该记录在源表里的更新时间 */
    exhAlarmAlarmLocationUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmLocationVersion?:number,
    /** 告警实例所在的地理坐标 */
    exhAlarmAlarmLocationCoordinate?:string,
    /** 告警实例发生的空间位置ID */
    exhAlarmAlarmLocationId?:string,
    /** 告警实例空间路径 */
    exhAlarmAlarmLocationPath?:string,
    /** 告警实例所在的最小空间实例的名称 */
    exhAlarmAlarmLocationSpaceName?:string,
    /** 告警实例的唯一编号 */
    exhAlarmAlarmNumber?:string,
    /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
    exhAlarmAlarmProcess?:string,
    /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
    exhAlarmAlarmStatus?:string,
    /** 组件 */
    exhAlarmAlarmTaskActRuFormExtendComponent?:string,
    /** 创建人 */
    exhAlarmAlarmTaskActRuFormExtendCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskActRuFormExtendCreateTime?:string,
    /** 字段json */
    exhAlarmAlarmTaskActRuFormExtendFormFields?:string,
    /** 表单json配置 */
    exhAlarmAlarmTaskActRuFormExtendFormJson?:string,
    /** 表单名称 */
    exhAlarmAlarmTaskActRuFormExtendFormName?:string,
    /** 一级表单分类;需求中心、告警中心 */
    exhAlarmAlarmTaskActRuFormExtendFromType?:string,
    /** 主键 */
    exhAlarmAlarmTaskActRuFormExtendId?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskActRuFormExtendIfEnabling?:number,
    /** 是否通用 */
    exhAlarmAlarmTaskActRuFormExtendIfUniversal?:number,
    /** 接单人部门id */
    exhAlarmAlarmTaskActRuFormExtendReceiveDepartId?:string,
    /** 接单人id */
    exhAlarmAlarmTaskActRuFormExtendReceiveUserId?:string,
    /** 用户部门多选 ,分割 */
    exhAlarmAlarmTaskActRuFormExtendSelecteddeparts?:string,
    /** 服务类型 */
    exhAlarmAlarmTaskActRuFormExtendServiceType?:string,
    /** 服务类型id */
    exhAlarmAlarmTaskActRuFormExtendServiceTypeId?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskActRuFormExtendStatus?:string,
    /** 表名 */
    exhAlarmAlarmTaskActRuFormExtendTableName?:string,
    /** 任务类型 */
    exhAlarmAlarmTaskActRuFormExtendTaskType?:string,
    /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
    exhAlarmAlarmTaskActRuFormExtendTwoFromType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskActRuFormExtendUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskActRuFormExtendUpdateTime?:string,
    /** 使用标签场景:任务创建、任务流转 */
    exhAlarmAlarmTaskActRuFormExtendUserLabel?:string,
    /** 权重 */
    exhAlarmAlarmTaskActRuFormExtendWeight?:number,
    /** 工作事项id */
    exhAlarmAlarmTaskActRuFormExtendWorkItermId?:string,
    /** 工作事项名称 */
    exhAlarmAlarmTaskActRuFormExtendWorkItermName?:string,
    /** 审批状态(判断任务是否审批通过还是不通过的) */
    exhAlarmAlarmTaskApprovalStatus?:string,
    /** 归档id */
    exhAlarmAlarmTaskArchiveId?:string,
    /** 归档时间 */
    exhAlarmAlarmTaskArchiveTime?:string,
    /** 归档人 */
    exhAlarmAlarmTaskArchivedBy?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskCreateTime?:string,
    /** 当前状态 */
    exhAlarmAlarmTaskCurrentState?:string,
    /** 当前状态Vo(判断任务是否可以撤回) */
    exhAlarmAlarmTaskCurrentStateVo?:string,
    /** 当前任务最父亲id */
    exhAlarmAlarmTaskCurrteParentId?:string,
    /** 数据json */
    exhAlarmAlarmTaskDateJson?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskDelFlag?:number,
    /** 派单人部门id */
    exhAlarmAlarmTaskDispatchDepartId?:string,
    /** 派单人部门名称 */
    exhAlarmAlarmTaskDispatchDepartName?:string,
    /** 派单时间 */
    exhAlarmAlarmTaskDispatchTime?:string,
    /** 派单人id */
    exhAlarmAlarmTaskDispatchUserId?:string,
    /** 派单人名称 */
    exhAlarmAlarmTaskDispatchUserName?:string,
    /** 所属公司 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAffiliatedCompany?:string,
    /** 审核通过时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectApprovalTime?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectAttachment?:string,
    /** 批次id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBatchId?:string,
    /** 展位号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectBoothNumber?:string,
    /** 所属分类Id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCategoryId?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectCreateTime?:string,
    /** 数据json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDateJson?:string,
    /** 拆除完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDismantleCompCount?:number,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectDispatchUser?:string,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceCategoryWeight?:number,
    /** 是否启用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsActivatedFlag?:number,
    /** 告警规格分类ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryId?:string,
    /** 告警规格分类名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefCategoryName?:string,
    /** 告警规格ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefId?:string,
    /** 告警规格名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmDefName?:string,
    /** 告警位置ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationId?:string,
    /** 告警位置名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsAlarmLocationName?:string,
    /** 告警派单规则的标识符 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCode?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDelFlag?:number,
    /** 部门负责人ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsDepartmentHeadId?:string,
    /** 告警派单规则ID */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsId?:string,
    /** 告警派单规则的名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsLabel?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsStatus?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhAlarmDispatchRuleServiceItemsWeight?:number,
    /** 展区 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionArea?:string,
    /** 展会名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectExhibitionName?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFile?:string,
    /** 表单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectFormJson?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectId?:string,
    /** 安装完成数量Vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectInstallCompCount?:number,
    /** 详细位置 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectLocation?:string,
    /** 材料 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectMaterial?:string,
    /** 新表单json */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewFormJson?:string,
    /** 报馆时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectNewspaperTime?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderNumber?:string,
    /** 订单备注 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderRemarks?:string,
    /** 订单类型（现场单、预订单） */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectOrderType?:string,
    /** 展馆号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectPavilion?:string,
    /** 订单状态 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectProjectStatus?:string,
    /** 数量 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectQuantity?:number,
    /** 重组订单id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReOrderId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectReceiveUserName?:string,
    /** 接驳送电完成数量vo */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSendCCompCount?:number,
    /** 服务分类 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceCategory?:string,
    /** 服务项 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceItems?:string,
    /** 服务名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceName?:string,
    /** 服务规格 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectServiceSpecifications?:string,
    /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectStatus?:string,
    /** 主体类型 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSubjectType?:string,
    /** 同步时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectSynchronizationTime?:string,
    /** 任务id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectTaskId?:string,
    /** 单位 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUnit?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWeight?:number,
    /** 工单号 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkOrderNumber?:string,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterExtensionProjectWorkgroupName?:string,
    /** 附件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectAttachment?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateBy?:string,
    /** 创建数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormId?:string,
    /** 创建表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectCreateTime?:string,
    /** 决策需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDecisionTaskType?:string,
    /** 派单部门 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartment?:string,
    /** 派单部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchDepartmentId?:string,
    /** 派单人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectDispatchUser?:string,
    /** 展馆排期需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectExTaskType?:string,
    /** 文件 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectFile?:string,
    /** 主键 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectId?:string,
    /** 内部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectInsideTaskType?:string,
    /** 一键发起需求id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOneClickId?:string,
    /** 订单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderId?:string,
    /** 订单号 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOrderNumber?:string,
    /** 外部需求任务类型 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectOutsideTaskType?:string,
    /** 项目状态 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectProjectStatus?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectReceiveUserName?:string,
    /** 需求类型:内部、外部、展馆排期、决策 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectRequirementType?:string,
    /** 需求来源 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectSourceOfDemand?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectStatus?:string,
    /** 流转数据json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormId?:string,
    /** 流转表单json */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskFormJson?:string,
    /** 任务类型id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectTaskTypeId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExDemandCenterInsideProjectWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanInspectionPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentType?:string,
    /** 设备类型ids(新增巡检计划专用) */
    exhAlarmAlarmTaskExPlanInspectionPlanEquipmentTypeIds?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanInspectionPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanInspectionPlanFrequency?:number,
    /** 是否生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTask?:string,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanInspectionPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanInspectionPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanInspectionPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanInspectionPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanInspectionPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanInspectionPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanInspectionPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanInspectionPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanInspectionPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanInspectionPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanInspectionPlanWorkgroupName?:string,
    /** 创建人 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateBy?:string,
    /** 创建时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanCreateTime?:string,
    /** 每日时间结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeEnd?:string,
    /** 每日时间范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeRange?:string,
    /** 每日时间开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanDailyTimeStart?:string,
    /** 类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanDateType?:string,
    /** 执行部门 */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartment?:string,
    /** 部门id */
    exhAlarmAlarmTaskExPlanPatrolPlanDepartmentId?:string,
    /** 设备类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanEquipmentType?:string,
    /** 执行人 */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutor?:string,
    /** 执行人id */
    exhAlarmAlarmTaskExPlanPatrolPlanExecutorId?:string,
    /** 频次 */
    exhAlarmAlarmTaskExPlanPatrolPlanFrequency?:number,
    /** 生成任务时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanGenerateTaskTime?:string,
    /** 主键 */
    exhAlarmAlarmTaskExPlanPatrolPlanId?:string,
    /** 节假日是否继续生成任务 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfGenerateTask?:string,
    /** 是否指定日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanIfSpecifyDate?:string,
    /** 巡检类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanInspectionType?:string,
    /** 计划执行日期 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanActivatedDate?:string[],
    /** 计划完成度 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCompletion?:number,
    /** 计划周期类型 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanCycleType?:string,
    /** 计划名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanName?:string,
    /** 计划编号 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanNumber?:string,
    /** 计划状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlanStuas?:string,
    /** 计划日期结束时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateEnd?:string,
    /** 计划日期范围 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateRange?:string,
    /** 计划日期开始时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanPlannedDateStart?:string,
    /** 项目类别 */
    exhAlarmAlarmTaskExPlanPatrolPlanProjectCategory?:string,
    /** 所属区域 */
    exhAlarmAlarmTaskExPlanPatrolPlanRegion?:string,
    /** 发布计划类型;暂存、已发布 */
    exhAlarmAlarmTaskExPlanPatrolPlanReleaseType?:string,
    /** 备注 */
    exhAlarmAlarmTaskExPlanPatrolPlanRemark?:string,
    /** 审核状态 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewStatus?:string,
    /** 审核时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewTime?:string,
    /** 审核人 */
    exhAlarmAlarmTaskExPlanPatrolPlanReviewer?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskExPlanPatrolPlanStatus?:string,
    /** 模板id */
    exhAlarmAlarmTaskExPlanPatrolPlanTemplateId?:string,
    /** 更新人 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskExPlanPatrolPlanUpdateTime?:string,
    /** 权重 */
    exhAlarmAlarmTaskExPlanPatrolPlanWeight?:number,
    /** 工作组id */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskExPlanPatrolPlanWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    exhAlarmAlarmTaskExternalFlag?:boolean,
    /** 流程分类Vo */
    exhAlarmAlarmTaskFlowTypeVo?:string,
    /** 表单id */
    exhAlarmAlarmTaskFormId?:string,
    /** 表单json */
    exhAlarmAlarmTaskFormJson?:string,
    /** 表单名称Vo */
    exhAlarmAlarmTaskFromNameVo?:string,
    /** 主键 */
    exhAlarmAlarmTaskId?:string,
    /** 是否为流程审批任务 */
    exhAlarmAlarmTaskIfBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    exhAlarmAlarmTaskIfService?:number,
    /** 操作说明 */
    exhAlarmAlarmTaskOperatingInstructions?:string,
    /** 父id */
    exhAlarmAlarmTaskParentId?:string,
    /** 计划执行时间范围 */
    exhAlarmAlarmTaskPlanExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    exhAlarmAlarmTaskPlannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    exhAlarmAlarmTaskPlannedStartExecutionTime?:string,
    /** 流程id */
    exhAlarmAlarmTaskProcessId?:string,
    /** 接单人部门id */
    exhAlarmAlarmTaskReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmAlarmTaskReceiveDepartName?:string,
    /** 接单时间 */
    exhAlarmAlarmTaskReceiveTime?:string,
    /** 接单人id */
    exhAlarmAlarmTaskReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmAlarmTaskReceiveUserName?:string,
    /** 备注 */
    exhAlarmAlarmTaskRemark?:string,
    /** 所属分类 */
    exhAlarmAlarmTaskServiceCategory?:string,
    /** 服务项目Vo */
    exhAlarmAlarmTaskServiceItemsVo?:string,
    /** 是否可用 */
    exhAlarmAlarmTaskStatus?:string,
    /** 任务处理完成时间 */
    exhAlarmAlarmTaskTaskEndTime?:string,
    /** 任务名称 */
    exhAlarmAlarmTaskTaskName?:string,
    /** 任务源id */
    exhAlarmAlarmTaskTaskSourceId?:string,
    /** 任务开始处理时间 */
    exhAlarmAlarmTaskTaskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    exhAlarmAlarmTaskTaskType?:string,
    /** 更新人 */
    exhAlarmAlarmTaskUpdateBy?:string,
    /** 更新时间 */
    exhAlarmAlarmTaskUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmAlarmTaskVersion?:number,
    /** 权重 */
    exhAlarmAlarmTaskWeight?:number,
    /** 工作内容 */
    exhAlarmAlarmTaskWorkDetail?:string,
    /** 工作事项 */
    exhAlarmAlarmTaskWorkItem?:string,
    /** 工作事项id */
    exhAlarmAlarmTaskWorkItemId?:string,
    /** 工单号 */
    exhAlarmAlarmTaskWorkOrderNumber?:string,
    /** 工单状态;转单、接单 */
    exhAlarmAlarmTaskWorkOrderStatus?:string,
    /** 工作组id */
    exhAlarmAlarmTaskWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmAlarmTaskWorkgroupName?:string,
    /** 告警实例发生的来源渠道ID */
    exhAlarmChannelIdAlarm?:string,
    /** 告警关闭原因 */
    exhAlarmCloseReason?:string,
    /** 告警实例的关闭时间 */
    exhAlarmClosingTime?:string,
    /** 创建人 */
    exhAlarmCreateBy?:string,
    /** 创建数据json */
    exhAlarmCreateDateJson?:string,
    /** 创建表单id */
    exhAlarmCreateFormId?:string,
    /** 创建表单json */
    exhAlarmCreateFormJson?:string,
    /** 创建时间 */
    exhAlarmCreateTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    exhAlarmDelFlag?:number,
    /** 部门负责人 */
    exhAlarmDepartment?:string,
    /** 部门负责人id */
    exhAlarmDepartmentHeadId?:string,
    /** 告警实例的描述文本 */
    exhAlarmDescription?:string,
    /** 设备告警任务类型 */
    exhAlarmDeviceAlarmTaskType?:string,
    /** 告警实例发生的来源设备类型 */
    exhAlarmDeviceCategoryAlarm?:string,
    /** 告警实例发生的来源设备ID */
    exhAlarmDeviceIdAlarm?:string,
    /** 告警实例发生的来源(电箱)设备名称 */
    exhAlarmDeviceName?:string,
    /** 告警误报原因 */
    exhAlarmDistortReason?:string,
    /** 事件告警任务类型 */
    exhAlarmEventAlarmTaskType?:string,
    /** 告警实例ID */
    exhAlarmId?:string,
    /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
    exhAlarmLastUpdateTime?:string,
    /** 是否为人工告警 */
    exhAlarmManualFlag?:number,
    /** 告警实例的发生时间 */
    exhAlarmOccurringTime?:string,
    /** 一键发起需求id */
    exhAlarmOneClickId?:string,
    /** 接单人部门id */
    exhAlarmReceiveDepartId?:string,
    /** 接单人部门名称 */
    exhAlarmReceiveDepartName?:string,
    /** 接单人id */
    exhAlarmReceiveUserId?:string,
    /** 接单人名称 */
    exhAlarmReceiveUserName?:string,
    /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
    exhAlarmRelatedCamera?:string,
    /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
    exhAlarmReportTimes?:number,
    /** 告警上报人的身份id */
    exhAlarmReporterId?:string,
    /** 安防告警任务类型 */
    exhAlarmSecurityAlarmTaskType?:string,
    /** 是否可用 */
    exhAlarmStatus?:string,
    /** 流转数据json */
    exhAlarmTaskDateJson?:string,
    /** 流转表单id */
    exhAlarmTaskFormId?:string,
    /** 流转表单json */
    exhAlarmTaskFormJson?:string,
    /** 更新人 */
    exhAlarmUpdateBy?:string,
    /** 更新时间 */
    exhAlarmUpdateTime?:string,
    /** 乐观锁 */
    exhAlarmVersion?:number,
    /** 权重 */
    exhAlarmWeight?:number,
    /** 工作组id */
    exhAlarmWorkgroupId?:string,
    /** 工作组名称 */
    exhAlarmWorkgroupName?:string,
    /** 是否为外派任务（是为1） */
    externalFlag?:boolean,
    /** 流程分类Vo */
    flowTypeVo?:string,
    /** 表单id */
    formId?:string,
    /** 表单json */
    formJson?:string,
    /** 表单名称Vo */
    fromNameVo?:string,
    /** 主键 */
    id?:string,
    /** 是否为流程审批任务 */
    ifBusinessTask?:number,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 操作说明 */
    operatingInstructions?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 父id */
    parentId?:string,
    /** 计划执行时间范围 */
    planExecutionTimeRangeVo?:string,
    /** 计划执行结束时间 */
    plannedEndExecutionTime?:string,
    /** 计划执行开始时间 */
    plannedStartExecutionTime?:string,
    /** 流程id */
    processId?:string,
    /** 接单人部门id */
    receiveDepartId?:string,
    /** 接单人部门名称 */
    receiveDepartName?:string,
    /** 接单时间 */
    receiveTime?:string,
    /** 接单人id */
    receiveUserId?:string,
    /** 接单人名称 */
    receiveUserName?:string,
    /** 备注 */
    remark?:string,
    /** 所属分类 */
    serviceCategory?:string,
    /** 服务项目Vo */
    serviceItemsVo?:string,
    /** 是否可用 */
    status?:string,
    /** 任务处理完成时间 */
    taskEndTime?:string,
    /** 任务名称 */
    taskName?:string,
    /** 任务源id */
    taskSourceId?:string,
    /** 任务开始处理时间 */
    taskStartTime?:string,
    /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
    taskType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作事项id */
    workItemId?:string,
    /** 工单号 */
    workOrderNumber?:string,
    /** 工单状态;转单、接单 */
    workOrderStatus?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExTaskCenter>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/task/document/list/workOrder'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_访客Service {
    
/**
 * 访客-添加
 */
static add(params: {
              
    /** exVisitor */
    exVisitor:ExVisitor,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exVisitor']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-编辑
 */
static edit(params: {
              
    /** exVisitor */
    exVisitor:ExVisitor,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exVisitor']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-审核
 */
static examine(params: {
              
    /** exVisitor */
    exVisitor:ExVisitor,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/examine'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exVisitor']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询访客列表
 */
static list(params: {
              
    /** 预约时间 */
    appointmentTime?:string,
    /** 车牌号 */
    carNumber?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remarks?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 访问部门 */
    visitDepartment?:string,
    /** 访问人员姓名 */
    visitName?:string,
    /** 来访目的 */
    visitPurpose?:string,
    /** 来访时间 */
    visitTime?:string,
    /** 访客公司 */
    visitorCompany?:string,
    /** 访客部门 */
    visitorDepartment?:string,
    /** 访客姓名 */
    visitorName?:string,
    /** 访客电话 */
    visitorPhone?:string,
    /** 访客性别 */
    visitorSex?:string,
    /** 访客状态 */
    visitorStatus?:string,
    /** 权重 */
    weight?:number,
    /** 核销人 */
    writeOffBy?:string,
    /** 核销时间 */
    writeOffTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExVisitor>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询车辆列表
 */
static listCar(params: {
              
    /** 预约时间 */
    appointmentTime?:string,
    /** 车牌号 */
    carNumber?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remarks?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 访问部门 */
    visitDepartment?:string,
    /** 访问人员姓名 */
    visitName?:string,
    /** 来访目的 */
    visitPurpose?:string,
    /** 来访时间 */
    visitTime?:string,
    /** 访客公司 */
    visitorCompany?:string,
    /** 访客部门 */
    visitorDepartment?:string,
    /** 访客姓名 */
    visitorName?:string,
    /** 访客电话 */
    visitorPhone?:string,
    /** 访客性别 */
    visitorSex?:string,
    /** 访客状态 */
    visitorStatus?:string,
    /** 权重 */
    weight?:number,
    /** 核销人 */
    writeOffBy?:string,
    /** 核销时间 */
    writeOffTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExVisitor>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/listCar'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExVisitor>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-核销二维码
 */
static writeOff(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/visitor/writeOff'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_工单Service {
    
/**
 * 工单-添加
 */
static add(params: {
              
    /** exhWorkOrder */
    exhWorkOrder:ExhWorkOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exhWorkOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工单-编辑
 */
static edit(params: {
              
    /** exhWorkOrder */
    exhWorkOrder:ExhWorkOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exhWorkOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工单列表
 */
static list(params: {
              
    /** 工单编号 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 工单描述 */
    description?:string,
    /** 主键 */
    id?:string,
    /** 工单委托人 */
    orderAssignee?:string,
    /** 工单操作 */
    orderOperation?:string,
    /** 工单进度 */
    orderProcess?:string,
    /** 工单责任人 */
    orderResponsible?:string,
    /** 工单状态 */
    orderStatus?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhWorkOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExhWorkOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_工单档案Service {
    
/**
 * 查询工单档案列表
 */
static list(params: {
              
    /** 工单编号 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 工单描述 */
    description?:string,
    /** 主键 */
    id?:string,
    /** 工单委托人 */
    orderAssignee?:string,
    /** 工单操作 */
    orderOperation?:string,
    /** 工单进度 */
    orderProcess?:string,
    /** 工单责任人 */
    orderResponsible?:string,
    /** 工单状态 */
    orderStatus?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 乐观锁 */
    version?:number,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExhWorkOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/admin/workOrder/document/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 客户端_业务日志Service {
    
/**
 * 查询业务日志列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** 日志内容 */
    logContent?:string,
    /** 日志标题 */
    logTitle?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SjLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/appLog/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class App_访客Service {
    
/**
 * 访客-添加
 */
static add(params: {
              
    /** exVisitor */
    exVisitor:ExVisitor,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exVisitor']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-编辑
 */
static edit(params: {
              
    /** exVisitor */
    exVisitor:ExVisitor,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exVisitor']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询访客列表
 */
static list(params: {
              
    /** 预约时间 */
    appointmentTime?:string,
    /** 车牌号 */
    carNumber?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remarks?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 访问部门 */
    visitDepartment?:string,
    /** 访问人员姓名 */
    visitName?:string,
    /** 来访目的 */
    visitPurpose?:string,
    /** 来访时间 */
    visitTime?:string,
    /** 访客公司 */
    visitorCompany?:string,
    /** 访客部门 */
    visitorDepartment?:string,
    /** 访客姓名 */
    visitorName?:string,
    /** 访客电话 */
    visitorPhone?:string,
    /** 访客性别 */
    visitorSex?:string,
    /** 访客状态 */
    visitorStatus?:string,
    /** 权重 */
    weight?:number,
    /** 核销人 */
    writeOffBy?:string,
    /** 核销时间 */
    writeOffTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExVisitor>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 访客-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExVisitor>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/app/visitor/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 客户端_用户权限Service {
    
/**
 * 登录
 */
static login(params: {
              
    /** appMemberLoginBo */
    appMemberLoginBo:AppMemberLoginBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<AppMemberLoginResVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/member/AppMemberAuth/login'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['appMemberLoginBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 注册
 */
static register(params: {
              
    /** appMemberLoginBo */
    appMemberLoginBo:AppMemberLoginBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<AppMemberLoginResVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/member/AppMemberAuth/register'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['appMemberLoginBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 客户端_用户Service {
    
/**
 * 获取用户信息
 */
static getUserInfo(options:IRequestOptions={}):Promise<接口返回对象<AppMemberLoginResVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/member/member/getUserInfo'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_人员管理Service {
    
/**
 * 人员管理-添加
 */
static add(params: {
              
    /** memberUserManager */
    memberUserManager:MemberUserManager,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['memberUserManager']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 人员管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 人员管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 人员管理-编辑
 */
static edit(params: {
              
    /** memberUserManager */
    memberUserManager:MemberUserManager,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['memberUserManager']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询人员管理列表
 */
static list(params: {
              
    /** 同步工作流引擎(1-同步,0-不同步) */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备ID */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件 */
    email?:string,
    /** 主键id */
    id?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户标识 */
    relTenantIds?:string,
    /** 性别(0-默认未知,1-男,2-女) */
    sex?:number,
    /** 性别(1-正常,2-冻结) */
    status?:number,
    /** 用户id */
    sysUserId?:string,
    /** 座机号 */
    telephone?:string,
    /** 第三方登录的唯一标识 */
    thirdId?:string,
    /** 第三方类型 */
    thirdType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（1普通成员 2上级） */
    userIdentity?:number,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_MemberUserManager>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询人员导入列表
 */
static listSysUserIds(params: {
              
    /** 同步工作流引擎(1-同步,0-不同步) */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备ID */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件 */
    email?:string,
    /** 主键id */
    id?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户标识 */
    relTenantIds?:string,
    /** 性别(0-默认未知,1-男,2-女) */
    sex?:number,
    /** 性别(1-正常,2-冻结) */
    status?:number,
    /** 用户id */
    sysUserId?:string,
    /** 座机号 */
    telephone?:string,
    /** 第三方登录的唯一标识 */
    thirdId?:string,
    /** 第三方类型 */
    thirdType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（1普通成员 2上级） */
    userIdentity?:number,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<MemberUserManager>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/listSysUserIds'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 人员管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<MemberUserManager>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询指定用户和部门关联的数据
 */
static userDepartList(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DepartIdModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/MemberUserManager/userDepartList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统通告表Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysAnnouncement */
    sysAnnouncement:SysAnnouncement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysAnnouncement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新发布操作
 */
static doReleaseData(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/doReleaseData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新撤销操作
 */
static doReovkeData(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/doReovkeData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysAnnouncement */
    sysAnnouncement:SysAnnouncement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysAnnouncement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'busId':params['busId'],'busType':params['busType'],'cancelTime':params['cancelTime'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'dtTaskId':params['dtTaskId'],'endTime':params['endTime'],'flagModal':params['flagModal'],'id':params['id'],'msgAbstract':params['msgAbstract'],'msgCategory':params['msgCategory'],'msgContent':params['msgContent'],'msgType':params['msgType'],'openPage':params['openPage'],'openType':params['openType'],'priority':params['priority'],'sendStatus':params['sendStatus'],'sendTime':params['sendTime'],'sender':params['sender'],'startTime':params['startTime'],'titile':params['titile'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 业务id */
    busId?:string,
    /** 业务类型(email:邮件 bpm:流程) */
    busType?:string,
    /** 撤销时间 */
    cancelTime?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 钉钉task_id，用于撤回消息 */
    dtTaskId?:string,
    /** 结束时间 */
    endTime?:string,
    /** 是否需要弹窗 */
    flagModal?:number,
    /**  */
    id?:string,
    /** 摘要 */
    msgAbstract?:string,
    /** 消息类型1:通知公告2:系统消息 */
    msgCategory?:string,
    /** 内容 */
    msgContent?:string,
    /** 通告对象类型（USER:指定用户，ALL:全体用户） */
    msgType?:string,
    /** 组件/路由 地址 */
    openPage?:string,
    /** 打开方式 组件：component 路由：url */
    openType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 优先级（L低，M中，H高） */
    priority?:string,
    /** 发布状态（0未发布，1已发布，2已撤销） */
    sendStatus?:string,
    /** 发布时间 */
    sendTime?:string,
    /** 发布人 */
    sender?:string,
    /** 开始时间 */
    startTime?:string,
    /**  */
    titile?:string,
    /** 发布人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 指定用户 */
    userIds?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 补充用户数据，并返回系统消息
 */
static listByUser(options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/listByUser'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通告查看详情页面（用于第三方APP）
 */
static show(params: {
              
    /** id */
    id:string,
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/show/{id}'
    url = url.replace('{id}',params['id']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 同步消息
 */
static syncNotic(params: {
              
    /** anntId */
    anntId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/annountCement/syncNotic'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class SystemApiControllerService {
    
/**
 * 根据公司编码获取公司下级部门和公司下所有用户信息
 */
static getDeptUserByOrgCode(params: {
              
    /** orgCode */
    orgCode:string,
          } = {} as any,options:IRequestOptions={}):Promise<Map[]> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/api/getDeptUserByOrgCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询参数配置列表
 */
static getSysConfigList(params: {
              
    /** 组件类型 */
    componentType?:string,
    /** 参数键名 */
    configKey?:string,
    /** 系统内置（1是;1是0否 */
    configType?:string,
    /** 参数键值 */
    configValue?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** 备注 */
    remark?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysConfig>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/api/getSysConfigList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 分类字典Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysCategory */
    sysCategory:SysCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 校验编码
 */
static checkCode(params: {
              
    /** code */
    code?:string,
    /** pid */
    pid?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/checkCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 子列表查询
 */
static childList(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysCategory>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/childList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysCategory */
    sysCategory:SysCategory,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysCategory']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'hasChild':params['hasChild'],'id':params['id'],'name':params['name'],'path':params['path'],'pid':params['pid'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据父级id批量查询子节点
 */
static getChildListBatch(params: {
              
    /** parentIds */
    parentIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/getChildListBatch'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * [列表页面]加载分类字典数据 用于值的替换
 */
static loadAllData(params: {
              
    /** code */
    code:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DictModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadAllData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分类字典控件数据回显[表单页面]
 */
static loadDictItem(params: {
              
    /** delNotExist */
    delNotExist?:boolean,
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadDictItem'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 加载单个数据 用于回显
 */
static loadOne(params: {
              
    /** field */
    field:string,
    /** val */
    val:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadOne'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据表名——显示字段-存储字段 pid 不查询子级，加载树
 */
static loadOnlyCateGoryTreeData(params: {
              
    /** code */
    code?:string,
    /** pid */
    pid?:string,
    /** sign */
    sign?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadOnlyCateGoryTreeData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 加载节点的子数据
 */
static loadTreeChildren(params: {
              
    /** pid */
    pid:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadTreeChildren'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分类字典树控件 加载节点
 */
static loadTreeData(params: {
              
    /** condition */
    condition?:string,
    /** pcode */
    pcode?:string,
    /** pid */
    pid?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadTreeData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 加载一级节点/如果是同步 则所有数据
 */
static loadTreeRoot(params: {
              
    /** async */
    async:boolean,
    /** pcode */
    pcode:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/loadTreeRoot'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static rootList(params: {
              
    /** 类型编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 是否有子节点 */
    hasChild?:string,
    /** 主键 */
    id?:string,
    /** 类型名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 类型路径 */
    path?:string,
    /** 父级节点 */
    pid?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysCategory>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/category/rootList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 用户登录Service {
    
/**
 * 图形验证码
 */
static checkCaptcha(params: {
              
    /** sysLoginModel */
    sysLoginModel:SysLoginModel,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkCaptcha'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysLoginModel']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取加密字符串
 */
static getEncryptedString(options:IRequestOptions={}):Promise<接口返回对象<Map_string_string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/getEncryptedString'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 登录接口
 */
static login(params: {
              
    /** sysLoginModel */
    sysLoginModel:SysLoginModel,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<LoginBo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/login'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysLoginModel']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取访问量
 */
static loginfo(options:IRequestOptions={}):Promise<接口返回对象<JSONObject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/loginfo'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout1(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout2(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout3(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout4(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout5(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出登录
 */
static logout6(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/logout'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * app登录
 */
static mLogin(params: {
              
    /** sysLoginModel */
    sysLoginModel:SysLoginModel,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<JSONObject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/mLogin'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysLoginModel']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 手机号登录接口
 */
static phoneLogin(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<LoginBo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/phoneLogin'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取验证码
 */
static randomImage(params: {
              
    /** key */
    key:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/randomImage/{key}'
    url = url.replace('{key}',params['key']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 登陆成功选择用户当前部门
 */
static selectDepart(params: {
              
    /** user */
    user:SysUser,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<JSONObject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/selectDepart'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['user']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 短信登录接口
 */
static sms(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sms'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取访问量
 */
static visitInfo(options:IRequestOptions={}):Promise<接口返回对象<List<VisitInfoVo>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/visitInfo'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 编码校验规则Service {
    
/**
 * 编码校验规则-添加
 */
static add(params: {
              
    /** sysCheckRule */
    sysCheckRule:sys_check_rule对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysCheckRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-通过Code校验传入的值
 */
static checkByCode(params: {
              
    /** ruleCode */
    ruleCode:string,
    /** value */
    value:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/checkByCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-编辑
 */
static edit(params: {
              
    /** sysCheckRule */
    sysCheckRule:sys_check_rule对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysCheckRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleCode':params['ruleCode'],'ruleDescription':params['ruleDescription'],'ruleJson':params['ruleJson'],'ruleName':params['ruleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 规则Code */
    ruleCode?:string,
    /** 规则描述 */
    ruleDescription?:string,
    /** 规则JSON */
    ruleJson?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编码校验规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/checkRule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 用户表Service {
    
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe1(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe2(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe3(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe4(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe5(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * pdf预览Iframe
 */
static pdfPreviewIframe6(params: {
              
    /**  */
    model?:object,
    /**  */
    reference?:boolean,
    /**  */
    status?:string,
    /**  */
    viewContentType?:string,
    /**  */
    viewName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/pdf/pdfPreviewIframe'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'model':params['model'],'reference':params['reference'],'status':params['status'],'view.contentType':params['viewContentType'],'viewName':params['viewName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful1(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful2(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful3(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful4(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful5(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 中转HTTP请求，解决跨域问题
 */
static transitResTful6(params: {
              
    /** url */
    url:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/transitRESTful'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'url':params['url']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 文件上传统一方法
 */
static upload(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/common/upload'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户-添加
 */
static add(params: {
              
    /** addUserBo */
    addUserBo:新增用户bo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['addUserBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 给指定角色添加用户
 */
static addSysUserRole(params: {
              
    /** sysUserRoleVO */
    sysUserRoleVo:SysUserRoleVO,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/addSysUserRole'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysUserRoleVo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户管理-人员管理添加到用户表
 */
static addUser(params: {
              
    /** memberUserManagers */
    memberUserManagers:MemberUserManager[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/addUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['memberUserManagers']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  移动端修改用户信息
 */
static appEdit(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/appEdit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  移动端查询部门用户信息
 */
static appQueryByDepartId(params: {
              
    /** departId */
    departId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/appQueryByDepartId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  移动端查询用户信息(通过用户名模糊查询)
 */
static appQueryUser(params: {
              
    /** keyword */
    keyword?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/appQueryUser'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 【APP端接口】获取用户列表  根据用户名和真实名 模糊匹配
 */
static appUserList(params: {
              
    /** keyword */
    keyword?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** syncFlow */
    syncFlow?:string,
    /** username */
    username?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/appUserList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 修改密码
 */
static changePassword(params: {
              
    /** sysUser */
    sysUser:SysUser,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/changePassword'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysUser']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 校验用户账号是否唯一
 */
static checkOnlyUser(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<boolean>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/checkOnlyUser'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户-删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  彻底删除用户
 */
static deleteRecycleBin(params: {
              
    /** userIds */
    userIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteRecycleBin'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除指定机构的用户关系
 */
static deleteUserInDepart(params: {
              
    /** depId */
    depId:string,
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteUserInDepart'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'depId':params['depId'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除指定机构的用户关系
 */
static deleteUserInDepartBatch(params: {
              
    /** depId */
    depId:string,
    /** userIds */
    userIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteUserInDepartBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'depId':params['depId'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除指定角色的用户关系
 */
static deleteUserRole(params: {
              
    /** roleId */
    roleId:string,
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteUserRole'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'roleId':params['roleId'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除指定角色的用户关系
 */
static deleteUserRoleBatch(params: {
              
    /** roleId */
    roleId:string,
    /** userIds */
    userIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/deleteUserRoleBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'roleId':params['roleId'],'userIds':params['userIds']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo1(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo11(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo12(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo13(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo14(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo15(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static demo16(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/demo1'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门用户列表
 */
static departUserList(params: {
              
    /** depId */
    depId?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** username */
    username?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/departUserList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户-编辑
 */
static edit(params: {
              
    /** addUserBo */
    addUserBo:新增用户bo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['addUserBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 给指定部门添加对应的用户
 */
static editSysDepartWithUser(params: {
              
    /** sysDepartUsersVO */
    sysDepartUsersVo:SysDepartUsersVO,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/editSysDepartWithUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDepartUsersVo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户基本数据-编辑
 */
static editSysUser(params: {
              
    /** sysUser */
    sysUser:SysUser,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/editSysUser'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysUser']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 冻结&解冻用户
 */
static frozenBatch(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/frozenBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 生成在添加用户情况下没有主键的问题,返回给前端,根据该id绑定部门数据
 */
static generateUserId(options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/generateUserId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询当前用户的所有部门/当前部门编码
 */
static getCurrentUserDeparts(options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/getCurrentUserDeparts'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  根对象里面的属性值作in查询 属性可能会变 用户组件用到
 */
static getMultiUser(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<SysUser[]> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/getMultiUser'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据TOKEN获取用户的部分信息（返回的数据是可供表单设计器使用的数据）
 */
static getUserSectionInfoByToken(params: {
              
    /** token */
    token?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/getUserSectionInfoByToken'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取用户列表数据
 */
static list(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询·内部·所有用户
 */
static internal(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/list/internal'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询·第三方·所有用户
 */
static third(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/list/third'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户更改密码
 */
static passwordChange(params: {
              
    /** password */
    password:string,
    /** phone */
    phone:string,
    /** smscode */
    smscode:string,
    /** username */
    username:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/passwordChange'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户手机号验证
 */
static phoneVerification(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/phoneVerification'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  还原被逻辑删除的用户
 */
static putRecycleBin(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/putRecycleBin'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询某个用户
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量查询
 */
static queryByIds(params: {
              
    /** userIds */
    userIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryByIds'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据 orgCode 查询用户，包括子部门下的用户
 */
static queryByOrgCode(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryByOrgCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据 orgCode 查询用户，包括子部门下的用户
 */
static queryByOrgCodeForAddressList(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryByOrgCodeForAddressList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  根据userid获取用户信息和部门员工信息
 */
static queryChildrenByUsername(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryChildrenByUsername'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据部门id查询用户信息
 */
static queryUserByDepId(params: {
              
    /** id */
    id:string,
    /** realname */
    realname?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryUserByDepId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据部门id列表查询用户信息·已废弃
 */
static queryUserByDepIdList(params: {
              
    /** idList */
    idList:string[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryUserByDepIdList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户选择组件 专用  根据用户账号或部门分页查询
 */
static queryUserComponentData(params: {
              
    /** departId */
    departId?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** realname */
    realname?:string,
    /** username */
    username?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryUserComponentData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询某个用户角色
 */
static queryUserRole(params: {
              
    /** userid */
    userid:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/queryUserRole'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  获取被逻辑删除的用户列表，无分页
 */
static recycleBin(options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/recycleBin'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户注册接口
 */
static register(params: {
              
    /** 同步工作流引擎1同步0不同步 */
    activitiSync?:number,
    /** 头像 */
    avatar?:string,
    /** 生日 */
    birthday?:string,
    /** 设备id uniapp推送用 */
    clientId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:number,
    /** 负责部门 */
    departIds?:string,
    /** 电子邮件1 */
    email?:string,
    /** id */
    id?:string,
    /** 部门code(当前选择登录部门) */
    orgCode?:string,
    /** 部门名称 */
    orgCodeTxt?:string,
    /** 密码 */
    password?:string,
    /** 电话 */
    phone?:string,
    /** 职务，关联职务表 */
    post?:string,
    /** 真实姓名 */
    realname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    relTenantIds?:string,
    /** md5密码盐 */
    salt?:string,
    /** 性别（1：男 2：女） */
    sex?:number,
    /** smscode */
    smscode?:string,
    /** 状态(1：正常  2：冻结 ） */
    status?:number,
    /** 座机号 */
    telephone?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    userIdentity?:number,
    /** 用户账号 */
    username?:string,
    /** 工号，唯一键 */
    workNo?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<JSONObject>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/register'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'activitiSync':params['activitiSync'],'avatar':params['avatar'],'birthday':params['birthday'],'clientId':params['clientId'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departIds':params['departIds'],'email':params['email'],'id':params['id'],'orgCode':params['orgCode'],'orgCodeTxt':params['orgCodeTxt'],'password':params['password'],'phone':params['phone'],'post':params['post'],'realname':params['realname'],'relTenantIds':params['relTenantIds'],'salt':params['salt'],'sex':params['sex'],'smscode':params['smscode'],'status':params['status'],'telephone':params['telephone'],'updateBy':params['updateBy'],'updateTime':params['updateTime'],'userIdentity':params['userIdentity'],'username':params['username'],'workNo':params['workNo']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  移动端保存设备信息
 */
static saveClientId(params: {
              
    /** clientId */
    clientId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/saveClientId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 *  根据用户名修改手机号
 */
static updateMobile(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/updateMobile'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 首页用户重置密码
 */
static updatePassword(params: {
              
    /** updatePasswordBo */
    updatePasswordBo:修改用户密码bo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/updatePassword'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['updatePasswordBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询指定用户和部门关联的数据
 */
static userDepartList(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DepartIdModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/userDepartList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据角色获取用户list
 */
static userRoleList(params: {
              
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 角色id */
    roleId?:string,
    /** 用户名称 */
    username?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUser>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/user/userRoleList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 参数配置Service {
    
/**
 * 参数配置-添加
 */
static add(params: {
              
    /** sysConfig */
    sysConfig:SysConfig,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysConfig']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 参数配置-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 参数配置-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 参数配置-编辑
 */
static edit(params: {
              
    /** sysConfig */
    sysConfig:SysConfig,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysConfig']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询参数配置列表
 */
static list(params: {
              
    /** 组件类型 */
    componentType?:string,
    /** 参数键名 */
    configKey?:string,
    /** 系统内置（1是;1是0否 */
    configType?:string,
    /** 参数键值 */
    configValue?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remark?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysConfig>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 参数配置-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysConfig>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/config/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class SysDataLogControllerService {
    
/**
 * 分页查询
 */
static list(params: {
              
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 数据内容 */
    dataContent?:string,
    /** 数据ID */
    dataId?:string,
    /** 表名 */
    dataTable?:string,
    /** 版本号 */
    dataVersion?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysDataLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataLog/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询对比数据
 */
static queryCompareList(options:IRequestOptions={}):Promise<接口返回对象<List<SysDataLog>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataLog/queryCompareList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询版本信息
 */
static queryDataVerList(options:IRequestOptions={}):Promise<接口返回对象<List<SysDataLog>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataLog/queryDataVerList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 多数据源管理Service {
    
/**
 * 多数据源管理-添加
 */
static add(params: {
              
    /** sysDataSource */
    sysDataSource:sys_data_source对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDataSource']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 多数据源管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 多数据源管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 多数据源管理-编辑
 */
static edit(params: {
              
    /** sysDataSource */
    sysDataSource:sys_data_source对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDataSource']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'code':params['code'],'createBy':params['createBy'],'createTime':params['createTime'],'dbDriver':params['dbDriver'],'dbName':params['dbName'],'dbPassword':params['dbPassword'],'dbType':params['dbType'],'dbUrl':params['dbUrl'],'dbUsername':params['dbUsername'],'id':params['id'],'name':params['name'],'remark':params['remark'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 多数据源管理-分页列表查询
 */
static list(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_sys_data_source对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * queryOptions
 */
static options(params: {
              
    /** 数据源编码 */
    code?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 驱动类 */
    dbDriver?:string,
    /** 数据库名称 */
    dbName?:string,
    /** 密码 */
    dbPassword?:string,
    /** 数据库类型 */
    dbType?:string,
    /** 数据源地址 */
    dbUrl?:string,
    /** 用户名 */
    dbUsername?:string,
    /** id */
    id?:string,
    /** 数据源名称 */
    name?:string,
    /** 备注 */
    remark?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/options'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 多数据源管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dataSource/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统字典Service {
    
/**
 * 新增
 */
static add(params: {
              
    /** sysDict */
    sysDict:SysDict,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDict']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 逻辑删除的字段，进行取回
 */
static back(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/back/{id}'
    url = url.replace('{id}',params['id']+'')

    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询被删除的列表
 */
static deleteList(options:IRequestOptions={}):Promise<接口返回对象<List<SysDict>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/deleteList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 物理删除
 */
static deletePhysic(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/deletePhysic/{id}'
    url = url.replace('{id}',params['id']+'')

    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysDict */
    sysDict:SysDict,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDict']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'description':params['description'],'dictCode':params['dictCode'],'dictName':params['dictName'],'dictType':params['dictType'],'id':params['id'],'type':params['type'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取字典数据 【接口签名验证】
 */
static getDictItems(params: {
              
    /** dictCode */
    dictCode:string,
    /** sign */
    sign?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DictModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/getDictItems/{dictCode}'
    url = url.replace('{dictCode}',params['dictCode']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取字典数据
 */
static getDictText(params: {
              
    /** dictCode */
    dictCode:string,
    /** key */
    key:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/getDictText/{dictCode}/{key}'
    url = url.replace('{dictCode}',params['dictCode']+'')
url = url.replace('{key}',params['key']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询【系统字典】列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysDict>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 大数据量的字典表 走异步加载  即前端输入内容过滤数据
 */
static loadDict(params: {
              
    /** dictCode */
    dictCode:string,
    /** keyword */
    keyword:string,
    /** pageSize */
    pageSize?:number,
    /** sign */
    sign?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DictModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/loadDict/{dictCode}'
    url = url.replace('{dictCode}',params['dictCode']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据字典code加载字典text 返回
 */
static loadDictItem(params: {
              
    /** delNotExist */
    delNotExist?:boolean,
    /** dictCode */
    dictCode:string,
    /** key */
    key:string,
    /** sign */
    sign?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/loadDictItem/{dictCode}'
    url = url.replace('{dictCode}',params['dictCode']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 【给表单设计器的表字典使用】下拉搜索模式，有值时动态拼接数据
 */
static loadDictOrderByValue(params: {
              
    /** dictCode */
    dictCode:string,
    /** keyword */
    keyword:string,
    /** pageSize */
    pageSize?:number,
    /** sign */
    sign?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DictModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/loadDictOrderByValue/{dictCode}'
    url = url.replace('{dictCode}',params['dictCode']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据表名——显示字段-存储字段 pid 不查询子级，加载树
 */
static loadOnlyTreeData(params: {
              
    /** code */
    code:string,
    /** condition */
    condition:string,
    /** hasChildField */
    hasChildField:string,
    /** pid */
    pid:string,
    /** pidField */
    pidField:string,
    /** sign */
    sign?:string,
    /** tableName */
    tableName:string,
    /** text */
    text:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/loadOnlyTreeData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据表名——显示字段-存储字段 pid 加载树形数据
 */
static loadTreeData(params: {
              
    /** code */
    code:string,
    /** condition */
    condition:string,
    /** hasChildField */
    hasChildField:string,
    /** pid */
    pid:string,
    /** pidField */
    pidField:string,
    /** sign */
    sign?:string,
    /** tableName */
    tableName:string,
    /** text */
    text:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeSelectModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/loadTreeData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取全部字典数据
 */
static queryAllDictItems(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/queryAllDictItems'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 【APP接口】根据字典配置查询表字典数据
 */
static queryTableData(params: {
              
    /**  */
    code?:string,
    /**  */
    codeValue?:string,
    /**  */
    keyword?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** sign */
    sign?:string,
    /**  */
    table?:string,
    /**  */
    text?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<DictModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/queryTableData'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache1(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache2(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache3(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache4(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache5(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 刷新缓存
 */
static refleshCache6(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/refleshCache'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取树形字典数据
 */
static treeList(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态 */
    delFlag?:number,
    /** 描述 */
    description?:string,
    /** 字典编码 */
    dictCode?:string,
    /** 字典名称 */
    dictName?:string,
    /** 字典类别 */
    dictType?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 字典类型 */
    type?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDictTree>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dict/treeList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统字典项Service {
    
/**
 * 新增字典详情
 */
static add(params: {
              
    /** sysDictItem */
    sysDictItem:SysDictItem,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDictItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDictItem']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除字典数据
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDictItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除字典数据
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDictItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 字典重复校验接口
 */
static dictItemCheck(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** 字典id */
    dictId?:string,
    /** id */
    id?:string,
    /** 颜色 */
    itemColor?:string,
    /** 字典项文本 */
    itemText?:string,
    /** 字典项值 */
    itemValue?:string,
    /** 排序 */
    sortOrder?:number,
    /** 状态（1启用 0不启用） */
    status?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/dictItemCheck'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 修改字典详情
 */
static edit(params: {
              
    /** sysDictItem */
    sysDictItem:SysDictItem,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDictItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDictItem']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询【系统字典项】列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** 字典id */
    dictId?:string,
    /** id */
    id?:string,
    /** 颜色 */
    itemColor?:string,
    /** 字典项文本 */
    itemText?:string,
    /** 字典项值 */
    itemValue?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 排序 */
    sortOrder?:number,
    /** 状态（1启用 0不启用） */
    status?:number,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysDictItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/dictItem/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 重复校验Service {
    
/**
 * 重复校验接口
 */
static check(params: {
              
    /** 数据ID */
    dataId?:string,
    /** 字段名 */
    fieldName?:string,
    /** 字段值 */
    fieldVal?:string,
    /** 表名 */
    tableName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/duplicate/check'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 填值规则Service {
    
/**
 * 填值规则-添加
 */
static add(params: {
              
    /** sysFillRule */
    sysFillRule:sys_fill_rule对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysFillRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 填值规则-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 填值规则-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 填值规则-编辑
 */
static edit(params: {
              
    /** sysFillRule */
    sysFillRule:sys_fill_rule对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysFillRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 过 ruleCode 执行自定义填值规则
 */
static executeRuleByCode(params: {
              
    /** formData */
    formData:object,
    /** ruleCode */
    ruleCode:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/executeRuleByCode/{ruleCode}'
    url = url.replace('{ruleCode}',params['ruleCode']+'')

    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['formData']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量通过 ruleCode 执行自定义填值规则
 */
static executeRuleByCodeBatch(params: {
              
    /** ruleData */
    ruleData:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/executeRuleByCodeBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['ruleData']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'id':params['id'],'ruleClass':params['ruleClass'],'ruleCode':params['ruleCode'],'ruleName':params['ruleName'],'ruleParams':params['ruleParams'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 填值规则-分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 主键ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 规则实现类 */
    ruleClass?:string,
    /** 规则Code */
    ruleCode?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则参数 */
    ruleParams?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 填值规则-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 测试 ruleCode
 */
static testFillRule(params: {
              
    /** ruleCode */
    ruleCode:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/fillRule/testFillRule'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class Gateway路由管理Service {
    
/**
 * 清除redis
 */
static clearRedis(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/gatewayRoute/clearRedis'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/gatewayRoute/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询分页
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /**  */
    filters?:string,
    /** 主键 */
    id?:string,
    /** 服务名 */
    name?:string,
    /** 保留数据 */
    persistable?:number,
    /**  */
    predicates?:string,
    /** 是否重试 */
    retryable?:number,
    /** 路由ID */
    routerId?:string,
    /** 在接口文档中展示 */
    showApi?:number,
    /** 状态 */
    status?:number,
    /** 忽略前缀 */
    stripPrefix?:number,
    /** 服务地址 */
    uri?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/gatewayRoute/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新所有
 */
static updateAll(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/gatewayRoute/updateAll'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统日志表前端控制器Service {
    
/**
 * 删除单个日志记录
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/log/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量，全部清空日志记录
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/log/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询日志记录
 */
static list(params: {
              
    /** 耗时 */
    costTime?:number,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** id */
    id?:string,
    /** IP */
    ip?:string,
    /** 操作详细日志 */
    logContent?:string,
    /** 日志类型（1登录日志，2操作日志） */
    logType?:number,
    /** 请求方法 */
    method?:string,
    /** 操作类型（1查询，2添加，3修改，4删除,5导入，6导出） */
    operateType?:number,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 请求参数 */
    requestParam?:string,
    /** 请求类型 */
    requestType?:string,
    /** 请求路径 */
    requestUrl?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 操作人用户账户 */
    userid?:string,
    /** 操作人用户名称 */
    username?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysLog>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/log/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 系统im聊天Service {
    
/**
 * 新增聊天群组
 */
static addChatGroup(params: {
              
    /** 聊天群组实体(包括分组名称，用户list,分组类型 */
    chatGroup?:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/AddChatGroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单添加
 */
static addChatUserBlackList(params: {
              
    /** chatUserBlackList */
    chatUserBlackList:ChatUserBlackList,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/AddChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatUserBlackList']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 邀请新人
 */
static addUser(params: {
              
    /** chatGroupInviteBo */
    chatGroupInviteBo:ChatGroupInviteBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/AddUser'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroupInviteBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 移除黑名单
 */
static delChatUserBlackList(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/DelChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 解散群聊
 */
static delGroup(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/DelGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑群信息
 */
static editgroup(params: {
              
    /** chatGroup */
    chatGroup:ChatGroup,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ChatGroup>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/Editgroup'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['chatGroup']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 黑名单显示
 */
static findChatUserBlackList(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/FindChatUserBlackList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取离线消息并删除
 */
static getOfflineMessageAndRemove(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/GetOfflineMessageAndRemove'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 退出群聊
 */
static quitGroup(params: {
              
    /** groupId */
    groupId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/QuitGroup'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'groupId':params['groupId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 前端发送消息请求接口
 */
static sendToAll(params: {
              
    /** sendMessageBo */
    sendMessageBo:SendMessageBo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/SendToAll'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sendMessageBo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取用户所在的群聊
 */
static getUserGroup(options:IRequestOptions={}):Promise<接口返回对象<List<ChatGroup>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysIM/getUserGroup'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 消息smsService {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysMessage */
    sysMessage:SysSms,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysMessage']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysMessage */
    sysMessage:SysSms,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysMessage']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 推送内容 */
    esContent?:string,
    /** 推送所需参数Json格式 */
    esParam?:string,
    /** 接收人 */
    esReceiver?:string,
    /** 推送失败原因 */
    esResult?:string,
    /** 发送次数 */
    esSendNum?:number,
    /** 推送状态 0未推送 1推送成功 2推送失败 */
    esSendStatus?:string,
    /** 推送时间 */
    esSendTime?:string,
    /** 消息标题 */
    esTitle?:string,
    /** 推送方式：1短信 2邮件 3微信 */
    esType?:string,
    /** ID */
    id?:string,
    /** 备注 */
    remark?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 推送内容 */
    esContent?:string,
    /** 推送所需参数Json格式 */
    esParam?:string,
    /** 接收人 */
    esReceiver?:string,
    /** 推送失败原因 */
    esResult?:string,
    /** 发送次数 */
    esSendNum?:number,
    /** 推送状态 0未推送 1推送成功 2推送失败 */
    esSendStatus?:string,
    /** 推送时间 */
    esSendTime?:string,
    /** 消息标题 */
    esTitle?:string,
    /** 推送方式：1短信 2邮件 3微信 */
    esType?:string,
    /** ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remark?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysSms>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysSms>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessage/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 消息模板Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysMessageTemplate */
    sysMessageTemplate:SysSmsTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysMessageTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysMessageTemplate */
    sysMessageTemplate:SysSmsTemplate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysMessageTemplate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** ID */
    id?:string,
    /** 模板CODE */
    templateCode?:string,
    /** 模板内容 */
    templateContent?:string,
    /** 模板标题 */
    templateName?:string,
    /** 模板测试json */
    templateTestJson?:string,
    /** 模板类型 */
    templateType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** ID */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 模板CODE */
    templateCode?:string,
    /** 模板内容 */
    templateContent?:string,
    /** 模板标题 */
    templateName?:string,
    /** 模板测试json */
    templateTestJson?:string,
    /** 模板类型 */
    templateType?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysSmsTemplate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysSmsTemplate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 发送消息
 */
static sendMsg(params: {
              
    /** msgParams */
    msgParams:MsgParams,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysSmsTemplate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/message/sysMessageTemplate/sendMsg'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['msgParams']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 在线用户Service {
    
/**
 * 强退用户
 */
static forceLogout(params: {
              
    /** online */
    online:SysUserOnlineVO,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/online/forceLogout'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['online']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 菜单权限Service {
    
/**
 * 添加菜单
 */
static add(params: {
              
    /** permission */
    permission:SysPermission,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermission>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['permission']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 添加菜单权限数据
 */
static addPermissionRule(params: {
              
    /** sysPermissionDataRule */
    sysPermissionDataRule:SysPermissionDataRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermissionDataRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/addPermissionRule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysPermissionDataRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除菜单
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermission>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除菜单
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermission>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 删除菜单权限数据
 */
static deletePermissionRule(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermissionDataRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/deletePermissionRule'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑菜单
 */
static edit(params: {
              
    /** permission */
    permission:SysPermission,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermission>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/edit'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['permission']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑菜单
 */
static edit1(params: {
              
    /** permission */
    permission:SysPermission,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermission>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['permission']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新菜单规则
 */
static editPermissionRule(params: {
              
    /** sysPermissionDataRule */
    sysPermissionDataRule:SysPermissionDataRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermissionDataRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/editPermissionRule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysPermissionDataRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新菜单规则
 */
static editPermissionRule1(params: {
              
    /** sysPermissionDataRule */
    sysPermissionDataRule:SysPermissionDataRule,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysPermissionDataRule>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/editPermissionRule'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysPermissionDataRule']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据菜单id来获取其对应的权限数据
 */
static getPermRuleListByPermId(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** id */
    id?:string,
    /** 对应的菜单id */
    permissionId?:string,
    /** 字段 */
    ruleColumn?:string,
    /** 条件 */
    ruleConditions?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则值 */
    ruleValue?:string,
    /** 状态值 1有效 0无效 */
    status?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysPermissionDataRule>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/getPermRuleListByPermId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 系统菜单列表(一级菜单)
 */
static getSystemMenuList(options:IRequestOptions={}):Promise<接口返回对象<List<SysPermissionTree>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/getSystemMenuList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询子菜单
 */
static getSystemSubmenu(params: {
              
    /** parentId */
    parentId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysPermissionTree>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/getSystemSubmenu'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询子菜单
 */
static getSystemSubmenuBatch(params: {
              
    /** parentIds */
    parentIds:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/getSystemSubmenuBatch'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询用户拥有的菜单权限和按钮权限
 */
static getUserPermissionByToken(options:IRequestOptions={}):Promise<接口返回对象<UserPermissionVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/getUserPermissionByToken'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 加载数据节点
 */
static list(options:IRequestOptions={}):Promise<接口返回对象<List<SysPermissionTree>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表
 */
static queryDepartPermission(params: {
              
    /** departId */
    departId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/queryDepartPermission'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 异步加载数据节点
 */
static queryListAsync(params: {
              
    /** pid */
    pid?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<TreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/queryListAsync'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询菜单权限数据
 */
static queryPermissionRule(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** id */
    id?:string,
    /** 对应的菜单id */
    permissionId?:string,
    /** 字段 */
    ruleColumn?:string,
    /** 条件 */
    ruleConditions?:string,
    /** 规则名称 */
    ruleName?:string,
    /** 规则值 */
    ruleValue?:string,
    /** 状态值 1有效 0无效 */
    status?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysPermissionDataRule>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/queryPermissionRule'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询角色授权
 */
static queryRolePermission(params: {
              
    /** roleId */
    roleId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/queryRolePermission'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取全部的权限树
 */
static queryTreeList(options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/queryTreeList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存部门授权
 */
static saveDepartPermission(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/saveDepartPermission'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存角色授权
 */
static saveRolePermission(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/permission/saveRolePermission'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 职务表Service {
    
/**
 * 职务表-添加
 */
static add(params: {
              
    /** sysPosition */
    sysPosition:sys_position对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysPosition']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-编辑
 */
static edit(params: {
              
    /** sysPosition */
    sysPosition:sys_position对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysPosition']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-分页列表查询
 */
static list(params: {
              
    /** 职务编码 */
    code?:string,
    /** 公司id */
    companyId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** id */
    id?:string,
    /** 职务名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 职级 */
    postRank?:string,
    /** 组织机构编码 */
    sysOrgCode?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-通过code查询
 */
static queryByCode(params: {
              
    /** code */
    code:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/queryByCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 职务表-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_position对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/position/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 定时任务接口Service {
    
/**
 * 暂停定时任务
 */
static pause(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/quartzJob/pause'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 恢复定时任务
 */
static resume(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/quartzJob/resume'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 角色表前端控制器Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** role */
    role:SysRole,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['role']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 校验角色编码唯一
 */
static checkRoleCode(params: {
              
    /** id */
    id?:string,
    /** roleCode */
    roleCode?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<boolean>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/checkRoleCode'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存数据规则至角色菜单关联表
 */
static datarule(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/datarule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据规则数据
 */
static datarule1(params: {
              
    /** permissionId */
    permissionId:string,
    /** roleId */
    roleId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/datarule/{permissionId}/{roleId}'
    url = url.replace('{permissionId}',params['permissionId']+'')
url = url.replace('{roleId}',params['roleId']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** role */
    role:SysRole,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['role']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 角色编码 */
    roleCode?:string,
    /** 角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysRole>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户角色授权功能，查询菜单权限树
 */
static queryTreeList(options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/queryTreeList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询全部
 */
static queryall(options:IRequestOptions={}):Promise<接口返回对象<List<SysRole>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/role/queryall'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 用户通告阅读标记表Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysAnnouncementSend */
    sysAnnouncementSend:SysAnnouncementSend,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysAnnouncementSend']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysAnnouncementSend */
    sysAnnouncementSend:SysAnnouncementSend,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysAnnouncementSend']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 更新用户系统消息阅读状态
 */
static editByAnntIdAndUserId(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/editByAnntIdAndUserId'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取我的消息
 */
static getMyAnnouncementSend(params: {
              
    /**  */
    anntId?:string,
    /**  */
    bizSource?:string,
    /**  */
    busId?:string,
    /**  */
    busType?:string,
    /**  */
    id?:string,
    /**  */
    msgAbstract?:string,
    /**  */
    msgCategory?:string,
    /**  */
    msgContent?:string,
    /**  */
    openPage?:string,
    /**  */
    openType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /**  */
    priority?:string,
    /**  */
    readFlag?:string,
    /**  */
    sendTime?:string,
    /**  */
    sender?:string,
    /**  */
    titile?:string,
    /**  */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_AnnouncementSendModel>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/getMyAnnouncementSend'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 通告id */
    anntId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 阅读状态（0未读，1已读） */
    readFlag?:string,
    /** 阅读时间 */
    readTime?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户id */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键已读
 */
static readAll(options:IRequestOptions={}):Promise<接口返回对象<SysAnnouncementSend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysAnnouncementSend/readAll'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 部门表前端控制器Service {
    
/**
 * 添加新数据 添加用户新建的部门对象数据,并保存到数据库
 */
static add(params: {
              
    /** sysDepart */
    sysDepart:SysDepart,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDepart']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除 根据前端请求的多个ID,对数据库执行删除相关部门数据的操作
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑数据 编辑部门的部分数据,并保存到数据库
 */
static edit(params: {
              
    /** sysDepart */
    sysDepart:SysDepart,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDepart']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 地址 */
    address?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建日期 */
    createTime?:string,
    /** 删除状态（0，正常，1已删除） */
    delFlag?:string,
    /** 机构/部门名称 */
    departName?:string,
    /** 缩写 */
    departNameAbbr?:string,
    /** 英文名 */
    departNameEn?:string,
    /** 排序 */
    departOrder?:number,
    /** 描述 */
    description?:string,
    /** 传真 */
    fax?:string,
    /** ID */
    id?:string,
    /** 是否为服务单位（是为1） */
    ifService?:number,
    /** 备注 */
    memo?:string,
    /** 手机号 */
    mobile?:string,
    /** 机构类别 1公司，2组织机构，2岗位 */
    orgCategory?:string,
    /** 机构编码 */
    orgCode?:string,
    /** 机构类型 */
    orgType?:string,
    /** 父机构ID */
    parentId?:string,
    /** 对接企业微信的ID */
    qywxIdentifier?:string,
    /**  状态（1启用，0不启用） */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新日期 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'address':params['address'],'createBy':params['createBy'],'createTime':params['createTime'],'delFlag':params['delFlag'],'departName':params['departName'],'departNameAbbr':params['departNameAbbr'],'departNameEn':params['departNameEn'],'departOrder':params['departOrder'],'description':params['description'],'fax':params['fax'],'id':params['id'],'ifService':params['ifService'],'memo':params['memo'],'mobile':params['mobile'],'orgCategory':params['orgCategory'],'orgCode':params['orgCode'],'orgType':params['orgType'],'parentId':params['parentId'],'qywxIdentifier':params['qywxIdentifier'],'status':params['status'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据部门编码获取部门信息
 */
static getDepartName(params: {
              
    /** orgCode */
    orgCode:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/getDepartName'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查询部门下级部门
 */
static getTreeDepartmentListById(params: {
              
    /** departmentId */
    departmentId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/getTreeDepartmentListById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据部门id获取用户信息
 */
static getUsersByDepartId(params: {
              
    /** exhibitionName */
    exhibitionName?:string,
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysUser>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/getUsersByDepartId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询所有部门信息
 */
static listAll(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepart>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/listAll'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 任务中心-查看当前部门下级部门以及平级部门
 */
static lowerLevelDepartmentList(params: {
              
    /** departmentId */
    departmentId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/lowerLevelDepartmentList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取某个部门的所有父级部门的ID
 */
static queryAllParentId(params: {
              
    /** departId */
    departId?:string,
    /** orgCode */
    orgCode?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryAllParentId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 根据id查询部门
 */
static queryById(params: {
              
    /** id */
    id?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysDepart>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 派单规则-选择接单部门
 */
static queryByOrderDepartment(params: {
              
    /** taskType */
    taskType:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryByOrderDepartment'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 异步查询部门list
 */
static queryDepartTreeSync(params: {
              
    /** pid */
    pid?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryDepartTreeSync'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 添加或编辑页面对该方法发起请求,以树结构形式加载所有部门的名称,方便用户的操作
 */
static queryIdTree(options:IRequestOptions={}):Promise<接口返回对象<List<DepartIdModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryIdTree'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 查出我的部门,并以树结构数据格式响应给前端
 */
static queryMyDeptTreeList(options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryMyDeptTreeList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 查出所有部门,并以树结构数据格式响应给前端
 */
static queryTreeByKeyWord(params: {
              
    /** keyWord */
    keyWord?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryTreeByKeyWord'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 查出所有部门,并以树结构数据格式响应给前端
 */
static queryTreeList(options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryTreeList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 查出所有·内部·部门,并以树结构数据格式响应给前端
 */
static internal(options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryTreeList/internal'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据 查出所有·第三方·部门,并以树结构数据格式响应给前端
 */
static third(options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/queryTreeList/third'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门搜索功能方法,根据关键字模糊搜索相关部门
 */
static searchBy(params: {
              
    /** keyWord */
    keyWord:string,
    /** myDeptSearch */
    myDeptSearch?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysDepartTreeModel>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepart/searchBy'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 部门权限表Service {
    
/**
 * 部门权限表-添加
 */
static add(params: {
              
    /** sysDepartPermission */
    sysDepartPermission:sys_depart_permission对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDepartPermission']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存数据规则至部门菜单关联表
 */
static datarule(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/datarule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门管理授权查询数据规则数据
 */
static datarule1(params: {
              
    /** departId */
    departId:string,
    /** permissionId */
    permissionId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/datarule/{permissionId}/{departId}'
    url = url.replace('{departId}',params['departId']+'')
url = url.replace('{permissionId}',params['permissionId']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表-编辑
 */
static edit(params: {
              
    /** sysDepartPermission */
    sysDepartPermission:sys_depart_permission对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDepartPermission']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'dataRuleIds':params['dataRuleIds'],'departId':params['departId'],'id':params['id'],'permissionId':params['permissionId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表-分页列表查询
 */
static list(params: {
              
    /** 数据规则id */
    dataRuleIds?:string,
    /** 部门id */
    departId?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 权限id */
    permissionId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门权限表-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询角色授权
 */
static queryDeptRolePermission(params: {
              
    /** roleId */
    roleId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<string>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/queryDeptRolePermission'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 用户角色授权功能，查询菜单权限树
 */
static queryTreeListForDeptRole(params: {
              
    /** departId */
    departId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<Map_string_object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/queryTreeListForDeptRole'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存角色授权
 */
static saveDeptRolePermission(params: {
              
    /** json */
    json:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<string>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartPermission/saveDeptRolePermission'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['json']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 部门角色Service {
    
/**
 * 部门角色-添加
 */
static add(params: {
              
    /** sysDepartRole */
    sysDepartRole:sys_depart_role对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysDepartRole']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 保存数据规则至角色菜单关联表
 */
static datarule(params: {
              
    /** jsonObject */
    jsonObject:object,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/datarule'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['jsonObject']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询数据规则数据
 */
static datarule1(params: {
              
    /** departId */
    departId:string,
    /** permissionId */
    permissionId:string,
    /** roleId */
    roleId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/datarule/{permissionId}/{departId}/{roleId}'
    url = url.replace('{departId}',params['departId']+'')
url = url.replace('{permissionId}',params['permissionId']+'')
url = url.replace('{roleId}',params['roleId']+'')

    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门角色-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门角色-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 新增部门角色用户
 */
static deptRoleUserAdd(params: {
              
    /** 新角色id */
    newRoleId:string,
    /** 原始角色id */
    oldRoleId:string,
    /** 用户id */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/deptRoleUserAdd'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'newRoleId':params['newRoleId'],'oldRoleId':params['oldRoleId'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门角色-编辑
 */
static edit(params: {
              
    /** sysDepartRole */
    sysDepartRole:sys_depart_role对象,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysDepartRole']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'createBy':params['createBy'],'createTime':params['createTime'],'departId':params['departId'],'description':params['description'],'id':params['id'],'roleCode':params['roleCode'],'roleName':params['roleName'],'updateBy':params['updateBy'],'updateTime':params['updateTime']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据用户id获取已设置部门角色
 */
static getDeptRoleByUserId(params: {
              
    /** departId */
    departId:string,
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<sys_depart_role_user对象>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/getDeptRoleByUserId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取部门下角色
 */
static getDeptRoleList(params: {
              
    /** departId */
    departId:string,
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<sys_depart_role对象>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/getDeptRoleList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门角色-分页列表查询
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 部门id */
    departId?:string,
    /** deptId */
    deptId?:string,
    /** 描述 */
    description?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 部门角色编码 */
    roleCode?:string,
    /** 部门角色名称 */
    roleName?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_sys_depart_role对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 部门角色-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<sys_depart_role对象>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysDepartRole/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 用户代理人设置Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysUserAgent */
    sysUserAgent:SysUserAgent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysUserAgent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** sysUserAgent */
    sysUserAgent:SysUserAgent,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysUserAgent']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls1(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('head', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls2(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls3(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls4(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls5(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('options', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 导出excel
 */
static exportXls6(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<ModelAndView> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/exportXls'
    
    
    const configs:IRequestConfig = getConfigs('patch', 'application/json', url, options)
    configs.params = {...configs.params,'agentUserName':params['agentUserName'],'createBy':params['createBy'],'createName':params['createName'],'createTime':params['createTime'],'endTime':params['endTime'],'id':params['id'],'startTime':params['startTime'],'status':params['status'],'sysCompanyCode':params['sysCompanyCode'],'sysOrgCode':params['sysOrgCode'],'updateBy':params['updateBy'],'updateName':params['updateName'],'updateTime':params['updateTime'],'userName':params['userName']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过excel导入数据
 */
static importExcel(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/importExcel'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 分页列表查询
 */
static list(params: {
              
    /** 代理人用户名 */
    agentUserName?:string,
    /** 创建人登录名称 */
    createBy?:string,
    /** 创建人名称 */
    createName?:string,
    /** 创建日期 */
    createTime?:string,
    /** 状态0无效1有效 */
    endTime?:string,
    /** 序号 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 代理开始时间 */
    startTime?:string,
    /** 状态0无效1有效 */
    status?:string,
    /** 所属公司 */
    sysCompanyCode?:string,
    /** 所属部门 */
    sysOrgCode?:string,
    /** 更新人登录名称 */
    updateBy?:string,
    /** 更新人名称 */
    updateName?:string,
    /** 更新日期 */
    updateTime?:string,
    /** 用户名 */
    userName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过userName查询
 */
static queryByUserName(params: {
              
    /** userName */
    userName:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysUserAgent>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/sysUserAgent/queryByUserName'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 租户配置信息Service {
    
/**
 * 添加
 */
static add(params: {
              
    /** sysTenant */
    sysTenant:SysTenant,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysTenant>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysTenant']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 编辑
 */
static edit(params: {
              
    /** tenant */
    tenant:SysTenant,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysTenant>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['tenant']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 获取列表数据
 */
static list(params: {
              
    /** 开始时间 */
    beginDate?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 结束时间 */
    endDate?:string,
    /** 编码 */
    id?:number,
    /** 名称 */
    name?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 状态 1正常 0冻结 */
    status?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysTenant>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysTenant>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询有效的 租户数据
 */
static queryList(params: {
              
    /** ids */
    ids?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<SysTenant>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/tenant/queryList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class Minio文件上传示例Service {
    
/**
 * 上传
 */
static uploadMinio(options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/sys/upload/uploadMinio'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 文件Service {
    
/**
 * 文件-添加
 */
static add(params: {
              
    /** sysFile */
    sysFile:SysFile,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['sysFile']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 文件-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 文件-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 文件-编辑
 */
static edit(params: {
              
    /** sysFile */
    sysFile:SysFile,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['sysFile']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询文件列表
 */
static list(params: {
              
    /** 业务ID */
    businessId?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除标识0-正常,1-已删除 */
    delFlag?:number,
    /** 文件大小 */
    fileLength?:number,
    /** 文件名称 */
    fileName?:string,
    /** 文件路径 */
    filePath?:string,
    /** 文件类型 */
    fileType?:string,
    /** ID */
    id?:string,
    /** 模块名称 */
    moduleCode?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 项目ID */
    projectId?:string,
    /** 文件备注 */
    remark?:string,
    /** 修改人 */
    updateBy?:string,
    /** 修改时间 */
    updateTime?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_SysFile>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 文件-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<SysFile>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/file/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 点检标准Service {
    
/**
 * 点检标准-添加
 */
static add(params: {
              
    /** exInspectionStandards */
    exInspectionStandards:ExInspectionStandards,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exInspectionStandards']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准-编辑
 */
static edit(params: {
              
    /** exInspectionStandards */
    exInspectionStandards:ExInspectionStandards,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exInspectionStandards']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询点检标准列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 设备分类id */
    equipmentTypeId?:string,
    /** 设备分类名称 */
    equipmentTypeName?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 备注 */
    remarks?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExInspectionStandards>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据周期类型查询标准列表
 */
static pageByPeriodLabel(params: {
              
    /** equipmentTypeName */
    equipmentTypeName?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** periodLabel */
    periodLabel:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExInspectionStandards>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/pageByPeriodLabel'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExInspectionStandards>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandards/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 国展_点检标准项目清单Service {
    
/**
 * 点检标准项目清单-添加
 */
static add(params: {
              
    /** exInspectionStandardsProjectDetails */
    exInspectionStandardsProjectDetails:ExInspectionStandardsProjectDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exInspectionStandardsProjectDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准项目清单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准项目清单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准项目清单-编辑
 */
static edit(params: {
              
    /** exInspectionStandardsProjectDetails */
    exInspectionStandardsProjectDetails:ExInspectionStandardsProjectDetails,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exInspectionStandardsProjectDetails']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备类型-查看设备类型
 */
static equipmentType(options:IRequestOptions={}):Promise<接口返回对象<List<DwiFacilityMenuTjgz>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/equipmentType'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 设备类型-查看设备类型-未配置点检库
 */
static equipmentTypeNoLibrary(options:IRequestOptions={}):Promise<接口返回对象<List<DwiFacilityMenuTjgz>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/equipmentTypeNoLibrary'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询点检标准项目清单列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** 点检内容 */
    inspectionContent?:string,
    /** 点检标准 */
    inspectionStandards?:string,
    /** 检验项目 */
    inspectionType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 周期标签(年、月、日可多选) */
    periodLabel?:string,
    /** 记录方式 */
    recordingMethod?:string,
    /** 上限/异常值 */
    standardValueOffline?:string,
    /** 下限/正常值 */
    standardValueOnline?:string,
    /** 点检标准id */
    standardsId?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExInspectionStandardsProjectDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 点检标准项目清单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExInspectionStandardsProjectDetails>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/inspectionStandardsDetails/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 一键发起需求Service {
    
/**
 * 一键发起需求-添加
 */
static add(params: {
              
    /** exOneClickRequirement */
    exOneClickRequirement:ExOneClickRequirement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exOneClickRequirement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-转为任务
 */
static convertToTask(params: {
              
    /** oneClickRequirementVo */
    oneClickRequirementVo:ExOneClickRequirementVo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/convertToTask'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['oneClickRequirementVo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-编辑
 */
static edit(params: {
              
    /** exOneClickRequirement */
    exOneClickRequirement:ExOneClickRequirement,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exOneClickRequirement']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询一键发起需求列表
 */
static list(params: {
              
    /** 文字描述 */
    charDescribe?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 主键 */
    id?:string,
    /** 发起人 */
    initiateBy?:string,
    /** 发起时间 */
    initiateTime?:string,
    /** 其他附件 */
    otherAttachments?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 识别文字 */
    recognizingText?:string,
    /** 状态（未受理；已受理） */
    reqStatus?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 语音附件 */
    voiceAttachments?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExOneClickRequirement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-根据需求类型与任务类型查询到表单
 */
static queryByFrom(params: {
              
    /** taskType */
    taskType:string,
    /** twoType */
    twoType:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ActRuFormExtend>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/queryByFrom'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 一键发起需求-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExOneClickRequirement>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/oneClick/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 重组订单Service {
    
/**
 * 重组订单-添加
 */
static add(params: {
              
    /** exRecombinationOrder */
    exRecombinationOrder:ExRecombinationOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exRecombinationOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 重组订单-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 重组订单-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 重组订单-编辑
 */
static edit(params: {
              
    /** exRecombinationOrder */
    exRecombinationOrder:ExRecombinationOrder,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exRecombinationOrder']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 重组订单-批量编辑
 */
static editBatch(params: {
              
    /** exRecombinationOrders */
    exRecombinationOrders:ExRecombinationOrder[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exRecombinationOrders']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询重组订单列表
 */
static list(params: {
              
    /** 附件 */
    attachment?:string,
    /** 批次id */
    batchId?:string,
    /** 公司名称 */
    company?:string,
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** departId */
    departId?:string,
    /** 展会名称 */
    exhibitionName?:string,
    /** 分组依据 */
    groupAccording?:string,
    /** 分组(规则)名称 */
    groupName?:string,
    /** 主键 */
    id?:string,
    /** 订单号 */
    orderNumber?:string,
    /** 订单来源 */
    orderSource?:string,
    /** 订单状态 */
    orderStatus?:string,
    /** 订单时间 */
    orderTime?:string,
    /** 订单类型（现场单、预订单） */
    orderType?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 展馆号 */
    pavilion?:string,
    /** 订单备注 */
    remark?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExRecombinationOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 重组订单-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExRecombinationOrder>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/reOrder/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 展会与用户中间Service {
    
/**
 * 展会与用户中间-添加
 */
static add(params: {
              
    /** exEventUserRelate */
    exEventUserRelate:ExEventUserRelate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exEventUserRelate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 跟展小组管理-为某个展会新增跟展人员
 */
static addUserToEvent(params: {
              
    /** exEventUserSaveVo */
    exEventUserSaveVo:ExEventUserSaveVo,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/addUserToEvent'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exEventUserSaveVo']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会与用户中间-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会与用户中间-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会与用户中间-编辑
 */
static edit(params: {
              
    /** exEventUserRelate */
    exEventUserRelate:ExEventUserRelate,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exEventUserRelate']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会与用户中间-批量编辑
 */
static editBatch(params: {
              
    /** exEventUserRelates */
    exEventUserRelates:ExEventUserRelate[],
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/editBatch'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exEventUserRelates']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 列表
 */
static followList(params: {
              
    /** 所属组别 */
    belongGroup?:string,
    /** 所属部门id */
    departIds?:string,
    /** 所属部门 */
    departNames?:string,
    /** 展会id */
    eventId?:string,
    /** 跟展状态（跟展中；未跟展） */
    followStatus?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 职位id */
    postId?:string,
    /** 职位名称 */
    postName?:string,
    /** 真实姓名 */
    realname?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户id */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEventUserSaveVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/followList'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'belongGroup':params['belongGroup'],'departIds':params['departIds'],'departNames':params['departNames'],'eventId':params['eventId'],'followStatus':params['followStatus'],'id':params['id'],'pageNo':params['pageNo'],'pageSize':params['pageSize'],'postId':params['postId'],'postName':params['postName'],'realname':params['realname'],'updateTime':params['updateTime'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 去重列表
 */
static followListDistinct(params: {
              
    /** 所属组别 */
    belongGroup?:string,
    /** 所属部门id */
    departIds?:string,
    /** 所属部门 */
    departNames?:string,
    /** 展会id */
    eventId?:string,
    /** 跟展状态（跟展中；未跟展） */
    followStatus?:string,
    /** id */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 职位id */
    postId?:string,
    /** 职位名称 */
    postName?:string,
    /** 真实姓名 */
    realname?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户id */
    userId?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEventUserSaveVo>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/followListDistinct'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    configs.params = {...configs.params,'belongGroup':params['belongGroup'],'departIds':params['departIds'],'departNames':params['departNames'],'eventId':params['eventId'],'followStatus':params['followStatus'],'id':params['id'],'pageNo':params['pageNo'],'pageSize':params['pageSize'],'postId':params['postId'],'postName':params['postName'],'realname':params['realname'],'updateTime':params['updateTime'],'userId':params['userId']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据userId查询负责展会
 */
static getEventListByUserId(params: {
              
    /** userId */
    userId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExEventManagement>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/getEventListByUserId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 根据deparId查询所属部门
 */
static getFollowListBydeparId(params: {
              
    /** deparId */
    deparId:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<List<ExEventManagement>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/getFollowListBydeparId'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询展会与用户中间列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 展会id */
    eventId?:string,
    /** 地址 */
    eventManagementAddress?:string,
    /** 面积 */
    eventManagementArea?:number,
    /** 主搭建商 */
    eventManagementBuilderImportant?:string,
    /** 闭展日期 */
    eventManagementClosingDate?:string,
    /** 协办单位 */
    eventManagementCoOrganizer?:string,
    /** 联系方式 */
    eventManagementContactInformation?:string,
    /** 展会联系人 */
    eventManagementContactPerson?:string,
    /** 创建人 */
    eventManagementCreateBy?:string,
    /** 创建时间 */
    eventManagementCreateTime?:string,
    /** 开展日期 */
    eventManagementDateImplementation?:string,
    /** 进场日期 */
    eventManagementEntryDate?:string,
    /** 展会简介 */
    eventManagementExhibitionIntroduction?:string,
    /** 展会名称 */
    eventManagementExhibitionName?:string,
    /** 展会编号 */
    eventManagementExhibitionNumber?:string,
    /** 展会状态 */
    eventManagementExhibitionStatus?:string,
    /** 主键 */
    eventManagementId?:string,
    /** 所属行业 */
    eventManagementIndustry?:string,
    /** 主办单位 */
    eventManagementOrganizer?:string,
    /** 是否可用 */
    eventManagementStatus?:string,
    /** 承办单位 */
    eventManagementUndertakingUnit?:string,
    /** 更新人 */
    eventManagementUpdateBy?:string,
    /** 更新时间 */
    eventManagementUpdateTime?:string,
    /** 权重 */
    eventManagementWeight?:number,
    /** 跟展状态（跟展中；未跟展） */
    followStatus?:string,
    /** 主键 */
    id?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 是否可用 */
    status?:string,
    /** 同步工作流引擎1同步0不同步 */
    sysUserActivitiSync?:number,
    /** 头像 */
    sysUserAvatar?:string,
    /** 生日 */
    sysUserBirthday?:string,
    /** 设备id uniapp推送用 */
    sysUserClientId?:string,
    /** 创建人 */
    sysUserCreateBy?:string,
    /** 创建时间 */
    sysUserCreateTime?:string,
    /** 删除状态（0，正常，1已删除） */
    sysUserDelFlag?:number,
    /** 负责部门 */
    sysUserDepartIds?:string,
    /** 电子邮件1 */
    sysUserEmail?:string,
    /** id */
    sysUserId?:string,
    /** 部门code(当前选择登录部门) */
    sysUserOrgCode?:string,
    /** 部门名称 */
    sysUserOrgCodeTxt?:string,
    /** 密码 */
    sysUserPassword?:string,
    /** 电话 */
    sysUserPhone?:string,
    /** 职务，关联职务表 */
    sysUserPost?:string,
    /** 真实姓名 */
    sysUserRealname?:string,
    /** 多租户id配置，编辑用户的时候设置 */
    sysUserRelTenantIds?:string,
    /** md5密码盐 */
    sysUserSalt?:string,
    /** 性别（1：男 2：女） */
    sysUserSex?:number,
    /** 状态(1：正常  2：冻结 ） */
    sysUserStatus?:number,
    /** 座机号 */
    sysUserTelephone?:string,
    /** 更新人 */
    sysUserUpdateBy?:string,
    /** 更新时间 */
    sysUserUpdateTime?:string,
    /** 身份（0 普通成员 1 上级） */
    sysUserUserIdentity?:number,
    /** 用户账号 */
    sysUserUsername?:string,
    /** 工号，唯一键 */
    sysUserWorkNo?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 用户部门id */
    userDepartId?:string,
    /** 用户部门名称 */
    userDepartName?:string,
    /** 用户id */
    userId?:string,
    /** 权重 */
    weight?:number,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExEventUserRelate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 展会与用户中间-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExEventUserRelate>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/userEventRelate/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  

  
  export class 工作事项管理Service {
    
/**
 * 工作事项管理-添加
 */
static add(params: {
              
    /** exWorkItem */
    exWorkItem:ExWorkItem,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/add'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['exWorkItem']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作事项管理-根据工作事项配置表单
 */
static addForm(params: {
              
    /** actRuFormExtend */
    actRuFormExtend:ActRuFormExtend,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/addForm'
    
    
    const configs:IRequestConfig = getConfigs('post', 'application/json', url, options)
    
    let data = params['actRuFormExtend']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作事项管理-通过id删除
 */
static delete(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/delete'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'id':params['id']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作事项管理-批量删除
 */
static deleteBatch(params: {
              
    /** ids */
    ids:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/deleteBatch'
    
    
    const configs:IRequestConfig = getConfigs('delete', 'application/json', url, options)
    configs.params = {...configs.params,'ids':params['ids']}
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作事项去重列表
 */
static distinctList(options:IRequestOptions={}):Promise<接口返回对象<List<ExWorkItem>>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/distinctList'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作事项管理-编辑
 */
static edit(params: {
              
    /** exWorkItem */
    exWorkItem:ExWorkItem,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<object>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/edit'
    
    
    const configs:IRequestConfig = getConfigs('put', 'application/json', url, options)
    
    let data = params['exWorkItem']
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 查询工作事项管理列表
 */
static list(params: {
              
    /** 创建人 */
    createBy?:string,
    /** 创建时间 */
    createTime?:string,
    /** 删除状态(0-正常,1-已删除) */
    delFlag?:number,
    /** 需求类别 */
    demandType?:string,
    /** 流程分类 */
    flowType?:string,
    /** 主键 */
    id?:string,
    /** 流程模型key */
    modelKey?:string,
    /** pageNo */
    pageNo?:number,
    /** pageSize */
    pageSize?:number,
    /** 接单部门id */
    receiveDepartId?:string,
    /** 接单部门名称 */
    receiveDepartName?:string,
    /** 任务类型id */
    serviceCategoryId?:string,
    /** 任务类型名称 */
    serviceCategoryName?:string,
    /** 是否可用 */
    status?:string,
    /** 更新人 */
    updateBy?:string,
    /** 更新时间 */
    updateTime?:string,
    /** 权重 */
    weight?:number,
    /** 工作内容 */
    workDetail?:string,
    /** 工作事项 */
    workItem?:string,
    /** 工作组id */
    workgroupId?:string,
    /** 工作组名称 */
    workgroupName?:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<IPage_ExWorkItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/list'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
/**
 * 工作事项管理-通过id查询
 */
static queryById(params: {
              
    /** id */
    id:string,
          } = {} as any,options:IRequestOptions={}):Promise<接口返回对象<ExWorkItem>> {
  return new Promise((resolve, reject) => {
    let url = basePath+'/system/workItem/queryById'
    
    
    const configs:IRequestConfig = getConfigs('get', 'application/json', url, options)
    configs.params=params
    let data = null
    
    configs.data = data;
    axios(configs, resolve, reject);
  });
}
  }
  
  

  export interface ActBusiness {

    
  /**  */
  'applyTime'?:string;
  
  /** 审批人（用户名），多个,号相连 */
  'assignees'?:string;
  
  /** 业务数据 */
  'bizParams'?:string;
  
  /** 所属分类 */
  'categoryId'?:string;
  
  /** 备注 */
  'comment'?:string;
  
  /**  */
  'createBy'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'currTaskName'?:string;
  
  /**  */
  'dataMap'?:object;
  
  /**  */
  'delFlag'?:number;
  
  /** 第一个节点是否为网关 */
  'firstGateway'?:boolean;
  
  /** id */
  'id'?:string;
  
  /**  */
  'isHistory'?:boolean;
  
  /** 任务优先级 默认0 0普通1重要2紧急 */
  'priority'?:number;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 流程实例id */
  'procInstId'?:string;
  
  /**  */
  'procInstStatus'?:number;
  
  /**  */
  'processName'?:string;
  
  /**  */
  'result'?:number;
  
  /**  */
  'routeName'?:string;
  
  /** 是否发送邮件通知-暂无用 */
  'sendEmail'?:boolean;
  
  /** 是否发送站内消息 */
  'sendMessage'?:boolean;
  
  /** 是否发送短信通知-暂无用 */
  'sendSms'?:boolean;
  
  /**  */
  'status'?:number;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'updateBy'?:string;
  
  /**  */
  'updateTime'?:string;
  
  /**  */
  'userId'?:string;
  
  }
  
  

  export interface ActBusinessAddEditBo {

    
  /** 业务数据 */
  'bizParams'?:string;
  
  /** 备注 */
  'comment'?:string;
  
  /** 业务数据 */
  'dataJson'?:object;
  
  /** 部门名称 */
  'depart'?:string;
  
  /** 部门Id */
  'departId'?:string;
  
  /** 字段,分割 */
  'filedNames'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 申请标题 */
  'procDeTitle'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 业务表数据id */
  'tableDataId'?:string;
  
  /** 数据表名 */
  'tableName'?:string;
  
  }
  
  

  export interface ActBusinessCancelBo {

    
  /** 流程扩展表id */
  'id'?:string;
  
  /** 流程实例id */
  'procInstId'?:string;
  
  /** 撤销理由原因说明 */
  'reason'?:string;
  
  }
  
  

  export interface ActDoAndApplyVo {

    
  /**  */
  'applyTime'?:string;
  
  /**  */
  'applyer'?:string;
  
  /**  */
  'assignees'?:string;
  
  /**  */
  'comment'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'currTaskName'?:string;
  
  /**  */
  'deleteReason'?:string;
  
  /**  */
  'firstGateway'?:boolean;
  
  /**  */
  'id'?:string;
  
  /**  */
  'isHistory'?:boolean;
  
  /**  */
  'priority'?:number;
  
  /**  */
  'proType'?:string;
  
  /**  */
  'procDefId'?:string;
  
  /**  */
  'procDepId'?:string;
  
  /**  */
  'procInstId'?:string;
  
  /**  */
  'procInstStatus'?:string;
  
  /**  */
  'processName'?:string;
  
  /**  */
  'result'?:number;
  
  /**  */
  'routeName'?:string;
  
  /**  */
  'status'?:number;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'type'?:string;
  
  /**  */
  'userId'?:string;
  
  }
  
  

  export interface ActReModelDetail {

    
  /** 摘要规则 */
  'abstractRules'?:string;
  
  /** 附件发起 */
  'applyNeedFile'?:number;
  
  /** 业务id */
  'bizId'?:string;
  
  /** 所属分类 */
  'categoryId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 流程描述 */
  'description'?:string;
  
  /** 需要流程配置 */
  'flagFlow'?:boolean;
  
  /** 是否需要表单 */
  'flagForm'?:boolean;
  
  /** 是否允许集中发起 */
  'flagManualApply'?:number;
  
  /** 是否需要加急 */
  'flagUrgent'?:number;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单名称 */
  'formName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 模型id */
  'modelId'?:string;
  
  /** 模型key */
  'modelKey'?:string;
  
  /** 模型名称 */
  'modelName'?:string;
  
  /** 监控人 */
  'monitoringUser'?:string;
  
  /** 流程标题规则 */
  'processNameRules'?:string;
  
  /** 授权的角色 */
  'roles'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 表名 */
  'tableName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ActRuForm {

    
  /** 组件 */
  'component'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 字段json */
  'formFields'?:string;
  
  /** 表单json配置 */
  'formJson'?:string;
  
  /** 表单名称 */
  'formName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 表名 */
  'tableName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ActRuFormExtend {

    
  /** 组件 */
  'component'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 字段json */
  'formFields'?:string;
  
  /** 表单json配置 */
  'formJson'?:string;
  
  /** 表单名称 */
  'formName'?:string;
  
  /** 一级表单分类;需求中心、告警中心 */
  'fromType'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'ifEnabling'?:number;
  
  /** 是否通用 */
  'ifUniversal'?:number;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 用户部门多选 ,分割 */
  'selecteddeparts'?:string;
  
  /** 服务类型 */
  'serviceType'?:string;
  
  /** 服务类型id */
  'serviceTypeId'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 表名 */
  'tableName'?:string;
  
  /** 任务类型 */
  'taskType'?:string;
  
  /** 二级表单分类;会展商业、内部需求、外部需求、决策需求、排期需求、设备告警、事件告警、安防告警 */
  'twoFromType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 使用标签场景:任务创建、任务流转 */
  'userLabel'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作事项id */
  'workItermId'?:string;
  
  /** 工作事项名称 */
  'workItermName'?:string;
  
  }
  
  

  export interface ActZAgent {

    
  /** 代理人 */
  'agent'?:string;
  
  /** 代理结束日期 */
  'agentEndDate'?:string;
  
  /** 代理人id */
  'agentId'?:string;
  
  /** 代理开始日期 */
  'agentStartDate'?:string;
  
  /** 业务类型 */
  'businessType'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 流程所属公司（部门）;所属部门 */
  'department'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 责任人是否处理;是否加签处理 */
  'ifAddSignature'?:number;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  /** 用户名称;被代理人 */
  'userName'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ActZApprovalRecord {

    
  /** 工作流程业务id */
  'actBusinessId'?:string;
  
  /** 流程节点id */
  'actNodeId'?:string;
  
  /** 处理结果 */
  'approvalResult'?:string;
  
  /** 操作时间 */
  'approvalTime'?:string;
  
  /** 类别 */
  'category'?:string;
  
  /** 评论 */
  'comment'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 相关数据 */
  'dataJson'?:string;
  
  /** 是否删除逻辑 */
  'delFlag'?:number;
  
  /** 耗时 */
  'duration'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 流程实例id */
  'procInstId'?:string;
  
  /** 接收时间 */
  'receptionTime'?:string;
  
  /**  */
  'remark'?:string;
  
  /** 发送人 */
  'sendFrom'?:string;
  
  /**  */
  'tableId'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 任务名称 */
  'taskName'?:string;
  
  /** 时间戳 */
  'timestamp'?:number;
  
  /** 流程名称 */
  'title'?:string;
  
  /** 类型 */
  'type'?:string;
  
  /** 更改人 */
  'updateBy'?:string;
  
  /** 更改时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface ActZBusinessData {

    
  /** 审批状态 */
  'actStatus'?:string;
  
  /**  */
  'createBy'?:string;
  
  /**  */
  'createTime'?:string;
  
  /** 数据 */
  'dataJson'?:string;
  
  /**  */
  'delFlag'?:number;
  
  /**  */
  'id'?:string;
  
  /** 状态 0草稿默认 1处理中 2结束 */
  'status'?:number;
  
  /**  */
  'updateBy'?:string;
  
  /**  */
  'updateTime'?:string;
  
  }
  
  

  export interface ActZProcessNode {

    
  /** activiti流程图节点id */
  'activitiNodeId'?:string;
  
  /** 审批类型 */
  'approvalType'?:string;
  
  /** 批量审批模式 */
  'batchApproval'?:string;
  
  /** 权限按钮,分割 */
  'btnAuths'?:string;
  
  /** 是否发起人的部门负责人 */
  'chooseDepHeader'?:string;
  
  /** 是否选择发起人 */
  'chooseSponsor'?:string;
  
  /** 配置json */
  'configJson'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** delFlag */
  'delFlag'?:number;
  
  /** 部门负责人id, 分隔 */
  'departmentManageids'?:string;
  
  /** 部门id , 分隔 */
  'departmentiIds'?:string;
  
  /** 审批人为空模式 */
  'emptyApprover'?:string;
  
  /** 是否是模型节点 */
  'flagModel'?:number;
  
  /** 变量, 分隔 */
  'formVariables'?:string;
  
  /** 这个节点id */
  'id'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 角色id , 分隔 */
  'roleIds'?:string;
  
  /** 节点名称 */
  'title'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 用户id ,分隔 */
  'userIds'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ActZprocess {

    
  /** 附件发起 */
  'applyNeedFile'?:number;
  
  /** 业务id */
  'bizId'?:string;
  
  /** 关联业务表名 */
  'businessTable'?:string;
  
  /** 所属分类 */
  'categoryId'?:string;
  
  /** createBy */
  'createBy'?:string;
  
  /** createTime */
  'createTime'?:string;
  
  /** delFlag */
  'delFlag'?:number;
  
  /** 部署id */
  'deploymentId'?:string;
  
  /** 描述/备注 */
  'description'?:string;
  
  /** 流程图片名 */
  'diagramName'?:string;
  
  /** 需要流程配置 */
  'flagFlow'?:boolean;
  
  /** 是否需要表单 */
  'flagForm'?:boolean;
  
  /** 是否允许集中发起 */
  'flagManualApply'?:number;
  
  /** 是否需要加急 */
  'flagUrgent'?:number;
  
  /** 字段json */
  'formFields'?:string;
  
  /** 表单json配置 */
  'formJson'?:string;
  
  /** 表单类型 devops compo */
  'formType'?:string;
  
  /** id */
  'id'?:string;
  
  /** 最新版本 */
  'latest'?:boolean;
  
  /** 监控人 */
  'monitoringUser'?:string;
  
  /** 流程名称 */
  'name'?:string;
  
  /** 流程标识名称 */
  'processKey'?:string;
  
  /** 流程表单报表ID */
  'reportModelId'?:string;
  
  /** 授权的角色 */
  'roles'?:string;
  
  /** 关联前端表单路由名 */
  'routeName'?:string;
  
  /**  */
  'sort'?:number;
  
  /** 流程状态 部署后默认1激活 */
  'status'?:number;
  
  /**  */
  'typeId'?:string;
  
  /** updateBy */
  'updateBy'?:string;
  
  /** updateTime */
  'updateTime'?:string;
  
  /** 版本 */
  'version'?:number;
  
  }
  
  

  export interface AnnouncementSendModel {

    
  /**  */
  'anntId'?:string;
  
  /**  */
  'bizSource'?:string;
  
  /**  */
  'busId'?:string;
  
  /**  */
  'busType'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'msgAbstract'?:string;
  
  /**  */
  'msgCategory'?:string;
  
  /**  */
  'msgContent'?:string;
  
  /**  */
  'openPage'?:string;
  
  /**  */
  'openType'?:string;
  
  /**  */
  'pageNo'?:number;
  
  /**  */
  'pageSize'?:number;
  
  /**  */
  'priority'?:string;
  
  /**  */
  'readFlag'?:string;
  
  /**  */
  'sendTime'?:string;
  
  /**  */
  'sender'?:string;
  
  /**  */
  'titile'?:string;
  
  /**  */
  'userId'?:string;
  
  }
  
  

  export interface AppMember {

    
  /** 同步工作流引擎(1-同步,0-不同步) */
  'activitiSync'?:number;
  
  /** 头像 */
  'avatar'?:string;
  
  /** 生日 */
  'birthday'?:string;
  
  /** 设备ID */
  'clientId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 负责部门 */
  'departIds'?:string;
  
  /** 电子邮件 */
  'email'?:string;
  
  /** 主键id */
  'id'?:string;
  
  /** 机构编码 */
  'orgCode'?:string;
  
  /** 密码 */
  'password'?:string;
  
  /** 电话 */
  'phone'?:string;
  
  /** 职务，关联职务表 */
  'post'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 多租户标识 */
  'relTenantIds'?:string;
  
  /** md5密码盐 */
  'salt'?:string;
  
  /** 性别(0-默认未知,1-男,2-女) */
  'sex'?:number;
  
  /** 性别(1-正常,2-冻结) */
  'status'?:number;
  
  /** 座机号 */
  'telephone'?:string;
  
  /** 第三方登录的唯一标识 */
  'thirdId'?:string;
  
  /** 第三方类型 */
  'thirdType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 身份（1普通成员 2上级） */
  'userIdentity'?:number;
  
  /** 登录账号 */
  'username'?:string;
  
  /** 工号，唯一键 */
  'workNo'?:string;
  
  }
  
  

  export interface AppMemberLoginBo {

    
  /** 密码 */
  'password'?:string;
  
  /** 用户名 */
  'userName'?:string;
  
  }
  
  

  export interface AppMemberLoginResVo {

    
  /** 访问令牌 */
  'accessToken'?:string;
  
  /** 会员信息 */
  'appMember'?:AppMember;
  
  }
  
  

  export interface Assignee {

    
  /**  */
  'isExecutor'?:boolean;
  
  /**  */
  'username'?:string;
  
  }
  
  

  export interface ChatGroup {

    
  /** 聊天群组类型 ( 单体 群聊） */
  'chatGroupType'?:EnumChatGroupChatGroupType;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /**  */
  'gavatar'?:string;
  
  /** 群管理员 */
  'groupManager'?:string;
  
  /** 群名称 */
  'groupName'?:string;
  
  /** 群公告 */
  'groupNotice'?:string;
  
  /** 群组id【关键信息】 */
  'groupid'?:string;
  
  /** 群用户list */
  'sysUserList'?:SysUser[];
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface ChatGroupInviteBo {

    
  /** 邀请时间 */
  'createTime'?:string;
  
  /** 房间id */
  'groupId'?:string;
  
  /** 新人id */
  'newId'?:string;
  
  /** 邀请人 */
  'userId'?:string;
  
  }
  
  

  export interface ChatUserBlackList {

    
  /** 用户 */
  'sysUser'?:SysUser;
  
  }
  
  

  export interface DepartIdModel {

    
  /**  */
  'children'?:DepartIdModel[];
  
  /**  */
  'key'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'value'?:string;
  
  }
  
  

  export interface Department {

    
  /**  */
  'departName'?:string;
  
  /**  */
  'id'?:string;
  
  }
  
  

  export interface DictModel {

    
  /**  */
  'text'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'value'?:string;
  
  }
  
  

  export interface DwiFacilityDefinitionTjgz {

    
  /** 操作类型 */
  'actionType'?:string;
  
  /** 设备规格的默认渠道标识符 */
  'defaultChannelCode'?:string;
  
  /** 设备规格的默认渠道名称 */
  'defaultChannelName'?:string;
  
  /** 设备规格分类的标识符 */
  'definitionCategoryCode'?:string;
  
  /** 设备规格分类的名称 */
  'definitionCategoryName'?:string;
  
  /** 设备规格的唯一编号 */
  'definitionCode'?:string;
  
  /** 设备规格的名称 */
  'definitionName'?:string;
  
  /** 设备规格的介绍文本 */
  'description'?:string;
  
  /** 数据批次号;已启用、未启用 */
  'dwBatchNumber'?:string;
  
  /** 数据创建者 */
  'dwCreationBy'?:string;
  
  /** 数据创建时间 */
  'dwCreationDate'?:string;
  
  /** 源系统名称 */
  'dwDataSource'?:string;
  
  /** 源系统编号 */
  'dwDataSourceId'?:string;
  
  /** 数据最后更新者 */
  'dwLastUpdateBy'?:string;
  
  /** 数据最后更新时间 */
  'dwLastUpdateDate'?:string;
  
  /** 源系统表名 */
  'dwSourceTable'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 数据插入时间 */
  'insertTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface DwiFacilityInstanceTjgz {

    
  /** 操作类型 */
  'actionType'?:string;
  
  /** 设备实例所在位置的高度 */
  'altitude'?:string;
  
  /** 一级二级分类 */
  'belongsSystem'?:string;
  
  /** 设备规格分类 */
  'categoryCode'?:string;
  
  /** 设备规格分类的名称 */
  'categoryName'?:string;
  
  /** 设备实例的接入外部渠道编码 */
  'channelCode'?:string;
  
  /** 设备实例接入的渠道系统名称 */
  'channelName'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备实例的编码 */
  'deviceCode'?:string;
  
  /** 设备规格标识 */
  'deviceDefinitionCode'?:string;
  
  /** 设备ip */
  'deviceIp'?:string;
  
  /** 设备实例的名称 */
  'deviceName'?:string;
  
  /** 设备产品标识 */
  'deviceProductCode'?:string;
  
  /** 数据批次号 */
  'dwBatchNumber'?:string;
  
  /** 数据创建者 */
  'dwCreationBy'?:string;
  
  /** 数据创建时间 */
  'dwCreationDate'?:string;
  
  /** 源系统名称 */
  'dwDataSource'?:string;
  
  /** 源系统编号 */
  'dwDataSourceId'?:string;
  
  /** 数据最后更新者 */
  'dwLastUpdateBy'?:string;
  
  /** 数据最后更新时间 */
  'dwLastUpdateDate'?:string;
  
  /** 源系统表名 */
  'dwSourceTable'?:string;
  
  /** 设备规格标识符 */
  'dwiFacilityDefinitionTjgz'?:DwiFacilityDefinitionTjgz;
  
  /** 设备规格分类 */
  'dwiFacilityMenuTjgz'?:DwiFacilityMenuTjgz;
  
  /** 位置信息 */
  'dwiSpaceRecordTjgz'?:DwiSpaceRecordTjgz;
  
  /** 设备扩展属性 */
  'exAttributes'?:string;
  
  /** 设备实例的外部编码 */
  'externalCode'?:string;
  
  /** 摄像头国标编码 */
  'gbCode'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 数据插入时间 */
  'insertTime'?:string;
  
  /** 设备实例所在位置的纬度 */
  'latitude'?:string;
  
  /** 设备实例所在位置的经度 */
  'longitude'?:string;
  
  /** 设备品牌 */
  'productBrand'?:string;
  
  /** 设备厂商;已启用、未启用 */
  'productManufacturer'?:string;
  
  /** 设备产品型号 */
  'productModel'?:string;
  
  /** 功率 */
  'ratedPower'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 扩展字段 */
  'sizeType'?:string;
  
  /** 空间节点实例的编码 */
  'spaceCode'?:string;
  
  /** 空间节点实例所属的空间层级编码 */
  'spaceLevelCode'?:string;
  
  /** 设备实例的生命周期状态 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 电压 */
  'voltageLineCode'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface DwiFacilityMenuTjgz {

    
  /** 设备规格默认分类名称 */
  'categoryName'?:string;
  
  /** 创建时间 */
  'createdDate'?:string;
  
  /** 数据批次号;已启用、未启用 */
  'dwBatchNumber'?:string;
  
  /** 数据创建者 */
  'dwCreationBy'?:string;
  
  /** 数据创建时间 */
  'dwCreationDate'?:string;
  
  /** 源系统名称 */
  'dwDataSource'?:string;
  
  /** 源系统编号 */
  'dwDataSourceId'?:string;
  
  /** 数据最后更新者 */
  'dwLastUpdateBy'?:string;
  
  /** 数据最后更新时间 */
  'dwLastUpdateDate'?:string;
  
  /** 源系统表名 */
  'dwSourceTable'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 数据插入时间 */
  'insertTime'?:string;
  
  /** 是否删除 */
  'isDeleted'?:string;
  
  /** 是否锁定 */
  'isLocked'?:string;
  
  /** 最后修改时间 */
  'lastModifiedDate'?:string;
  
  /** 编码 */
  'name'?:string;
  
  /** 父级编码 */
  'parent'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface DwiFacilityProductTjgz {

    
  /** 操作类型 */
  'actionType'?:string;
  
  /** 设备产品的品牌 */
  'brand'?:string;
  
  /** 设备规格分类 */
  'categoryCode'?:string;
  
  /** 设备规格分类的名称 */
  'categoryName'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备规格的唯一编号 */
  'definitionCode'?:string;
  
  /** 设备产品的介绍文本 */
  'description'?:string;
  
  /** 设备产品的显示模板 */
  'displayTemplate'?:string;
  
  /** 数据批次号;已启用、未启用 */
  'dwBatchNumber'?:string;
  
  /** 数据创建者 */
  'dwCreationBy'?:string;
  
  /** 数据创建时间 */
  'dwCreationDate'?:string;
  
  /** 源系统名称 */
  'dwDataSource'?:string;
  
  /** 源系统编号 */
  'dwDataSourceId'?:string;
  
  /** 数据最后更新者 */
  'dwLastUpdateBy'?:string;
  
  /** 数据最后更新时间 */
  'dwLastUpdateDate'?:string;
  
  /** 源系统表名 */
  'dwSourceTable'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 数据插入时间 */
  'insertTime'?:string;
  
  /** 设备产品的厂商 */
  'manufacturer'?:string;
  
  /** 设备产品的型号 */
  'model'?:string;
  
  /** 设备产品的唯一编号 */
  'productCode'?:string;
  
  /** 设备产品的名称 */
  'productName'?:string;
  
  /** 设备状态 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface DwiSpaceRecordTjgz {

    
  /** 操作类型。当请求为增量同步模式时返回。包括：insert：新增记录，update：更新记录 */
  'actionType'?:string;
  
  /** 高度 */
  'altitude'?:string;
  
  /** 空间实例编码 */
  'code'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 空间描述 */
  'description'?:string;
  
  /** 空间详细地址 */
  'detailAddress'?:string;
  
  /** 数据批次号 */
  'dwBatchNumber'?:number;
  
  /** 数据创建者 */
  'dwCreationBy'?:string;
  
  /** 数据创建时间 */
  'dwCreationDate'?:string;
  
  /** 数据来源系统名称 */
  'dwDataSource'?:string;
  
  /** 数据来源系统ID */
  'dwDataSourceId'?:string;
  
  /** 数据最后更新者 */
  'dwLastUpdateBy'?:string;
  
  /** 数据最后更新时间 */
  'dwLastUpdateDate'?:string;
  
  /** 数据来源表 */
  'dwSourceTable'?:string;
  
  /** 停车场id */
  'extId'?:string;
  
  /** 空间id */
  'id'?:string;
  
  /** 该记录在源表里的添加时间 */
  'insertTime'?:string;
  
  /** 纬度 */
  'latitude'?:string;
  
  /** 层级code) */
  'levelCode'?:string;
  
  /** 层级描述 */
  'levelDescription'?:string;
  
  /** 层级名称 */
  'levelName'?:string;
  
  /** 层级级别 */
  'levelOrder'?:string;
  
  /** 经度 */
  'longitude'?:string;
  
  /** 上级空间编码 */
  'parentSpaceCode'?:string;
  
  /** 路径 */
  'path'?:string;
  
  /** 空间实例名称 */
  'spaceName'?:string;
  
  /** 空间路径实体列表 */
  'spacePath'?:DwiSpaceRecordTjgz[];
  
  /** 状态 */
  'status'?:string;
  
  /** 该记录在源表里的更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  }
  
  

  export interface EditNodeUserBo {

    
  /** activiti流程图节点id */
  'activitiNodeId'?:string;
  
  /** 审批类型  */
  'approvalType'?:string;
  
  /** 批量审批模式  */
  'batchApproval'?:EnumEditNodeUserBoBatchApproval;
  
  /** 权限按钮,分割  */
  'btnAuths'?:string;
  
  /** 是否发起人的部门负责人 */
  'chooseDepHeader'?:boolean;
  
  /** 是否选择发起人 */
  'chooseSponsor'?:boolean;
  
  /** 配置json */
  'configJson'?:string;
  
  /** createBy */
  'createBy'?:string;
  
  /** createTime */
  'createTime'?:string;
  
  /** delFlag */
  'delFlag'?:number;
  
  /** 部门id , 分隔 */
  'departmentIds'?:string;
  
  /** 部门负责人id , 分隔 */
  'departmentManageIds'?:string;
  
  /** 审批人为空模式  */
  'emptyApprover'?:EnumEditNodeUserBoEmptyApprover;
  
  /** 是否是模型节点 */
  'flagModel'?:number;
  
  /** 变量, 分隔 */
  'formVariables'?:string;
  
  /** 这个节点id */
  'id'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 角色id , 分隔 */
  'roleIds'?:string;
  
  /** 节点名称 */
  'title'?:string;
  
  /** updateBy */
  'updateBy'?:string;
  
  /** updateTime */
  'updateTime'?:string;
  
  /** 用户id ,分隔 */
  'userIds'?:string;
  
  }
  
  

  export interface ExBusinessParameterManagement {

    
  /** 安防告警是否自动归档 */
  'afgjAutoArchiv'?:number;
  
  /** 安防告警是否自动派单 */
  'afgjAutoDispatch'?:number;
  
  /** 安防告警是否指定派单 */
  'afgjDesignDispatch'?:number;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 内部需求是否自动归档 */
  'nbxqAutoArchiv'?:number;
  
  /** 内部需求是否自动派单 */
  'nbxqAutoDispatch'?:number;
  
  /** 内部需求是否指定派单 */
  'nbxqDesignDispatch'?:number;
  
  /** 设备告警是否自动归档 */
  'sbgjAutoArchiv'?:number;
  
  /** 设备告警是否自动派单 */
  'sbgjAutoDispatch'?:number;
  
  /** 设备告警是否指定派单 */
  'sbgjDesignDispatch'?:number;
  
  /** 事件告警是否自动归档 */
  'sjgjAutoArchiv'?:number;
  
  /** 事件告警是否自动派单 */
  'sjgjAutoDispatch'?:number;
  
  /**  事件告警是否指定派单 */
  'sjgjDesignDispatch'?:number;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 模块类型;安防、事件、设备、内部、展期、巡检、巡更 */
  'type'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 外部需求是否自动归档 */
  'wbxqAutoArchiv'?:number;
  
  /** 外部需求是否自动派单 */
  'wbxqAutoDispatch'?:number;
  
  /** 外部需求是否指定派单 */
  'wbxqDesignDispatch'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 巡更计划是否自动归档 */
  'xgjhAutoArchiv'?:number;
  
  /** 巡检计划是否自动归档 */
  'xjjhAutoArchiv'?:number;
  
  /** 展期需求是否自动归档 */
  'zqxqAutoArchiv'?:number;
  
  /**  展期需求是否自动派单 */
  'zqxqAutoDispatch'?:number;
  
  /** 展期需求是否指定派单 */
  'zqxqDesignDispatch'?:number;
  
  }
  
  

  export interface ExDemandCenterExtensionOrder {

    
  /** 附件 */
  'attachment'?:string;
  
  /** 批次id */
  'batchId'?:string;
  
  /** 公司名称 */
  'company'?:string;
  
  /** 已完成个数 */
  'complatedNum'?:number;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 部门 */
  'department'?:string;
  
  /** 部门id */
  'departmentId'?:string;
  
  /** 展期订单项目清单list */
  'exDemandCenterExtensionProjectList'?:ExDemandCenterExtensionProject[];
  
  /** 展费 */
  'exhibitionFees'?:number;
  
  /** 展会名称 */
  'exhibitionName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 订单类别 */
  'orderCategory'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 订单来源 */
  'orderSource'?:string;
  
  /** 订单状态 */
  'orderStatus'?:string;
  
  /** 订单时间 */
  'orderTime'?:string;
  
  /** 订单类型（现场单、预订单） */
  'orderType'?:string;
  
  /** 项目个数 */
  'projectNum'?:number;
  
  /** 订单备注 */
  'remark'?:string;
  
  /** 审核日期 */
  'reviewDate'?:string;
  
  /** 审核状态 */
  'reviewStatus'?:string;
  
  /** 审核人 */
  'reviewer'?:string;
  
  /** 服务类别 */
  'serviceCategory'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 总金额 */
  'totalAmount'?:number;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDemandCenterExtensionProject {

    
  /** 所属公司 */
  'affiliatedCompany'?:string;
  
  /** 审核通过时间 */
  'approvalTime'?:string;
  
  /** 附件 */
  'attachment'?:string;
  
  /** 批次id */
  'batchId'?:string;
  
  /** 展位号 */
  'boothNumber'?:string;
  
  /** 所属分类Id */
  'categoryId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 数据json */
  'dateJson'?:string;
  
  /** 拆除完成数量vo */
  'dismantleCompCount'?:number;
  
  /** 派单部门 */
  'dispatchDepartment'?:string;
  
  /** 派单部门id */
  'dispatchDepartmentId'?:string;
  
  /** 派单人 */
  'dispatchUser'?:string;
  
  /** 服务分类 */
  'exhAlarmDispatchRuleServiceCategory'?:ExhAlarmDispatchRule;
  
  /** 服务项 */
  'exhAlarmDispatchRuleServiceItems'?:ExhAlarmDispatchRule;
  
  /** 展区 */
  'exhibitionArea'?:string;
  
  /** 展会名称 */
  'exhibitionName'?:string;
  
  /** 文件 */
  'file'?:string;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单json */
  'formJson'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 安装完成数量Vo */
  'installCompCount'?:number;
  
  /** 详细位置 */
  'location'?:string;
  
  /** 材料 */
  'material'?:string;
  
  /** 新表单json */
  'newFormJson'?:string;
  
  /** 报馆时间 */
  'newspaperTime'?:string;
  
  /** 订单id */
  'orderId'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 订单备注 */
  'orderRemarks'?:string;
  
  /** 订单类型（现场单、预订单） */
  'orderType'?:string;
  
  /** 展馆号 */
  'pavilion'?:string;
  
  /** 订单状态 */
  'projectStatus'?:string;
  
  /** 数量 */
  'quantity'?:number;
  
  /** 重组订单id */
  'reOrderId'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 接驳送电完成数量vo */
  'sendCCompCount'?:number;
  
  /** 服务分类 */
  'serviceCategory'?:string;
  
  /** 服务项 */
  'serviceItems'?:string;
  
  /** 服务名称 */
  'serviceName'?:string;
  
  /** 服务规格 */
  'serviceSpecifications'?:string;
  
  /** 需求来源Vo(会展商业需求、内部需求、外部需求等 */
  'sourceOfDemand'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 主体类型 */
  'subjectType'?:string;
  
  /** 同步时间 */
  'synchronizationTime'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 单位 */
  'unit'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工单号 */
  'workOrderNumber'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExDemandCenterExtensionProjectDetails {

    
  /** 电缆需求数量（米） */
  'cableQuantity'?:string;
  
  /** 所属分类 */
  'category'?:string;
  
  /** 完成图片 */
  'complatePicture'?:string;
  
  /** 接驳图片 */
  'connectionPicture'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 拆除图片 */
  'dismantlePicture'?:string;
  
  /** 电箱ID */
  'electricBox'?:string;
  
  /** 固定电箱ID */
  'fixedElectricBox'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否开通布展施工用电 */
  'ifActivate'?:string;
  
  /** 是否接驳完成 */
  'ifConnectionComplate'?:string;
  
  /** 是否拆除完成 */
  'ifDismantleComplate'?:string;
  
  /** 是否安装完成 */
  'ifInstallComplate'?:string;
  
  /** 是否超长电缆 */
  'ifLongCable'?:string;
  
  /** 项目id */
  'projectId'?:string;
  
  /** 数量 */
  'quantity'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 责任人 */
  'responsiblePerson'?:string;
  
  /** 服务项目规格 */
  'serviceSpecifications'?:string;
  
  /** 服务项目标准 */
  'serviceStandard'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 任务编码 */
  'taskCode'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDemandCenterInsideOrder {

    
  /** 公司名称 */
  'company'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 项目清单 */
  'exDemandCenterInsideProjectList'?:ExDemandCenterInsideProject[];
  
  /** 展费 */
  'exhibitionFees'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 订单类别 */
  'orderCategory'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 订单来源 */
  'orderSource'?:string;
  
  /** 订单状态 */
  'orderStatus'?:string;
  
  /** 订单时间 */
  'orderTime'?:string;
  
  /** 订单备注 */
  'remark'?:string;
  
  /** 审核日期 */
  'reviewDate'?:string;
  
  /** 审核状态 */
  'reviewStatus'?:string;
  
  /** 审核人 */
  'reviewer'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 总金额 */
  'totalAmount'?:number;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDemandCenterInsideProject {

    
  /** 附件 */
  'attachment'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建数据json */
  'createDateJson'?:string;
  
  /** 创建表单id */
  'createFormId'?:string;
  
  /** 创建表单json */
  'createFormJson'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 决策需求任务类型 */
  'decisionTaskType'?:string;
  
  /** 派单部门 */
  'dispatchDepartment'?:string;
  
  /** 派单部门id */
  'dispatchDepartmentId'?:string;
  
  /** 派单人 */
  'dispatchUser'?:string;
  
  /** 展馆排期需求任务类型 */
  'exTaskType'?:string;
  
  /** 文件 */
  'file'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 内部需求任务类型 */
  'insideTaskType'?:string;
  
  /** 一键发起需求id */
  'oneClickId'?:string;
  
  /** 订单id */
  'orderId'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 外部需求任务类型 */
  'outsideTaskType'?:string;
  
  /** 项目状态 */
  'projectStatus'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 需求类型:内部、外部、展馆排期、决策 */
  'requirementType'?:string;
  
  /** 需求来源 */
  'sourceOfDemand'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 流转数据json */
  'taskDateJson'?:string;
  
  /** 流转表单id */
  'taskFormId'?:string;
  
  /** 流转表单json */
  'taskFormJson'?:string;
  
  /** 任务类型id */
  'taskTypeId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExDictPointPosition {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备名称 */
  'deviceName'?:string;
  
  /** 位置信息 */
  'dwiSpaceRecordTjgz'?:DwiSpaceRecordTjgz;
  
  /** 设备id */
  'equipmentId'?:string;
  
  /** 设备型号 */
  'equipmentModel'?:string;
  
  /** 高度 */
  'height'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 纬度 */
  'latitude'?:string;
  
  /** 经度 */
  'longitude'?:string;
  
  /** 位置 */
  'position'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDictServiceCategory {

    
  /** 子集 */
  'children'?:ExDictServiceCategory[];
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 父id */
  'parentId'?:string;
  
  /** 服务名称 */
  'serviceName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDictServiceDictionary {

    
  /** 计费方式 */
  'billingMethod'?:string;
  
  /** 服务项类别id */
  'categoryId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 服务项目描述说明 */
  'remark'?:string;
  
  /** 服务项类别 */
  'serviceCategory'?:string;
  
  /** 服务项目 */
  'serviceItems'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDispatchRules {

    
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 条件设置 */
  'conditionSettings'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 部门id */
  'departmentId'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型id */
  'equipmentTypeId'?:string;
  
  /** 服务项 */
  'exDictServiceCategory'?:ExDictServiceCategory;
  
  /** 服务子项 */
  'exDictServiceCategorySub'?:ExDictServiceCategory;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'ifEnabling'?:number;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 需求类型;内部、展期 */
  'requirementType'?:string;
  
  /** 规则类别;告警规则、需求规则 */
  'ruleCategories'?:string;
  
  /** 规则名称 */
  'ruleName'?:string;
  
  /** 规则编号 */
  'ruleNumber'?:string;
  
  /** 任务类型id */
  'serviceCategoryId'?:string;
  
  /** 任务类型名称 */
  'serviceCategoryName'?:string;
  
  /** 服务项 */
  'serviceItems'?:string;
  
  /** 服务子项 */
  'serviceSubItems'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 内外部任务类型 */
  'taskType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExDispatchRulesDetails {

    
  /** 所属分类 */
  'classification'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 流程id */
  'processId'?:string;
  
  /** 流程标识 */
  'processIdentification'?:string;
  
  /** 流程名称 */
  'processName'?:string;
  
  /** 派单规则id */
  'ruleId'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 分类名称 */
  'typeName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExDrawingDemandCenterExtensionProject {

    
  /** 所属公司 */
  'affiliatedCompany'?:string;
  
  /** 审核通过时间 */
  'approvalTime'?:string;
  
  /** 附件 */
  'attachment'?:string;
  
  /** 批次id */
  'batchId'?:string;
  
  /** 展位号 */
  'boothNumber'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 执行部门 */
  'department'?:string;
  
  /** 部门id */
  'departmentId'?:string;
  
  /** 派单部门 */
  'dispatchDepartment'?:string;
  
  /** 派单部门id */
  'dispatchDepartmentId'?:string;
  
  /** 派单人 */
  'dispatchUser'?:string;
  
  /** 执行人 */
  'executor'?:string;
  
  /** 展区 */
  'exhibitionArea'?:string;
  
  /** 展馆号 */
  'exhibitionHallNumber'?:string;
  
  /** 展会名称 */
  'exhibitionName'?:string;
  
  /** 文件 */
  'file'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 报馆时间 */
  'newspaperTime'?:string;
  
  /** 接单部门 */
  'orderDepartment'?:string;
  
  /** 订单id */
  'orderId'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 订单备注 */
  'orderRemarks'?:string;
  
  /** 订单类型 */
  'orderType'?:string;
  
  /** 展馆号 */
  'pavilion'?:string;
  
  /** 订单状态 */
  'projectStatus'?:string;
  
  /** 数量 */
  'quantity'?:number;
  
  /** 服务分类 */
  'serviceCategory'?:string;
  
  /** 服务分类 */
  'serviceClassification'?:string;
  
  /** 服务项 */
  'serviceItems'?:string;
  
  /** 服务名称 */
  'serviceName'?:string;
  
  /** 服务规格 */
  'serviceSpecifications'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 主体类型 */
  'subjectType'?:string;
  
  /** 同步时间 */
  'synchronizationTime'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工单号 */
  'workOrderNumber'?:string;
  
  }
  
  

  export interface ExEquipmentElevatorManagement {

    
  /** 电梯名称 */
  'companyName'?:string;
  
  /** 展区 */
  'contactInformation'?:string;
  
  /** 电梯分类 */
  'contacts'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 电梯编号 */
  'unitType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExEventCooperativeManagement {

    
  /** 合作单位名称 */
  'companyName'?:string;
  
  /** 联系方式 */
  'contactInformation'?:string;
  
  /** 联系人 */
  'contacts'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 合作单位类型;主办、主运、主场 */
  'unitType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExEventManagement {

    
  /** 地址 */
  'address'?:string;
  
  /** 面积 */
  'area'?:number;
  
  /** 主搭建商 */
  'builderImportant'?:string;
  
  /** 闭展日期 */
  'closingDate'?:string;
  
  /** 协办单位 */
  'coOrganizer'?:string;
  
  /** 联系方式 */
  'contactInformation'?:string;
  
  /** 展会联系人 */
  'contactPerson'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 开展日期 */
  'dateImplementation'?:string;
  
  /** 进场日期 */
  'entryDate'?:string;
  
  /** 展会简介 */
  'exhibitionIntroduction'?:string;
  
  /** 展会名称 */
  'exhibitionName'?:string;
  
  /** 展会编号 */
  'exhibitionNumber'?:string;
  
  /** 展会状态 */
  'exhibitionStatus'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 所属行业 */
  'industry'?:string;
  
  /** 主办单位 */
  'organizer'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 承办单位 */
  'undertakingUnit'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExEventUserRelate {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 展会id */
  'eventId'?:string;
  
  /** 展会信息 */
  'eventManagement'?:ExEventManagement;
  
  /** 跟展状态（跟展中；未跟展） */
  'followStatus'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 用户信息 */
  'sysUser'?:SysUser;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 用户部门id */
  'userDepartId'?:string;
  
  /** 用户部门名称 */
  'userDepartName'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExEventUserSaveVo {

    
  /** 所属组别 */
  'belongGroup'?:string;
  
  /** 所属部门id */
  'departIds'?:string;
  
  /** 所属部门 */
  'departNames'?:string;
  
  /** 展会id */
  'eventId'?:string;
  
  /** 跟展状态（跟展中；未跟展） */
  'followStatus'?:string;
  
  /** id */
  'id'?:string;
  
  /** 职位id */
  'postId'?:string;
  
  /** 职位名称 */
  'postName'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 用户列表 */
  'sysUserList'?:SysUser[];
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  }
  
  

  export interface ExExhibitionHallManagement {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 场馆类型 */
  'type'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 场馆名字 */
  'venueName'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExInspectionStandards {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 设备分类id */
  'equipmentTypeId'?:string;
  
  /** 设备分类名称 */
  'equipmentTypeName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 点检标准项目清单列表 */
  'inspectionStandardsProjectDetailsList'?:ExInspectionStandardsProjectDetails[];
  
  /** 备注 */
  'remarks'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExInspectionStandardsProjectDetails {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 点检内容 */
  'inspectionContent'?:string;
  
  /** 点检标准 */
  'inspectionStandards'?:string;
  
  /** 检验项目 */
  'inspectionType'?:string;
  
  /** 周期标签(年、月、日可多选) */
  'periodLabel'?:string;
  
  /** 记录方式 */
  'recordingMethod'?:string;
  
  /** 上限/异常值 */
  'standardValueOffline'?:string;
  
  /** 下限/正常值 */
  'standardValueOnline'?:string;
  
  /** 点检标准id */
  'standardsId'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExOneClickDispatchVo {

    
  /** 派单人部门id */
  'dispatchDepartId'?:string;
  
  /** 派单人部门名称 */
  'dispatchDepartName'?:string;
  
  /** 派单人id */
  'dispatchUserId'?:string;
  
  /** 派单人名称 */
  'dispatchUserName'?:string;
  
  /** 项目清单 */
  'exDemandCenterExtensionProjects'?:ExDemandCenterExtensionProject[];
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExOneClickRequirement {

    
  /** 文字描述 */
  'charDescribe'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警/需求vo类 */
  'exSourceDisplayVoList'?:ExSourceDisplayVo[];
  
  /** 告警中心list */
  'exhAlarmList'?:ExhAlarm[];
  
  /** 主键 */
  'id'?:string;
  
  /** 发起人 */
  'initiateBy'?:string;
  
  /** 发起时间 */
  'initiateTime'?:string;
  
  /** 内外部需求list */
  'insideProjectList'?:ExDemandCenterInsideProject[];
  
  /** 其他附件 */
  'otherAttachments'?:string;
  
  /** 识别文字 */
  'recognizingText'?:string;
  
  /** 状态（未受理；已受理） */
  'reqStatus'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 语音附件 */
  'voiceAttachments'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExOneClickRequirementVo {

    
  /** 告警中心list */
  'exhAlarmList'?:ExhAlarm[];
  
  /** 内外部需求list */
  'insideProjectList'?:ExDemandCenterInsideProject[];
  
  /** 一键发起需求id */
  'oneClickId'?:string;
  
  }
  
  

  export interface ExOneClickTasksDetailed {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 数据json */
  'dataJson'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 任务所属类别 */
  'fromType'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** jsonId */
  'jsonId'?:string;
  
  /** 新json */
  'newFormJson'?:string;
  
  /** 一键发起需求id */
  'oneClickId'?:string;
  
  /** 接单部门id */
  'receiveDepartId'?:string;
  
  /** 接单部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单部门姓名 */
  'receiveUserName'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 任务状态 */
  'taskStatus'?:string;
  
  /** 任务类型 */
  'taskType'?:string;
  
  /** 任务类型id */
  'taskTypeId'?:string;
  
  /** 需求/告警分类 */
  'twoFromType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExPlanInspectionPatrolPlanTaskDetail {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型id */
  'equipmentTypeId'?:string;
  
  /** 事件名称 */
  'eventName'?:string;
  
  /** 填写值 */
  'fillInValues'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 点检内容 */
  'inspectionContent'?:string;
  
  /** 点检标准 */
  'inspectionStandards'?:string;
  
  /** 巡更计划id */
  'patrolPlanId'?:string;
  
  /** 周期标签(年、月、日可多选) */
  'periodLabel'?:string;
  
  /** 巡检计划id */
  'planId'?:string;
  
  /** 计划类型 */
  'playType'?:string;
  
  /** 记录方式 */
  'recordingMethod'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 点检库id */
  'standardId'?:string;
  
  /** 上限/异常值 */
  'standardValueOffline'?:string;
  
  /** 下限/正常值 */
  'standardValueOnline'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExPlanInspectionPatrolPlanTemplate {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 每日时间范围 */
  'dailyTimeRange'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 计划设备事项清单 */
  'exPlanInspectionPatrolPlanTemplateDetailsList'?:ExPlanInspectionPatrolPlanTemplateDetails[];
  
  /** 执行人 */
  'executor'?:string;
  
  /** 频次 */
  'frequency'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 节假日是否继续生成任务 */
  'ifGenerateTask'?:string;
  
  /** 是否指定日期 */
  'ifSpecifyDate'?:string;
  
  /** 巡检类型 */
  'inspectionType'?:string;
  
  /** 计划周期类型 */
  'planCycleType'?:string;
  
  /** 巡更巡检项目清单vo类List */
  'planDetailsVoList'?:ExPlanInspectionPlanDetailsVo[];
  
  /** 模板名称 */
  'planName'?:string;
  
  /** 模板编号 */
  'planNumber'?:string;
  
  /** 计划状态 */
  'planStuas'?:string;
  
  /** 计划日期结束时间 */
  'plannedDateEnd'?:string;
  
  /** 计划日期范围 */
  'plannedDateRange'?:string;
  
  /** 计划日期开始时间 */
  'plannedDateStart'?:string;
  
  /** 项目类别 */
  'projectCategory'?:string;
  
  /** 所属区域 */
  'region'?:string;
  
  /** 发布计划类型;暂存、已发布 */
  'releaseType'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 审核状态 */
  'reviewStatus'?:string;
  
  /** 审核时间 */
  'reviewTime'?:string;
  
  /** 审核人 */
  'reviewer'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 模板id */
  'templateId'?:string;
  
  /** 模板类型 */
  'templateType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExPlanInspectionPatrolPlanTemplateDetails {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型id */
  'equipmentTypeId'?:string;
  
  /** 事件名称 */
  'eventName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 点检内容 */
  'inspectionContent'?:string;
  
  /** 点检标准 */
  'inspectionStandards'?:string;
  
  /** 巡更计划id */
  'patrolPlanId'?:string;
  
  /** 周期标签(年、月、日可多选) */
  'periodLabel'?:string;
  
  /** 巡检计划id */
  'planId'?:string;
  
  /** 计划类型 */
  'playType'?:string;
  
  /** 记录方式 */
  'recordingMethod'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 点检库id */
  'standardId'?:string;
  
  /** 上限/异常值 */
  'standardValueOffline'?:string;
  
  /** 下限/正常值 */
  'standardValueOnline'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExPlanInspectionPlan {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 每日时间结束时间 */
  'dailyTimeEnd'?:string;
  
  /** 每日时间范围 */
  'dailyTimeRange'?:string;
  
  /** 每日时间开始时间 */
  'dailyTimeStart'?:string;
  
  /** 类型 */
  'dateType'?:string;
  
  /** 执行部门 */
  'department'?:string;
  
  /** 部门id */
  'departmentId'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型ids(新增巡检计划专用) */
  'equipmentTypeIds'?:string;
  
  /** 计划设备事项清单 */
  'exPlanInspectionPlanDetailsList'?:ExPlanInspectionPlanDetails[];
  
  /** 执行人 */
  'executor'?:string;
  
  /** 执行人id */
  'executorId'?:string;
  
  /** 频次 */
  'frequency'?:number;
  
  /** 是否生成任务 */
  'generateTask'?:string;
  
  /** 生成任务时间 */
  'generateTaskTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 节假日是否继续生成任务 */
  'ifGenerateTask'?:string;
  
  /** 是否指定日期 */
  'ifSpecifyDate'?:string;
  
  /** 巡检类型 */
  'inspectionType'?:string;
  
  /** 计划执行日期 */
  'planActivatedDate'?:string[];
  
  /** 计划完成度 */
  'planCompletion'?:number;
  
  /** 计划周期类型 */
  'planCycleType'?:string;
  
  /** 巡更巡检项目清单vo类List */
  'planDetailsVoList'?:ExPlanInspectionPlanDetailsVo[];
  
  /** 计划名称 */
  'planName'?:string;
  
  /** 计划编号 */
  'planNumber'?:string;
  
  /** 计划状态 */
  'planStuas'?:string;
  
  /** 计划任务实体 */
  'planTask'?:ExTaskCenter;
  
  /** 计划设备事项任务清单 */
  'planTaskDetails'?:ExPlanInspectionPatrolPlanTaskDetail[];
  
  /** 计划日期结束时间 */
  'plannedDateEnd'?:string;
  
  /** 计划日期范围 */
  'plannedDateRange'?:string;
  
  /** 计划日期开始时间 */
  'plannedDateStart'?:string;
  
  /** 项目类别 */
  'projectCategory'?:string;
  
  /** 所属区域 */
  'region'?:string;
  
  /** 发布计划类型;暂存、已发布 */
  'releaseType'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 审核状态 */
  'reviewStatus'?:string;
  
  /** 审核时间 */
  'reviewTime'?:string;
  
  /** 审核人 */
  'reviewer'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 模板id */
  'templateId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExPlanInspectionPlanDetails {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型id */
  'equipmentTypeId'?:string;
  
  /** 事件名称 */
  'eventName'?:string;
  
  /** 填写值 */
  'fillInValues'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 点检内容 */
  'inspectionContent'?:string;
  
  /** 点检标准 */
  'inspectionStandards'?:string;
  
  /** 巡更计划id */
  'patrolPlanId'?:string;
  
  /** 周期标签(年、月、日可多选) */
  'periodLabel'?:string;
  
  /** 巡检计划id */
  'planId'?:string;
  
  /** 计划类型 */
  'playType'?:string;
  
  /** 记录方式 */
  'recordingMethod'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 点检库id */
  'standardId'?:string;
  
  /** 上限/异常值 */
  'standardValueOffline'?:string;
  
  /** 下限/正常值 */
  'standardValueOnline'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExPlanInspectionPlanDetailsVo {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 设备类型id */
  'equipmentTypeId'?:string;
  
  /** 巡更标准list */
  'exInspectionStandardsProjectDetailsList'?:ExInspectionStandardsProjectDetails[];
  
  /** 巡更巡检项目list */
  'exPlanInspectionPlanDetails'?:ExPlanInspectionPlanDetails[];
  
  /** 周期标签 */
  'periodLabel'?:string;
  
  /** 巡更巡检项目模板list */
  'templateDetails'?:ExPlanInspectionPatrolPlanTemplateDetails[];
  
  }
  
  

  export interface ExPlanPatrolPlan {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 每日时间结束时间 */
  'dailyTimeEnd'?:string;
  
  /** 每日时间范围 */
  'dailyTimeRange'?:string;
  
  /** 每日时间开始时间 */
  'dailyTimeStart'?:string;
  
  /** 类型 */
  'dateType'?:string;
  
  /** 执行部门 */
  'department'?:string;
  
  /** 部门id */
  'departmentId'?:string;
  
  /** 设备类型 */
  'equipmentType'?:string;
  
  /** 计划设备事项清单 */
  'exPlanInspectionPlanDetailsList'?:ExPlanInspectionPlanDetails[];
  
  /** 执行人 */
  'executor'?:string;
  
  /** 执行人id */
  'executorId'?:string;
  
  /** 频次 */
  'frequency'?:number;
  
  /** 生成任务时间 */
  'generateTaskTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 节假日是否继续生成任务 */
  'ifGenerateTask'?:string;
  
  /** 是否指定日期 */
  'ifSpecifyDate'?:string;
  
  /** 巡检类型 */
  'inspectionType'?:string;
  
  /** 计划执行日期 */
  'planActivatedDate'?:string[];
  
  /** 计划完成度 */
  'planCompletion'?:number;
  
  /** 计划周期类型 */
  'planCycleType'?:string;
  
  /** 计划名称 */
  'planName'?:string;
  
  /** 计划编号 */
  'planNumber'?:string;
  
  /** 计划状态 */
  'planStuas'?:string;
  
  /** 计划任务实体 */
  'planTask'?:ExTaskCenter;
  
  /** 计划设备事项任务清单 */
  'planTaskDetails'?:ExPlanInspectionPatrolPlanTaskDetail[];
  
  /** 计划日期结束时间 */
  'plannedDateEnd'?:string;
  
  /** 计划日期范围 */
  'plannedDateRange'?:string;
  
  /** 计划日期开始时间 */
  'plannedDateStart'?:string;
  
  /** 项目类别 */
  'projectCategory'?:string;
  
  /** 所属区域 */
  'region'?:string;
  
  /** 发布计划类型;暂存、已发布 */
  'releaseType'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 审核状态 */
  'reviewStatus'?:string;
  
  /** 审核时间 */
  'reviewTime'?:string;
  
  /** 审核人 */
  'reviewer'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 模板id */
  'templateId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExProcessWorkOrderRules {

    
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 所属分类（审批流的分类） */
  'classification'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 设备分类 */
  'equipmentType'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'ifEnabling'?:number;
  
  /** 流程id */
  'processId'?:string;
  
  /** 流程标识 */
  'processIdentification'?:string;
  
  /** 流程名称 */
  'processName'?:string;
  
  /** 流程类型（正常、异常） */
  'processType'?:string;
  
  /** 需求类型（内部、外部、展期） */
  'requirementType'?:string;
  
  /** 服务分类 */
  'serviceClassification'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 分类名称（告警中心、需求中心） */
  'typeName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExProjectElectricBoxVo {

    
  /** 拆除数量 */
  'dismantleCompCount'?:number;
  
  /** 电箱总数量 */
  'electricBoxTotal'?:number;
  
  /** 完成数量 */
  'installCompCount'?:number;
  
  /** 接驳数量 */
  'sendCCompCount'?:number;
  
  }
  
  

  export interface ExRecombinationOrder {

    
  /** 附件 */
  'attachment'?:string;
  
  /** 批次id */
  'batchId'?:string;
  
  /** 公司名称 */
  'company'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 展会名称 */
  'exhibitionName'?:string;
  
  /** 展期项目实体列表 */
  'extensionProjects'?:ExDemandCenterExtensionProject[];
  
  /** 分组依据 */
  'groupAccording'?:string;
  
  /** 分组(规则)名称 */
  'groupName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 订单号 */
  'orderNumber'?:string;
  
  /** 订单来源 */
  'orderSource'?:string;
  
  /** 订单状态 */
  'orderStatus'?:string;
  
  /** 订单时间 */
  'orderTime'?:string;
  
  /** 订单类型（现场单、预订单） */
  'orderType'?:string;
  
  /** 展馆号 */
  'pavilion'?:string;
  
  /** 订单备注 */
  'remark'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExSourceDisplayVo {

    
  /** 数据json */
  'dataJson'?:string;
  
  /** 任务所属类别 */
  'fromType'?:string;
  
  /** 新json */
  'newFormJson'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单部门/人员 */
  'receiveDepartNames'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人员 */
  'receiveUserNames'?:string;
  
  /** 任务类型 */
  'taskType'?:string;
  
  /** 需求/告警分类 */
  'twoFromType'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExTaskCenter {

    
  /** 自定义表单 */
  'actRuFormExtend'?:ActRuFormExtend;
  
  /** 审批状态(判断任务是否审批通过还是不通过的) */
  'approvalStatus'?:string;
  
  /** 归档id */
  'archiveId'?:string;
  
  /** 归档时间 */
  'archiveTime'?:string;
  
  /** 归档人 */
  'archivedBy'?:string;
  
  /** 所属分类Id */
  'categoryId'?:string;
  
  /** 子任务 */
  'children'?:ExTaskCenter[];
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 当前状态 */
  'currentState'?:string;
  
  /** 当前状态Vo(判断任务是否可以撤回) */
  'currentStateVo'?:string;
  
  /** 当前任务最父亲id */
  'currteParentId'?:string;
  
  /** 数据json */
  'dateJson'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 派单人部门id */
  'dispatchDepartId'?:string;
  
  /** 派单人部门名称 */
  'dispatchDepartName'?:string;
  
  /** 派单时间 */
  'dispatchTime'?:string;
  
  /** 派单人id */
  'dispatchUserId'?:string;
  
  /** 派单人名称 */
  'dispatchUserName'?:string;
  
  /** 展期需求 */
  'exDemandCenterExtensionProject'?:ExDemandCenterExtensionProject;
  
  /** 展期需求list */
  'exDemandCenterExtensionProjectList'?:ExDemandCenterExtensionProject[];
  
  /** 内部需求 */
  'exDemandCenterInsideProject'?:ExDemandCenterInsideProject;
  
  /** 巡检计划 */
  'exPlanInspectionPlan'?:ExPlanInspectionPlan;
  
  /** 巡更计划 */
  'exPlanPatrolPlan'?:ExPlanPatrolPlan;
  
  /** 告警 */
  'exhAlarm'?:ExhAlarm;
  
  /** 会展数据json */
  'extensionDateJson'?:object;
  
  /** 会展表单json */
  'extensionFormJson'?:object;
  
  /** 是否为外派任务（是为1） */
  'externalFlag'?:boolean;
  
  /** 流程分类Vo */
  'flowTypeVo'?:string;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单json */
  'formJson'?:string;
  
  /** 表单名称Vo */
  'fromNameVo'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否为流程审批任务 */
  'ifBusinessTask'?:number;
  
  /** 是否为服务单位（是为1） */
  'ifService'?:number;
  
  /** 操作说明 */
  'operatingInstructions'?:string;
  
  /** 父id */
  'parentId'?:string;
  
  /** 计划执行时间范围 */
  'planExecutionTimeRangeVo'?:string;
  
  /** 计划执行结束时间 */
  'plannedEndExecutionTime'?:string;
  
  /** 计划执行开始时间 */
  'plannedStartExecutionTime'?:string;
  
  /** 流程id */
  'processId'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单时间 */
  'receiveTime'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 所属分类 */
  'serviceCategory'?:string;
  
  /** 服务项目Vo */
  'serviceItemsVo'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 任务处理完成时间 */
  'taskEndTime'?:string;
  
  /** 任务名称 */
  'taskName'?:string;
  
  /** 任务源id */
  'taskSourceId'?:string;
  
  /** 任务开始处理时间 */
  'taskStartTime'?:string;
  
  /** 任务类型（需求中心、巡检计划、巡更计划、告警中心） */
  'taskType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作内容 */
  'workDetail'?:string;
  
  /** 工作事项 */
  'workItem'?:string;
  
  /** 工作事项id */
  'workItemId'?:string;
  
  /** 工单号 */
  'workOrderNumber'?:string;
  
  /** 工单状态;转单、接单 */
  'workOrderStatus'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExTaskCenterLog {

    
  /** 归档id */
  'archiveId'?:string;
  
  /** 归档时间 */
  'archiveTime'?:string;
  
  /** 归档人 */
  'archivedBy'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 当前状态 */
  'currentState'?:string;
  
  /** 数据json */
  'dateJson'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 派单人部门id */
  'dispatchDepartId'?:string;
  
  /** 派单人部门名称 */
  'dispatchDepartName'?:string;
  
  /** 派单时间 */
  'dispatchTime'?:string;
  
  /** 派单人id */
  'dispatchUserId'?:string;
  
  /** 派单人名称 */
  'dispatchUserName'?:string;
  
  /** 会展数据json */
  'extensionDateJson'?:object;
  
  /** 会展表单json */
  'extensionFormJson'?:object;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单json */
  'formJson'?:string;
  
  /** 主键 */
  'id'?:number;
  
  /** 是否为服务单位（是为1） */
  'ifService'?:number;
  
  /** 操作说明 */
  'operatingInstructions'?:string;
  
  /** 父id */
  'parentId'?:string;
  
  /** 流程id */
  'processId'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单时间 */
  'receiveTime'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 任务处理完成时间 */
  'taskEndTime'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 任务名称 */
  'taskName'?:string;
  
  /** 任务源id */
  'taskSourceId'?:string;
  
  /** 任务开始处理时间 */
  'taskStartTime'?:string;
  
  /** 任务状态 */
  'taskStatus'?:string;
  
  /** 任务类型（展期需求、内部需求、外部需求、巡检计划、巡更计划、设备告警、安防告警、事件告警） */
  'taskType'?:string;
  
  /** 时间戳 */
  'timestamp'?:number;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作内容 */
  'workDetail'?:string;
  
  /** 工作事项 */
  'workItem'?:string;
  
  /** 工单号 */
  'workOrderNumber'?:string;
  
  /** 工单状态;转单、接单 */
  'workOrderStatus'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExTaskCneterProcessingVo {

    
  /** 审批状态(判断任务是否审批通过还是不通过的) */
  'approvalStatus'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 当前状态 */
  'currentState'?:string;
  
  /** 数据json */
  'dateJson'?:string;
  
  /** 会展表单json */
  'extensionFormJson'?:object;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单json */
  'formJson'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单时间 */
  'receiveTime'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 任务处理完成时间 */
  'taskEndTime'?:string;
  
  /** 任务开始处理时间 */
  'taskStartTime'?:string;
  
  /** 工作内容 */
  'workDetail'?:string;
  
  /** 工作事项 */
  'workItem'?:string;
  
  /** 工作事项id */
  'workItemId'?:string;
  
  /** 工单状态;转单、接单 */
  'workOrderStatus'?:string;
  
  }
  
  

  export interface ExTaskProcessIntermediate {

    
  /** 审批类型;验证审批、异常审批 */
  'approvalType'?:string;
  
  /**  */
  'bid'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 操作说明 */
  'operatingInstructions'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /**  */
  'tid'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExVisitor {

    
  /** 预约时间 */
  'appointmentTime'?:string;
  
  /** 车牌号 */
  'carNumber'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 备注 */
  'remarks'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 访问部门 */
  'visitDepartment'?:string;
  
  /** 访问人员姓名 */
  'visitName'?:string;
  
  /** 来访目的 */
  'visitPurpose'?:string;
  
  /** 来访时间 */
  'visitTime'?:string;
  
  /** 访客公司 */
  'visitorCompany'?:string;
  
  /** 访客部门 */
  'visitorDepartment'?:string;
  
  /** 访客姓名 */
  'visitorName'?:string;
  
  /** 访客电话 */
  'visitorPhone'?:string;
  
  /** 访客性别 */
  'visitorSex'?:string;
  
  /** 访客状态 */
  'visitorStatus'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 核销人 */
  'writeOffBy'?:string;
  
  /** 核销时间 */
  'writeOffTime'?:string;
  
  }
  
  

  export interface ExWorkItem {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 需求类别 */
  'demandType'?:string;
  
  /** 流程分类 */
  'flowType'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 流程模型key */
  'modelKey'?:string;
  
  /** 接单部门id */
  'receiveDepartId'?:string;
  
  /** 接单部门名称 */
  'receiveDepartName'?:string;
  
  /** 任务类型id */
  'serviceCategoryId'?:string;
  
  /** 任务类型名称 */
  'serviceCategoryName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作内容 */
  'workDetail'?:string;
  
  /** 工作事项 */
  'workItem'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExWorkingGroup {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 工作组人员listwork */
  'exWorkingGroupPersonList'?:ExWorkingGroupPerson[];
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 工作组人员list */
  'sysUserList'?:SysUser[];
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组名称 */
  'workerName'?:string;
  
  }
  
  

  export interface ExWorkingGroupPerson {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 所属部门ids */
  'departIds'?:string;
  
  /** 所属部门 */
  'departments'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'isEnabled'?:number;
  
  /** 联系方式 */
  'phone'?:string;
  
  /** 职位id */
  'postId'?:string;
  
  /** 职位名称 */
  'postName'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 所属组别 */
  'userGroup'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  /** 姓名 */
  'username'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workerId'?:string;
  
  }
  
  

  export interface ExhAlarm {

    
  /** 告警附件 */
  'alarmAttachments'?:ExhAlarmAttachment[];
  
  /** 告警属性 */
  'alarmAttributes'?:ExhAlarmAttribute[];
  
  /** (电箱)告警展位号 */
  'alarmBoothCode'?:string;
  
  /** 电箱告警实例级别 */
  'alarmBoxLevel'?:number;
  
  /** 告警实例所属的告警规格 */
  'alarmDef'?:ExhAlarmDef;
  
  /** 告警规格分类标识符 */
  'alarmDefCategoryCode'?:string;
  
  /** 告警规格所在分类对象ID */
  'alarmDefCategoryId'?:string;
  
  /** 告警规格分类名称 */
  'alarmDefCategoryName'?:string;
  
  /** 告警规格标识符 */
  'alarmDefCode'?:string;
  
  /** 告警实例所属的告警规格对象ID */
  'alarmDefId'?:string;
  
  /** 告警规格名称 */
  'alarmDefName'?:string;
  
  /** 告警实例级别。· INFO：提示· NORMAL：普通· MAJOR：重要· CRITICAL：严重 */
  'alarmLevel'?:string;
  
  /** 告警实例发生的空间 */
  'alarmLocation'?:DwiSpaceRecordTjgz;
  
  /** 告警实例所在的地理坐标 */
  'alarmLocationCoordinate'?:string;
  
  /** 告警实例发生的空间位置ID */
  'alarmLocationId'?:string;
  
  /** 告警实例空间路径 */
  'alarmLocationPath'?:string;
  
  /** 告警实例所在的最小空间实例的名称 */
  'alarmLocationSpaceName'?:string;
  
  /** 告警实例的唯一编号 */
  'alarmNumber'?:string;
  
  /** 告警实例的处理流程。· 待处理 · 处理中· 已完成 */
  'alarmProcess'?:string;
  
  /** 告警实例的生命周期状态。· CREATED：已创建· CONFIRMED：已确认· HANDLING：处理中· CLOSED：已关闭· PENDING：挂起中 */
  'alarmStatus'?:string;
  
  /** 告警任务实体 */
  'alarmTask'?:ExTaskCenter;
  
  /** 告警实例发生的来源渠道ID */
  'channelIdAlarm'?:string;
  
  /** 告警关闭原因 */
  'closeReason'?:string;
  
  /** 告警实例的关闭时间 */
  'closingTime'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建数据json */
  'createDateJson'?:string;
  
  /** 创建表单id */
  'createFormId'?:string;
  
  /** 创建表单json */
  'createFormJson'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 部门负责人 */
  'department'?:string;
  
  /** 部门负责人id */
  'departmentHeadId'?:string;
  
  /** 告警实例的描述文本 */
  'description'?:string;
  
  /** 设备告警任务类型 */
  'deviceAlarmTaskType'?:string;
  
  /** 告警实例发生的来源设备类型 */
  'deviceCategoryAlarm'?:string;
  
  /** 告警实例发生的来源设备ID */
  'deviceIdAlarm'?:string;
  
  /** 告警实例发生的来源(电箱)设备名称 */
  'deviceName'?:string;
  
  /** 告警误报原因 */
  'distortReason'?:string;
  
  /** 事件告警任务类型 */
  'eventAlarmTaskType'?:string;
  
  /** 告警实例ID */
  'id'?:string;
  
  /** 最后更新时间。如果当前告警允许告警合并，则为最后一次上报该告警的时间 */
  'lastUpdateTime'?:string;
  
  /** 是否为人工告警 */
  'manualFlag'?:number;
  
  /** 告警实例的发生时间 */
  'occurringTime'?:string;
  
  /** 一键发起需求id */
  'oneClickId'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 告警关联的摄像头code。支持多个，多个时以逗号隔开 */
  'relatedCamera'?:string;
  
  /** 告警重复上报次数。如果当前告警的告警规格不允许合并告警，则为1 */
  'reportTimes'?:number;
  
  /** 告警上报人的身份id */
  'reporterId'?:string;
  
  /** 安防告警任务类型 */
  'securityAlarmTaskType'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 流转数据json */
  'taskDateJson'?:string;
  
  /** 流转表单id */
  'taskFormId'?:string;
  
  /** 流转表单json */
  'taskFormJson'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  
  

  export interface ExhAlarmArchivedRule {

    
  /** 是否启用 */
  'activeFlag'?:number;
  
  /** 告警设备类型(设备告警 | 安防告警 专用) */
  'alarmDeviceCategory'?:string;
  
  /** 告警类型(设备告警 | 安防告警 | 事件告警) */
  'alarmType'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 需求服务项(会展商业需求 专用) */
  'demandServiceItem'?:string;
  
  /** 需求任务类型(内部需求 | 外部需求 专用) */
  'demandTaskType'?:string;
  
  /** 需求类型(会展商业需求 | 内部需求 | 外部需求) */
  'demandType'?:string;
  
  /** 过期时长 */
  'expireTime'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 计划类型(巡检计划 | 巡更计划) */
  'planType'?:string;
  
  /** 规则类型(告警|需求|计划) */
  'ruleType'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmAttachment {

    
  /** 告警实例的ID */
  'alarmIdAttach'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 附件的描述 */
  'description'?:string;
  
  /** 该字段为设备实例ID，表示该附件是由哪个设备捕捉生成的 */
  'deviceIdAttach'?:string;
  
  /** 告警实例的附件ID */
  'id'?:string;
  
  /** 附件的URL路径 */
  'path'?:string;
  
  /** 告警消息中位置信息，以逗号隔开，顺序为左，上，右，下 */
  'position'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 告警实例的附件类型 */
  'type'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmAttribute {

    
  /** 告警属性单位 */
  'alarmAttributeUnit'?:string;
  
  /** 告警ID */
  'alarmIdAttr'?:string;
  
  /** 告警属性定义 */
  'attrDef'?:ExhAlarmAttributeDef;
  
  /** 告警实例属性的属性定义ID */
  'attrDefId'?:string;
  
  /** 告警实例属性的属性值 */
  'attrValue'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警属性id */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmAttributeDef {

    
  /** 告警规格属性的标识符 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警规格属性定义的ID */
  'id'?:string;
  
  /** 告警规格属性的名称 */
  'label'?:string;
  
  /** 告警规格属性是否强制的 */
  'mandatoryFlag'?:number;
  
  /** 当原始类型为枚举类型时，可选项所来自的Picklist的名称 */
  'picklistName'?:string;
  
  /** 告警规格属性的原始类型 */
  'primaryType'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 告警实例属性单位 */
  'unit'?:ExhAlarmUnit;
  
  /** 告警规格属性的单位ID */
  'unitId'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmDef {

    
  /** 告警规格标识符 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 告警属性规格分类 */
  'defCategory'?:ExhAlarmDefCategory;
  
  /** 告警规格所在分类对象ID */
  'defCategoryId'?:string;
  
  /** 告警规格名称 */
  'defName'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警规格ID */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmDefCategory {

    
  /** 告警规格分类名称 */
  'categoryName'?:string;
  
  /** 告警规格分类标识符 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警规格分类ID */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmDefDisplay {

    
  /** 告警到达时提示音频ID */
  'audioId'?:string;
  
  /** 告警到达时提示音频URL */
  'audioUrl'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警的显示图标ID */
  'iconId'?:string;
  
  /** 告警的显示图标URL */
  'iconUrl'?:string;
  
  /** 显示信息id */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmDevice {

    
  /** 告警编号 */
  'alarmCode'?:string;
  
  /** 告警描述 */
  'alarmDescription'?:string;
  
  /** 告警等级 */
  'alarmLevel'?:string;
  
  /** 告警进度 */
  'alarmProcess'?:string;
  
  /** 告警状态 */
  'alarmStatus'?:string;
  
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 关闭原因 */
  'closeReason'?:string;
  
  /** 关闭时间 */
  'closingTime'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 设备关闭时间 */
  'deviceCloseTime'?:string;
  
  /** 设备id */
  'deviceIdAlarm'?:string;
  
  /** 误报原因 */
  'distortReason'?:string;
  
  /** 超时时间 */
  'expireTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 图片链接 */
  'image'?:string;
  
  /** 发生位置 */
  'location'?:string;
  
  /** 发生时间 */
  'occurTime'?:string;
  
  /** 责任人id */
  'responsibleId'?:string;
  
  /** 责任人名称 */
  'responsibleName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 标题 */
  'title'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 视频链接 */
  'video'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmDispatchRule {

    
  /** 是否启用 */
  'activatedFlag'?:number;
  
  /** 告警规格分类ID */
  'alarmDefCategoryId'?:string;
  
  /** 告警规格分类名称 */
  'alarmDefCategoryName'?:string;
  
  /** 告警规格ID */
  'alarmDefId'?:string;
  
  /** 告警规格名称 */
  'alarmDefName'?:string;
  
  /** 告警位置ID */
  'alarmLocationId'?:string;
  
  /** 告警位置名称 */
  'alarmLocationName'?:string;
  
  /** 告警派单规则的标识符 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 部门负责人ID */
  'departmentHeadId'?:string;
  
  /** 告警派单规则ID */
  'id'?:string;
  
  /** 告警派单规则的名称 */
  'label'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmEvent {

    
  /** 告警编号 */
  'alarmCode'?:string;
  
  /** 告警描述 */
  'alarmDescription'?:string;
  
  /** 告警等级 */
  'alarmLevel'?:string;
  
  /** 告警进度 */
  'alarmProcess'?:string;
  
  /** 告警状态 */
  'alarmStatus'?:string;
  
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 关闭原因 */
  'closeReason'?:string;
  
  /** 关闭时间 */
  'closingTime'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 误报原因 */
  'distortReason'?:string;
  
  /** 超时时间 */
  'expireTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 图片 */
  'image'?:string;
  
  /** 发生位置 */
  'location'?:string;
  
  /** 发生时间 */
  'occurTime'?:string;
  
  /** 责任人id */
  'responsibleId'?:string;
  
  /** 责任人名称 */
  'responsibleName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 标题 */
  'title'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 视频 */
  'video'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmExpireRule {

    
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 过期时长 */
  'expireTime'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'startStatus'?:number;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmLocation {

    
  /** 告警实例所在的地理坐标 */
  'coordinate'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 告警位置id */
  'id'?:string;
  
  /** 告警实例所在的最小空间实例的ID */
  'spaceId'?:string;
  
  /** 告警实例所在的最小空间实例的名称 */
  'spaceName'?:string;
  
  /** 告警实例所在的最小空间 */
  'spaces'?:ExhAlarmSpace[];
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmSecurity {

    
  /** 告警编号 */
  'alarmCode'?:string;
  
  /** 告警描述 */
  'alarmDescription'?:string;
  
  /** 告警等级 */
  'alarmLevel'?:string;
  
  /** 告警进度 */
  'alarmProcess'?:string;
  
  /** 告警状态 */
  'alarmStatus'?:string;
  
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 关闭原因 */
  'closeReason'?:string;
  
  /** 关闭时间 */
  'closingTime'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 误报原因 */
  'distortReason'?:string;
  
  /** 超时时间 */
  'expireTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 图片 */
  'image'?:string;
  
  /** 发生位置 */
  'location'?:string;
  
  /** 发生时间 */
  'occurTime'?:string;
  
  /** 责任人id */
  'responsibleId'?:string;
  
  /** 责任人名称 */
  'responsibleName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 标题 */
  'title'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 视频 */
  'video'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmSpace {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 空间节点实例的ID */
  'id'?:string;
  
  /** 空间节点实例的父亲节点ID */
  'parentId'?:string;
  
  /** 空间节点实例所属的空间层级ID */
  'spaceLevel'?:string;
  
  /** 空间节点实例的名称 */
  'spaceName'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmUnit {

    
  /** 单位定义的标识符 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 单位定义的ID */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 单位定义的名称 */
  'unitLabel'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhAlarmUpgradRule {

    
  /** 告警类型 */
  'alarmType'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否启用 */
  'startStatus'?:number;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 升级时间 */
  'upgradeTime'?:number;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhDeviceParam {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 设备id */
  'deviceIdParam'?:string;
  
  /** 参数字典id */
  'dictIdParam'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 参数名称 */
  'name'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 参数值 */
  'value'?:string;
  
  /** 值类型 */
  'valueType'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhDeviceParamDict {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 默认值 */
  'defaultValue'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 设备型号 */
  'model'?:string;
  
  /** 参数名称 */
  'name'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhDeviceRecord {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 设备id */
  'deviceIdRecord'?:string;
  
  /** 设备状态 */
  'deviceStatus'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /**  */
  'planDetailId'?:string;
  
  /**  */
  'planDetails'?:ExPlanInspectionPlanDetails;
  
  /** 记录详述 */
  'recordDetail'?:string;
  
  /** 记录时间 */
  'recordTime'?:string;
  
  /** 记录类型(点检/维修) */
  'recordType'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhDeviceStatistic {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /**  */
  'demandId'?:string;
  
  /**  */
  'deviceLabel'?:string;
  
  /**  */
  'deviceName'?:string;
  
  /**  */
  'deviceQuantity'?:string;
  
  /**  */
  'exhibitAreaLabel'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhDeviceTag {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 设备id */
  'deviceId'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 标签编码 */
  'tagCode'?:string;
  
  /** 标签名称 */
  'tagName'?:string;
  
  /** 标签类型(二维码/NFC) */
  'tagType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhOrder {

    
  /** 订单委托人 */
  'assignee'?:string;
  
  /** 订单编码 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 订单描述 */
  'description'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 订单进度 */
  'orderProcess'?:string;
  
  /** 订单状态 */
  'orderStatus'?:string;
  
  /** 订单责任人 */
  'responsible'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhPatrolAttendance {

    
  /** 出勤人 */
  'attendee'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 清单id */
  'detailId'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 巡检巡更计划id */
  'patrolId'?:string;
  
  /** 计划类型 */
  'patrolType'?:string;
  
  /** 记录时间 */
  'recordTime'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhPlanDocument {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间（归档日期） */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 主键 */
  'id'?:string;
  
  /** 计划id */
  'planId'?:string;
  
  /** 处理结果 */
  'result'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface ExhServiceGroupRule {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间（归档日期） */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 分组名称 */
  'groupName'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 服务类型id */
  'serviceCategoryIds'?:string;
  
  /** 服务类型名称 */
  'serviceCategoryNames'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  }
  
  

  export interface ExhWorkOrder {

    
  /** 工单编号 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 工单描述 */
  'description'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 工单委托人 */
  'orderAssignee'?:string;
  
  /** 工单操作 */
  'orderOperation'?:string;
  
  /** 工单进度 */
  'orderProcess'?:string;
  
  /** 工单责任人 */
  'orderResponsible'?:string;
  
  /** 工单状态 */
  'orderStatus'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface HistoricProcessInsVo {

    
  /**  */
  'applyer'?:string;
  
  /**  */
  'businessKey'?:string;
  
  /**  */
  'deleteReason'?:string;
  
  /**  */
  'deployId'?:string;
  
  /**  */
  'description'?:string;
  
  /**  */
  'duration'?:number;
  
  /**  */
  'endTime'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'key'?:string;
  
  /**  */
  'name'?:string;
  
  /**  */
  'procDefId'?:string;
  
  /**  */
  'result'?:number;
  
  /**  */
  'routeName'?:string;
  
  /**  */
  'startTime'?:string;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'tenantId'?:string;
  
  /**  */
  'version'?:number;
  
  }
  
  

  export interface HistoricTaskVo {

    
  /**  */
  'applyTime'?:string;
  
  /**  */
  'applyer'?:string;
  
  /**  */
  'assignee'?:string;
  
  /**  */
  'assignees'?:Assignee[];
  
  /** 业务数据 */
  'bizParams'?:string;
  
  /**  */
  'businessKey'?:string;
  
  /**  */
  'category'?:string;
  
  /**  */
  'comment'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'dataMap'?:object;
  
  /**  */
  'deleteReason'?:string;
  
  /**  */
  'description'?:string;
  
  /**  */
  'dueTime'?:string;
  
  /**  */
  'duration'?:number;
  
  /**  */
  'endTime'?:string;
  
  /**  */
  'executionId'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'key'?:string;
  
  /**  */
  'name'?:string;
  
  /**  */
  'owner'?:string;
  
  /**  */
  'priority'?:number;
  
  /**  */
  'procDefId'?:string;
  
  /**  */
  'procInstId'?:string;
  
  /**  */
  'processName'?:string;
  
  /**  */
  'result'?:number;
  
  /**  */
  'routeName'?:string;
  
  /**  */
  'startTime'?:string;
  
  /**  */
  'status'?:number;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'workTime'?:number;
  
  }
  
  

  export interface IPage_ActReModelDetail {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActReModelDetail[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActRuFormExtend {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActRuFormExtend[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActRuForm {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActRuForm[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActZAgent {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActZAgent[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActZApprovalRecord {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActZApprovalRecord[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActZBusinessData {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActZBusinessData[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ActZProcessNode {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ActZProcessNode[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_AnnouncementSendModel {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:AnnouncementSendModel[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_AppMember {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:AppMember[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_DwiFacilityDefinitionTjgz {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:DwiFacilityDefinitionTjgz[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_DwiFacilityInstanceTjgz {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:DwiFacilityInstanceTjgz[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_DwiFacilityMenuTjgz {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:DwiFacilityMenuTjgz[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_DwiFacilityProductTjgz {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:DwiFacilityProductTjgz[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_DwiSpaceRecordTjgz {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:DwiSpaceRecordTjgz[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExBusinessParameterManagement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExBusinessParameterManagement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDemandCenterExtensionOrder {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDemandCenterExtensionOrder[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDemandCenterExtensionProjectDetails {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDemandCenterExtensionProjectDetails[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDemandCenterExtensionProject {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDemandCenterExtensionProject[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDemandCenterInsideOrder {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDemandCenterInsideOrder[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDemandCenterInsideProject {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDemandCenterInsideProject[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDictPointPosition {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDictPointPosition[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDictServiceCategory {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDictServiceCategory[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDictServiceDictionary {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDictServiceDictionary[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDispatchRulesDetails {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDispatchRulesDetails[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDispatchRules {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDispatchRules[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExDrawingDemandCenterExtensionProject {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExDrawingDemandCenterExtensionProject[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExEquipmentElevatorManagement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExEquipmentElevatorManagement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExEventCooperativeManagement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExEventCooperativeManagement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExEventManagement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExEventManagement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExEventUserRelate {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExEventUserRelate[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExEventUserSaveVo {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExEventUserSaveVo[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExExhibitionHallManagement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExExhibitionHallManagement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExInspectionStandardsProjectDetails {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExInspectionStandardsProjectDetails[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExInspectionStandards {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExInspectionStandards[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExOneClickRequirement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExOneClickRequirement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExOneClickTasksDetailed {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExOneClickTasksDetailed[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanInspectionPatrolPlanTaskDetail {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanInspectionPatrolPlanTaskDetail[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanInspectionPatrolPlanTemplateDetails {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanInspectionPatrolPlanTemplateDetails[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanInspectionPatrolPlanTemplate {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanInspectionPatrolPlanTemplate[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanInspectionPlanDetails {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanInspectionPlanDetails[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanInspectionPlan {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanInspectionPlan[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExPlanPatrolPlan {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExPlanPatrolPlan[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExProcessWorkOrderRules {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExProcessWorkOrderRules[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExRecombinationOrder {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExRecombinationOrder[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExTaskCenterLog {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExTaskCenterLog[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExTaskCenter {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExTaskCenter[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExTaskProcessIntermediate {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExTaskProcessIntermediate[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExVisitor {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExVisitor[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExWorkItem {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExWorkItem[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExWorkingGroupPerson {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExWorkingGroupPerson[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExWorkingGroup {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExWorkingGroup[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmArchivedRule {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmArchivedRule[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmAttachment {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmAttachment[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmAttributeDef {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmAttributeDef[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmAttribute {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmAttribute[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmDefCategory {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmDefCategory[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmDefDisplay {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmDefDisplay[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmDef {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmDef[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmDevice {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmDevice[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmDispatchRule {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmDispatchRule[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmEvent {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmEvent[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmExpireRule {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmExpireRule[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmLocation {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmLocation[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmSecurity {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmSecurity[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmSpace {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmSpace[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmUnit {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmUnit[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarmUpgradRule {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarmUpgradRule[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhAlarm {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhAlarm[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhDeviceParamDict {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhDeviceParamDict[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhDeviceParam {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhDeviceParam[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhDeviceRecord {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhDeviceRecord[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhDeviceTag {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhDeviceTag[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhOrder {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhOrder[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhPatrolAttendance {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhPatrolAttendance[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhPlanDocument {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhPlanDocument[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhServiceGroupRule {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhServiceGroupRule[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_ExhWorkOrder {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:ExhWorkOrder[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_HistoricTaskVo {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:HistoricTaskVo[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_MemberUserManager {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:MemberUserManager[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SjLog {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SjLog[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysAnnouncementSend {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysAnnouncementSend[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysAnnouncement {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysAnnouncement[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysCategory {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysCategory[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysConfig {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysConfig[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysDataLog {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysDataLog[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysDictItem {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysDictItem[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysDict {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysDict[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysFile {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysFile[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysLog {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysLog[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysRole {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysRole[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysSmsTemplate {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysSmsTemplate[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysSms {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysSms[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysTenant {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysTenant[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysUserAgent {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysUserAgent[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_SysUser {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:SysUser[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_sys_data_source对象 {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:sys_data_source对象[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_sys_depart_role对象 {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:sys_depart_role对象[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface IPage_sys_position对象 {

    
  /**  */
  'current'?:number;
  
  /**  */
  'pages'?:number;
  
  /**  */
  'records'?:sys_position对象[];
  
  /**  */
  'size'?:number;
  
  /**  */
  'total'?:number;
  
  }
  
  

  export interface JSONObject {

    
  }
  
  

  export interface LoginBo {

    
  /** 部门 */
  'departs'?:SysDepart[];
  
  /** 是否多部门 1是 0 不是 */
  'multi_depart'?:number;
  
  /** 字典信息 */
  'sysAllDictItems'?:object;
  
  /** 组合list */
  'tenantList'?:SysTenant[];
  
  /** token */
  'token'?:string;
  
  /** 用户信息 */
  'userInfo'?:SysUser;
  
  }
  
  

  export interface LoginUser {

    
  /**  */
  'activitiSync'?:number;
  
  /**  */
  'avatar'?:string;
  
  /**  */
  'birthday'?:string;
  
  /**  */
  'clientId'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'delFlag'?:number;
  
  /**  */
  'departIds'?:string;
  
  /**  */
  'email'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'orgCode'?:string;
  
  /**  */
  'password'?:string;
  
  /**  */
  'phone'?:string;
  
  /**  */
  'post'?:string;
  
  /**  */
  'realname'?:string;
  
  /**  */
  'relTenantIds'?:string;
  
  /**  */
  'sex'?:number;
  
  /**  */
  'status'?:number;
  
  /**  */
  'telephone'?:string;
  
  /**  */
  'userIdentity'?:number;
  
  /**  */
  'username'?:string;
  
  }
  
  

  export interface Map {

    
  }
  
  

  export interface Map_string_int {

    
  }
  
  

  export interface Map_string_string {

    
  }
  
  

  export interface MemberUserManager {

    
  /** 同步工作流引擎(1-同步,0-不同步) */
  'activitiSync'?:number;
  
  /** 头像 */
  'avatar'?:string;
  
  /** 生日 */
  'birthday'?:string;
  
  /** 设备ID */
  'clientId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 负责部门 */
  'departIds'?:string;
  
  /** 电子邮件 */
  'email'?:string;
  
  /** 主键id */
  'id'?:string;
  
  /** 机构编码 */
  'orgCode'?:string;
  
  /** 部门名称 */
  'orgCodeTxt'?:string;
  
  /** 电话 */
  'phone'?:string;
  
  /** 职务，关联职务表 */
  'post'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 多租户标识 */
  'relTenantIds'?:string;
  
  /** 性别(0-默认未知,1-男,2-女) */
  'sex'?:number;
  
  /** 性别(1-正常,2-冻结) */
  'status'?:number;
  
  /** 用户id */
  'sysUserId'?:string;
  
  /** 座机号 */
  'telephone'?:string;
  
  /** 第三方登录的唯一标识 */
  'thirdId'?:string;
  
  /** 第三方类型 */
  'thirdType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 身份（1普通成员 2上级） */
  'userIdentity'?:number;
  
  /** 工号，唯一键 */
  'workNo'?:string;
  
  }
  
  

  export interface Model {

    
  /**  */
  'category'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'deploymentId'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'key'?:string;
  
  /**  */
  'lastUpdateTime'?:string;
  
  /**  */
  'metaInfo'?:string;
  
  /**  */
  'name'?:string;
  
  /**  */
  'tenantId'?:string;
  
  /**  */
  'version'?:number;
  
  }
  
  

  export interface ModelAndView {

    
  /**  */
  'empty'?:boolean;
  
  /**  */
  'model'?:object;
  
  /**  */
  'modelMap'?:object;
  
  /**  */
  'reference'?:boolean;
  
  /**  */
  'status'?:EnumModelAndViewStatus;
  
  /**  */
  'view'?:View;
  
  /**  */
  'viewName'?:string;
  
  }
  
  

  export interface MsgParams {

    
  /**  */
  'msgType'?:string;
  
  /**  */
  'receiver'?:string;
  
  /**  */
  'templateCode'?:string;
  
  /**  */
  'testData'?:string;
  
  }
  
  

  export interface ProcessInsVo {

    
  /**  */
  'actId'?:string;
  
  /**  */
  'applyer'?:string;
  
  /**  */
  'businessKey'?:string;
  
  /**  */
  'currTaskName'?:string;
  
  /**  */
  'deployId'?:string;
  
  /**  */
  'description'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'isSuspended'?:boolean;
  
  /**  */
  'key'?:string;
  
  /**  */
  'name'?:string;
  
  /**  */
  'parentId'?:string;
  
  /**  */
  'procDefId'?:string;
  
  /**  */
  'procInstId'?:string;
  
  /**  */
  'routeName'?:string;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'tenantId'?:string;
  
  /**  */
  'version'?:number;
  
  }
  
  

  export interface ProcessNodeVo {

    
  /** 流程节点id  */
  'actNodeId'?:string;
  
  /** 审批类型  */
  'approvalType'?:string;
  
  /** 权限按钮,分割  */
  'btnAuths'?:string;
  
  /** 选操作人的部门负责人 */
  'chooseDepHeader'?:boolean;
  
  /** 选操作人 */
  'chooseSponsor'?:boolean;
  
  /** 配置json */
  'configJson'?:string;
  
  /** 关联部门负责人 */
  'departmentManages'?:Department[];
  
  /** 关联部门 */
  'departments'?:Department[];
  
  /** 节点展开 前端所需 */
  'expand'?:boolean;
  
  /** 是否是模型节点 */
  'flagModel'?:number;
  
  /** 表单变量 */
  'formVariables'?:string;
  
  /** 节点id */
  'id'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 关联角色 */
  'roles'?:Role[];
  
  /** 节点名 */
  'title'?:string;
  
  /** 节点类型 0开始 1用户任务 2结束 3排他网关 4并行网关 */
  'type'?:number;
  
  /** 关联用户 */
  'users'?:LoginUser[];
  
  }
  
  

  export interface Role {

    
  /**  */
  'description'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'roleCode'?:string;
  
  /**  */
  'roleName'?:string;
  
  }
  
  

  export interface SaveBPMNModelBo {

    
  /** 描述 */
  'description'?:string;
  
  /** json_xml */
  'jsonXml'?:string;
  
  /** 模型id */
  'modelId'?:string;
  
  /** 名称 */
  'name'?:string;
  
  /** svg_xml */
  'svgXml'?:string;
  
  }
  
  

  export interface SendMessageBo {

    
  /** 创建时间 */
  'createTime'?:string;
  
  /** 房间id */
  'groupId'?:string;
  
  /** 消息 */
  'msg'?:string;
  
  /** 发送人 */
  'userId'?:string;
  
  }
  
  

  export interface SjLog {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 日志内容 */
  'logContent'?:string;
  
  /** 日志标题 */
  'logTitle'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface SysAnnouncement {

    
  /** 业务id */
  'busId'?:string;
  
  /** 业务类型(email:邮件 bpm:流程) */
  'busType'?:string;
  
  /** 撤销时间 */
  'cancelTime'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态（0，正常，1已删除） */
  'delFlag'?:string;
  
  /** 钉钉task_id，用于撤回消息 */
  'dtTaskId'?:string;
  
  /** 结束时间 */
  'endTime'?:string;
  
  /** 是否需要弹窗 */
  'flagModal'?:number;
  
  /**  */
  'id'?:string;
  
  /** 摘要 */
  'msgAbstract'?:string;
  
  /** 消息类型1:通知公告2:系统消息 */
  'msgCategory'?:string;
  
  /** 内容 */
  'msgContent'?:string;
  
  /** 通告对象类型（USER:指定用户，ALL:全体用户） */
  'msgType'?:string;
  
  /** 组件/路由 地址 */
  'openPage'?:string;
  
  /** 打开方式 组件：component 路由：url */
  'openType'?:string;
  
  /** 优先级（L低，M中，H高） */
  'priority'?:string;
  
  /** 发布状态（0未发布，1已发布，2已撤销） */
  'sendStatus'?:string;
  
  /** 发布时间 */
  'sendTime'?:string;
  
  /** 发布人 */
  'sender'?:string;
  
  /** 开始时间 */
  'startTime'?:string;
  
  /**  */
  'titile'?:string;
  
  /** 发布人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 指定用户 */
  'userIds'?:string;
  
  }
  
  

  export interface SysAnnouncementSend {

    
  /** 通告id */
  'anntId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** id */
  'id'?:string;
  
  /** 阅读状态（0未读，1已读） */
  'readFlag'?:string;
  
  /** 阅读时间 */
  'readTime'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  }
  
  

  export interface SysCategory {

    
  /** 类型编码 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 是否有子节点 */
  'hasChild'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 类型名称 */
  'name'?:string;
  
  /** 类型路径 */
  'path'?:string;
  
  /** 父级节点 */
  'pid'?:string;
  
  /** 所属部门 */
  'sysOrgCode'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysConfig {

    
  /** 组件类型 */
  'componentType'?:string;
  
  /** 参数键名 */
  'configKey'?:string;
  
  /** 系统内置（1是;1是0否 */
  'configType'?:string;
  
  /** 参数键值 */
  'configValue'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 权重 */
  'weight'?:number;
  
  }
  
  

  export interface SysDataLog {

    
  /** 创建人登录名称 */
  'createBy'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 数据内容 */
  'dataContent'?:string;
  
  /** 数据ID */
  'dataId'?:string;
  
  /** 表名 */
  'dataTable'?:string;
  
  /** 版本号 */
  'dataVersion'?:string;
  
  /** id */
  'id'?:string;
  
  /** 更新人登录名称 */
  'updateBy'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysDepart {

    
  /** 地址 */
  'address'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 删除状态（0，正常，1已删除） */
  'delFlag'?:string;
  
  /** 机构/部门名称 */
  'departName'?:string;
  
  /** 缩写 */
  'departNameAbbr'?:string;
  
  /** 英文名 */
  'departNameEn'?:string;
  
  /** 排序 */
  'departOrder'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 传真 */
  'fax'?:string;
  
  /** ID */
  'id'?:string;
  
  /** 是否为服务单位（是为1） */
  'ifService'?:number;
  
  /** 备注 */
  'memo'?:string;
  
  /** 手机号 */
  'mobile'?:string;
  
  /** 机构类别 1公司，2组织机构，2岗位 */
  'orgCategory'?:string;
  
  /** 机构编码 */
  'orgCode'?:string;
  
  /** 机构类型 */
  'orgType'?:string;
  
  /** 父机构ID */
  'parentId'?:string;
  
  /** 对接企业微信的ID */
  'qywxIdentifier'?:string;
  
  /**  状态（1启用，0不启用） */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysDepartTreeModel {

    
  /**  */
  'address'?:string;
  
  /**  */
  'children'?:SysDepartTreeModel[];
  
  /**  */
  'createBy'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'delFlag'?:string;
  
  /**  */
  'departName'?:string;
  
  /**  */
  'departNameAbbr'?:string;
  
  /**  */
  'departNameEn'?:string;
  
  /**  */
  'departOrder'?:number;
  
  /**  */
  'description'?:string;
  
  /**  */
  'fax'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'ifService'?:number;
  
  /**  */
  'isLeaf'?:boolean;
  
  /**  */
  'key'?:string;
  
  /**  */
  'memo'?:string;
  
  /**  */
  'mobile'?:string;
  
  /**  */
  'orgCategory'?:string;
  
  /**  */
  'orgCode'?:string;
  
  /**  */
  'orgType'?:string;
  
  /**  */
  'parentId'?:string;
  
  /**  */
  'qywxIdentifier'?:string;
  
  /**  */
  'status'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'updateBy'?:string;
  
  /**  */
  'updateTime'?:string;
  
  /**  */
  'value'?:string;
  
  }
  
  

  export interface SysDepartUsersVO {

    
  /**  */
  'depId'?:string;
  
  /**  */
  'userIdList'?:string[];
  
  }
  
  

  export interface SysDepartVo {

    
  /** 地址 */
  'address'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 删除状态（0，正常，1已删除） */
  'delFlag'?:string;
  
  /** 机构/部门名称 */
  'departName'?:string;
  
  /** 缩写 */
  'departNameAbbr'?:string;
  
  /** 英文名 */
  'departNameEn'?:string;
  
  /** 排序 */
  'departOrder'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 传真 */
  'fax'?:string;
  
  /** ID */
  'id'?:string;
  
  /** 备注 */
  'memo'?:string;
  
  /** 手机号 */
  'mobile'?:string;
  
  /** 机构类别 1公司，2组织机构，2岗位 */
  'orgCategory'?:string;
  
  /** 机构编码 */
  'orgCode'?:string;
  
  /** 机构类型 */
  'orgType'?:string;
  
  /** 父机构ID */
  'parentId'?:string;
  
  /** 对接企业微信的ID */
  'qywxIdentifier'?:string;
  
  /**  状态（1启用，0不启用） */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysDict {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态 */
  'delFlag'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 字典编码 */
  'dictCode'?:string;
  
  /** 字典名称 */
  'dictName'?:string;
  
  /** 字典类别 */
  'dictType'?:string;
  
  /** id */
  'id'?:string;
  
  /** 字典类型 */
  'type'?:number;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysDictItem {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 描述 */
  'description'?:string;
  
  /** 字典id */
  'dictId'?:string;
  
  /** id */
  'id'?:string;
  
  /** 颜色 */
  'itemColor'?:string;
  
  /** 字典项文本 */
  'itemText'?:string;
  
  /** 字典项值 */
  'itemValue'?:string;
  
  /** 排序 */
  'sortOrder'?:number;
  
  /** 状态（1启用 0不启用） */
  'status'?:number;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysDictTree {

    
  /**  */
  'createBy'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'delFlag'?:number;
  
  /**  */
  'description'?:string;
  
  /**  */
  'dictCode'?:string;
  
  /**  */
  'dictName'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'key'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'type'?:number;
  
  /**  */
  'updateBy'?:string;
  
  /**  */
  'updateTime'?:string;
  
  }
  
  

  export interface SysFile {

    
  /** 业务ID */
  'businessId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除标识0-正常,1-已删除 */
  'delFlag'?:number;
  
  /** 文件大小 */
  'fileLength'?:number;
  
  /** 文件名称 */
  'fileName'?:string;
  
  /** 文件路径 */
  'filePath'?:string;
  
  /** 文件类型 */
  'fileType'?:string;
  
  /** ID */
  'id'?:string;
  
  /** 模块名称 */
  'moduleCode'?:string;
  
  /** 项目ID */
  'projectId'?:string;
  
  /** 文件备注 */
  'remark'?:string;
  
  /** 修改人 */
  'updateBy'?:string;
  
  /** 修改时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysLog {

    
  /** 耗时 */
  'costTime'?:number;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** id */
  'id'?:string;
  
  /** IP */
  'ip'?:string;
  
  /** 操作详细日志 */
  'logContent'?:string;
  
  /** 日志类型（1登录日志，2操作日志） */
  'logType'?:number;
  
  /** 请求方法 */
  'method'?:string;
  
  /** 操作类型（1查询，2添加，3修改，4删除,5导入，6导出） */
  'operateType'?:number;
  
  /** 请求参数 */
  'requestParam'?:string;
  
  /** 请求类型 */
  'requestType'?:string;
  
  /** 请求路径 */
  'requestUrl'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 操作人用户账户 */
  'userid'?:string;
  
  /** 操作人用户名称 */
  'username'?:string;
  
  }
  
  

  export interface SysLoginModel {

    
  /** 验证码 */
  'captcha'?:string;
  
  /** 验证码key */
  'checkKey'?:string;
  
  /** 密码 */
  'password'?:string;
  
  /** 账号 */
  'username'?:string;
  
  }
  
  

  export interface SysPermission {

    
  /** alwaysShow */
  'alwaysShow'?:boolean;
  
  /** 组件 */
  'component'?:string;
  
  /** 组件名字 */
  'componentName'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态 0正常 1已删除 */
  'delFlag'?:number;
  
  /** 描述 */
  'description'?:string;
  
  /** 是否隐藏路由菜单: 0否,1是（默认值0） */
  'hidden'?:boolean;
  
  /** 菜单图标 */
  'icon'?:string;
  
  /** id */
  'id'?:string;
  
  /** 外链菜单打开方式 0/内部打开 1/外部打开 */
  'internalOrExternal'?:boolean;
  
  /** 是否缓存页面: 0:不是  1:是（默认值1） */
  'keepAlive'?:boolean;
  
  /** 是否叶子节点: 1:是  0:不是 */
  'leaf'?:boolean;
  
  /** 类型（0：一级菜单；1：子菜单 ；2：按钮权限） */
  'menuType'?:number;
  
  /** 菜单名称 */
  'name'?:string;
  
  /** 父id */
  'parentId'?:string;
  
  /** 菜单权限编码，例如：“sys:schedule:list,sys:schedule:info”,多个逗号隔开 */
  'perms'?:string;
  
  /** 权限策略1显示2禁用 */
  'permsType'?:string;
  
  /** 一级菜单跳转地址 */
  'redirect'?:string;
  
  /** 是否路由菜单: 0:不是  1:是（默认值1） */
  'route'?:boolean;
  
  /** 是否配置菜单的数据权限 1是0否 默认0 */
  'ruleFlag'?:number;
  
  /** 菜单排序 */
  'sortNo'?:number;
  
  /** 按钮权限状态(0无效1有效) */
  'status'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 路径 */
  'url'?:string;
  
  }
  
  

  export interface SysPermissionDataRule {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** id */
  'id'?:string;
  
  /** 对应的菜单id */
  'permissionId'?:string;
  
  /** 字段 */
  'ruleColumn'?:string;
  
  /** 条件 */
  'ruleConditions'?:string;
  
  /** 规则名称 */
  'ruleName'?:string;
  
  /** 规则值 */
  'ruleValue'?:string;
  
  /** 状态值 1有效 0无效 */
  'status'?:string;
  
  /** 修改人 */
  'updateBy'?:string;
  
  /** 修改时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysPermissionTree {

    
  /**  */
  'alwaysShow'?:boolean;
  
  /**  */
  'children'?:SysPermissionTree[];
  
  /**  */
  'component'?:string;
  
  /**  */
  'createBy'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'delFlag'?:number;
  
  /**  */
  'description'?:string;
  
  /**  */
  'hidden'?:boolean;
  
  /**  */
  'icon'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'internalOrExternal'?:boolean;
  
  /**  */
  'isLeaf'?:boolean;
  
  /**  */
  'keepAlive'?:boolean;
  
  /**  */
  'key'?:string;
  
  /**  */
  'leaf'?:boolean;
  
  /**  */
  'menuType'?:number;
  
  /**  */
  'name'?:string;
  
  /**  */
  'parentId'?:string;
  
  /**  */
  'perms'?:string;
  
  /**  */
  'permsType'?:string;
  
  /**  */
  'redirect'?:string;
  
  /**  */
  'route'?:boolean;
  
  /**  */
  'sortNo'?:number;
  
  /**  */
  'status'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'updateBy'?:string;
  
  /**  */
  'updateTime'?:string;
  
  /**  */
  'url'?:string;
  
  }
  
  

  export interface SysRole {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 描述 */
  'description'?:string;
  
  /** id */
  'id'?:string;
  
  /** 角色编码 */
  'roleCode'?:string;
  
  /** 角色名称 */
  'roleName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysSms {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 推送内容 */
  'esContent'?:string;
  
  /** 推送所需参数Json格式 */
  'esParam'?:string;
  
  /** 接收人 */
  'esReceiver'?:string;
  
  /** 推送失败原因 */
  'esResult'?:string;
  
  /** 发送次数 */
  'esSendNum'?:number;
  
  /** 推送状态 0未推送 1推送成功 2推送失败 */
  'esSendStatus'?:string;
  
  /** 推送时间 */
  'esSendTime'?:string;
  
  /** 消息标题 */
  'esTitle'?:string;
  
  /** 推送方式：1短信 2邮件 3微信 */
  'esType'?:string;
  
  /** ID */
  'id'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysSmsTemplate {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** ID */
  'id'?:string;
  
  /** 模板CODE */
  'templateCode'?:string;
  
  /** 模板内容 */
  'templateContent'?:string;
  
  /** 模板标题 */
  'templateName'?:string;
  
  /** 模板测试json */
  'templateTestJson'?:string;
  
  /** 模板类型 */
  'templateType'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface SysTenant {

    
  /** 开始时间 */
  'beginDate'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 结束时间 */
  'endDate'?:string;
  
  /** 编码 */
  'id'?:number;
  
  /** 名称 */
  'name'?:string;
  
  /** 状态 1正常 0冻结 */
  'status'?:number;
  
  }
  
  

  export interface SysUser {

    
  /** 同步工作流引擎1同步0不同步 */
  'activitiSync'?:number;
  
  /** 头像 */
  'avatar'?:string;
  
  /** 生日 */
  'birthday'?:string;
  
  /** 设备id uniapp推送用 */
  'clientId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态（0，正常，1已删除） */
  'delFlag'?:number;
  
  /** 负责部门 */
  'departIds'?:string;
  
  /** 电子邮件1 */
  'email'?:string;
  
  /** id */
  'id'?:string;
  
  /** 部门code(当前选择登录部门) */
  'orgCode'?:string;
  
  /** 部门名称 */
  'orgCodeTxt'?:string;
  
  /** 密码 */
  'password'?:string;
  
  /** 电话 */
  'phone'?:string;
  
  /** 职务，关联职务表 */
  'post'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 多租户id配置，编辑用户的时候设置 */
  'relTenantIds'?:string;
  
  /** md5密码盐 */
  'salt'?:string;
  
  /** 性别（1：男 2：女） */
  'sex'?:number;
  
  /** 状态(1：正常  2：冻结 ） */
  'status'?:number;
  
  /** 座机号 */
  'telephone'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 身份（0 普通成员 1 上级） */
  'userIdentity'?:number;
  
  /** 用户账号 */
  'username'?:string;
  
  /** 工号，唯一键 */
  'workNo'?:string;
  
  }
  
  

  export interface SysUserAgent {

    
  /** 代理人用户名 */
  'agentUserName'?:string;
  
  /** 创建人登录名称 */
  'createBy'?:string;
  
  /** 创建人名称 */
  'createName'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 状态0无效1有效 */
  'endTime'?:string;
  
  /** 序号 */
  'id'?:string;
  
  /** 代理开始时间 */
  'startTime'?:string;
  
  /** 状态0无效1有效 */
  'status'?:string;
  
  /** 所属公司 */
  'sysCompanyCode'?:string;
  
  /** 所属部门 */
  'sysOrgCode'?:string;
  
  /** 更新人登录名称 */
  'updateBy'?:string;
  
  /** 更新人名称 */
  'updateName'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  /** 用户名 */
  'userName'?:string;
  
  }
  
  

  export interface SysUserDepart {

    
  /** 部门id */
  'depId'?:string;
  
  /** 主键id */
  'id'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  }
  
  

  export interface SysUserOnlineVO {

    
  /**  */
  'avatar'?:string;
  
  /**  */
  'birthday'?:string;
  
  /**  */
  'id'?:string;
  
  /**  */
  'phone'?:string;
  
  /**  */
  'realname'?:string;
  
  /**  */
  'sex'?:number;
  
  /**  */
  'token'?:string;
  
  /**  */
  'username'?:string;
  
  }
  
  

  export interface SysUserRole {

    
  /** id主键 */
  'id'?:string;
  
  /** 角色id */
  'roleId'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  }
  
  

  export interface SysUserRoleVO {

    
  /**  */
  'roleId'?:string;
  
  /**  */
  'userIdList'?:string[];
  
  }
  
  

  export interface TaskVo {

    
  /**  */
  'applyer'?:string;
  
  /**  */
  'assignee'?:string;
  
  /**  */
  'bizParams'?:string;
  
  /**  */
  'businessKey'?:string;
  
  /**  */
  'category'?:string;
  
  /**  */
  'createTime'?:string;
  
  /**  */
  'dataMap'?:object;
  
  /**  */
  'description'?:string;
  
  /**  */
  'executionId'?:string;
  
  /** 主键 */
  'id'?:string;
  
  /**  */
  'isSuspended'?:boolean;
  
  /**  */
  'key'?:string;
  
  /**  */
  'name'?:string;
  
  /**  */
  'owner'?:string;
  
  /**  */
  'priority'?:number;
  
  /**  */
  'procDefId'?:string;
  
  /**  */
  'procInstId'?:string;
  
  /**  */
  'processName'?:string;
  
  /**  */
  'result'?:number;
  
  /**  */
  'routeName'?:string;
  
  /**  */
  'status'?:number;
  
  /**  */
  'tableId'?:string;
  
  /**  */
  'tableName'?:string;
  
  /**  */
  'title'?:string;
  
  }
  
  

  export interface TreeModel {

    
  /**  */
  'children'?:TreeModel[];
  
  /**  */
  'icon'?:string;
  
  /**  */
  'isLeaf'?:boolean;
  
  /**  */
  'key'?:string;
  
  /**  */
  'label'?:string;
  
  /**  */
  'parentId'?:string;
  
  /**  */
  'ruleFlag'?:number;
  
  /**  */
  'scopedSlots'?:object;
  
  /**  */
  'slotTitle'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'value'?:string;
  
  }
  
  

  export interface TreeSelectModel {

    
  /**  */
  'children'?:TreeSelectModel[];
  
  /**  */
  'code'?:string;
  
  /**  */
  'icon'?:string;
  
  /**  */
  'key'?:string;
  
  /**  */
  'leaf'?:boolean;
  
  /**  */
  'parentId'?:string;
  
  /**  */
  'title'?:string;
  
  /**  */
  'value'?:string;
  
  }
  
  

  export interface UserPermissionAuthVo {

    
  /** 菜单权限编码，例如：“sys:schedule:list,sys:schedule:info”,多个逗号隔开 */
  'action'?:string;
  
  /** 菜单名称 */
  'describe'?:string;
  
  /** 按钮权限状态(0无效1有效) */
  'status'?:string;
  
  /** 权限策略1显示2禁用 */
  'type'?:string;
  
  }
  
  

  export interface UserPermissionVo {

    
  /** 全部权限集合 */
  'allAuth'?:UserPermissionAuthVo[];
  
  /** 权限集合 */
  'auth'?:UserPermissionAuthVo[];
  
  /** 菜单集合 */
  'menu'?:object[];
  
  }
  
  

  export interface View {

    
  /**  */
  'contentType'?:string;
  
  }
  
  

  export interface VisitInfoVo {

    
  /** 访问人数 */
  'ip'?:string;
  
  /** 访问日期 */
  'tian'?:string;
  
  /** 类型 */
  'type'?:string;
  
  /** 访问次数 */
  'visit'?:number;
  
  }
  
  

  export interface sys_check_rule对象 {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键id */
  'id'?:string;
  
  /** 规则Code */
  'ruleCode'?:string;
  
  /** 规则描述 */
  'ruleDescription'?:string;
  
  /** 规则JSON */
  'ruleJson'?:string;
  
  /** 规则名称 */
  'ruleName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface sys_data_source对象 {

    
  /** 数据源编码 */
  'code'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建日期 */
  'createTime'?:string;
  
  /** 驱动类 */
  'dbDriver'?:string;
  
  /** 数据库名称 */
  'dbName'?:string;
  
  /** 密码 */
  'dbPassword'?:string;
  
  /** 数据库类型 */
  'dbType'?:string;
  
  /** 数据源地址 */
  'dbUrl'?:string;
  
  /** 用户名 */
  'dbUsername'?:string;
  
  /** id */
  'id'?:string;
  
  /** 数据源名称 */
  'name'?:string;
  
  /** 备注 */
  'remark'?:string;
  
  /** 所属部门 */
  'sysOrgCode'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新日期 */
  'updateTime'?:string;
  
  }
  
  

  export interface sys_depart_permission对象 {

    
  /** 数据规则id */
  'dataRuleIds'?:string;
  
  /** 部门id */
  'departId'?:string;
  
  /** id */
  'id'?:string;
  
  /** 权限id */
  'permissionId'?:string;
  
  }
  
  

  export interface sys_depart_role_user对象 {

    
  /** 角色id */
  'droleId'?:string;
  
  /** 主键id */
  'id'?:string;
  
  /** 用户id */
  'userId'?:string;
  
  }
  
  

  export interface sys_depart_role对象 {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 部门id */
  'departId'?:string;
  
  /** 描述 */
  'description'?:string;
  
  /** id */
  'id'?:string;
  
  /** 部门角色编码 */
  'roleCode'?:string;
  
  /** 部门角色名称 */
  'roleName'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface sys_fill_rule对象 {

    
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 主键ID */
  'id'?:string;
  
  /** 规则实现类 */
  'ruleClass'?:string;
  
  /** 规则Code */
  'ruleCode'?:string;
  
  /** 规则名称 */
  'ruleName'?:string;
  
  /** 规则参数 */
  'ruleParams'?:string;
  
  /** 修改人 */
  'updateBy'?:string;
  
  /** 修改时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface sys_position对象 {

    
  /** 职务编码 */
  'code'?:string;
  
  /** 公司id */
  'companyId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** id */
  'id'?:string;
  
  /** 职务名称 */
  'name'?:string;
  
  /** 职级 */
  'postRank'?:string;
  
  /** 组织机构编码 */
  'sysOrgCode'?:string;
  
  /** 修改人 */
  'updateBy'?:string;
  
  /** 修改时间 */
  'updateTime'?:string;
  
  }
  
  

  export interface 修改用户密码bo {

    
  /** 确认新密码 */
  'confirmpassword'?:string;
  
  /** 旧密码 */
  'oldpassword'?:string;
  
  /** 新密码 */
  'password'?:string;
  
  /** 用户账号 */
  'username'?:string;
  
  }
  
  

  export interface 新增用户bo {

    
  /** 同步工作流引擎1同步0不同步 */
  'activitiSync'?:number;
  
  /** 头像 */
  'avatar'?:string;
  
  /** 生日 */
  'birthday'?:string;
  
  /** 设备id uniapp推送用 */
  'clientId'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 删除状态（0，正常，1已删除） */
  'delFlag'?:number;
  
  /** 负责部门 */
  'departIds'?:string;
  
  /** 电子邮件1 */
  'email'?:string;
  
  /** id */
  'id'?:string;
  
  /** 部门code(当前选择登录部门) */
  'orgCode'?:string;
  
  /** 部门名称 */
  'orgCodeTxt'?:string;
  
  /** 密码 */
  'password'?:string;
  
  /** 电话 */
  'phone'?:string;
  
  /** 职务，关联职务表 */
  'post'?:string;
  
  /** 真实姓名 */
  'realname'?:string;
  
  /** 多租户id配置，编辑用户的时候设置 */
  'relTenantIds'?:string;
  
  /** md5密码盐 */
  'salt'?:string;
  
  /** 用户部门多选 ,分割 */
  'selecteddeparts'?:string;
  
  /** 用户角色多选 ,分割 */
  'selectedroles'?:string;
  
  /** 性别（1：男 2：女） */
  'sex'?:number;
  
  /** 状态(1：正常  2：冻结 ） */
  'status'?:number;
  
  /** 座机号 */
  'telephone'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 身份（0 普通成员 1 上级） */
  'userIdentity'?:number;
  
  /** 用户账号 */
  'username'?:string;
  
  /** 工号，唯一键 */
  'workNo'?:string;
  
  }
  
  

  export interface 日志Vo {

    
  /** 工作流程业务id */
  'actBusinessId'?:string;
  
  /** 流程节点id */
  'actNodeId'?:string;
  
  /** 处理结果 */
  'approvalResult'?:string;
  
  /** 操作时间 */
  'approvalTime'?:string;
  
  /** 归档id */
  'archiveId'?:string;
  
  /** 归档时间 */
  'archiveTime'?:string;
  
  /** 归档人 */
  'archivedBy'?:string;
  
  /** 类别 */
  'category'?:string;
  
  /** 评论 */
  'comment'?:string;
  
  /** 创建人 */
  'createBy'?:string;
  
  /** 创建时间 */
  'createTime'?:string;
  
  /** 当前状态 */
  'currentState'?:string;
  
  /** 相关数据 */
  'dataJson'?:string;
  
  /** 数据json */
  'dateJson'?:string;
  
  /** 删除状态(0-正常,1-已删除) */
  'delFlag'?:number;
  
  /** 派单人部门id */
  'dispatchDepartId'?:string;
  
  /** 派单人部门名称 */
  'dispatchDepartName'?:string;
  
  /** 派单时间 */
  'dispatchTime'?:string;
  
  /** 派单人id */
  'dispatchUserId'?:string;
  
  /** 派单人名称 */
  'dispatchUserName'?:string;
  
  /** 耗时 */
  'duration'?:string;
  
  /** 会展数据json */
  'extensionDateJson'?:object;
  
  /** 会展表单json */
  'extensionFormJson'?:object;
  
  /** 表单id */
  'formId'?:string;
  
  /** 表单json */
  'formJson'?:string;
  
  /** 主键 */
  'id'?:number;
  
  /** 是否为服务单位（是为1） */
  'ifService'?:number;
  
  /** 日志类型(任务日志|流程日志) */
  'logType'?:string;
  
  /** 操作说明 */
  'operatingInstructions'?:string;
  
  /** 父id */
  'parentId'?:string;
  
  /** 流程定义id */
  'procDefId'?:string;
  
  /** 流程实例id */
  'procInstId'?:string;
  
  /** 流程id */
  'processId'?:string;
  
  /** 接单人部门id */
  'receiveDepartId'?:string;
  
  /** 接单人部门名称 */
  'receiveDepartName'?:string;
  
  /** 接单时间 */
  'receiveTime'?:string;
  
  /** 接单人id */
  'receiveUserId'?:string;
  
  /** 接单人名称 */
  'receiveUserName'?:string;
  
  /** 接收时间 */
  'receptionTime'?:string;
  
  /**  */
  'remark'?:string;
  
  /** 发送人 */
  'sendFrom'?:string;
  
  /** 是否可用 */
  'status'?:string;
  
  /**  */
  'tableId'?:string;
  
  /** 任务处理完成时间 */
  'taskEndTime'?:string;
  
  /** 任务id */
  'taskId'?:string;
  
  /** 任务名称 */
  'taskName'?:string;
  
  /** 任务源id */
  'taskSourceId'?:string;
  
  /** 任务开始处理时间 */
  'taskStartTime'?:string;
  
  /** 任务状态 */
  'taskStatus'?:string;
  
  /** 任务类型（展期需求、内部需求、外部需求、巡检计划、巡更计划、设备告警、安防告警、事件告警） */
  'taskType'?:string;
  
  /** 时间戳 */
  'timestamp'?:number;
  
  /** 流程名称 */
  'title'?:string;
  
  /** 类型 */
  'type'?:string;
  
  /** 更新人 */
  'updateBy'?:string;
  
  /** 更新时间 */
  'updateTime'?:string;
  
  /** 乐观锁 */
  'version'?:number;
  
  /** 权重 */
  'weight'?:number;
  
  /** 工作内容 */
  'workDetail'?:string;
  
  /** 工作事项 */
  'workItem'?:string;
  
  /** 工单号 */
  'workOrderNumber'?:string;
  
  /** 工单状态;转单、接单 */
  'workOrderStatus'?:string;
  
  /** 工作组id */
  'workgroupId'?:string;
  
  /** 工作组名称 */
  'workgroupName'?:string;
  
  }
  export enum EnumChatGroupChatGroupType{
        '群聊'='群聊','单聊'='单聊'
      }export enum EnumEditNodeUserBoBatchApproval{
        '顺签'='顺签','会签'='会签','或签'='或签'
      }export enum EnumEditNodeUserBoEmptyApprover{
        '自动跳过节点'='自动跳过节点','不允许为空暂停'='不允许为空暂停'
      }export enum EnumModelAndViewStatus{
        '100 CONTINUE'='100 CONTINUE','101 SWITCHING_PROTOCOLS'='101 SWITCHING_PROTOCOLS','102 PROCESSING'='102 PROCESSING','103 CHECKPOINT'='103 CHECKPOINT','200 OK'='200 OK','201 CREATED'='201 CREATED','202 ACCEPTED'='202 ACCEPTED','203 NON_AUTHORITATIVE_INFORMATION'='203 NON_AUTHORITATIVE_INFORMATION','204 NO_CONTENT'='204 NO_CONTENT','205 RESET_CONTENT'='205 RESET_CONTENT','206 PARTIAL_CONTENT'='206 PARTIAL_CONTENT','207 MULTI_STATUS'='207 MULTI_STATUS','208 ALREADY_REPORTED'='208 ALREADY_REPORTED','226 IM_USED'='226 IM_USED','300 MULTIPLE_CHOICES'='300 MULTIPLE_CHOICES','301 MOVED_PERMANENTLY'='301 MOVED_PERMANENTLY','302 FOUND'='302 FOUND','302 MOVED_TEMPORARILY'='302 MOVED_TEMPORARILY','303 SEE_OTHER'='303 SEE_OTHER','304 NOT_MODIFIED'='304 NOT_MODIFIED','305 USE_PROXY'='305 USE_PROXY','307 TEMPORARY_REDIRECT'='307 TEMPORARY_REDIRECT','308 PERMANENT_REDIRECT'='308 PERMANENT_REDIRECT','400 BAD_REQUEST'='400 BAD_REQUEST','401 UNAUTHORIZED'='401 UNAUTHORIZED','402 PAYMENT_REQUIRED'='402 PAYMENT_REQUIRED','403 FORBIDDEN'='403 FORBIDDEN','404 NOT_FOUND'='404 NOT_FOUND','405 METHOD_NOT_ALLOWED'='405 METHOD_NOT_ALLOWED','406 NOT_ACCEPTABLE'='406 NOT_ACCEPTABLE','407 PROXY_AUTHENTICATION_REQUIRED'='407 PROXY_AUTHENTICATION_REQUIRED','408 REQUEST_TIMEOUT'='408 REQUEST_TIMEOUT','409 CONFLICT'='409 CONFLICT','410 GONE'='410 GONE','411 LENGTH_REQUIRED'='411 LENGTH_REQUIRED','412 PRECONDITION_FAILED'='412 PRECONDITION_FAILED','413 PAYLOAD_TOO_LARGE'='413 PAYLOAD_TOO_LARGE','413 REQUEST_ENTITY_TOO_LARGE'='413 REQUEST_ENTITY_TOO_LARGE','414 URI_TOO_LONG'='414 URI_TOO_LONG','414 REQUEST_URI_TOO_LONG'='414 REQUEST_URI_TOO_LONG','415 UNSUPPORTED_MEDIA_TYPE'='415 UNSUPPORTED_MEDIA_TYPE','416 REQUESTED_RANGE_NOT_SATISFIABLE'='416 REQUESTED_RANGE_NOT_SATISFIABLE','417 EXPECTATION_FAILED'='417 EXPECTATION_FAILED','418 I_AM_A_TEAPOT'='418 I_AM_A_TEAPOT','419 INSUFFICIENT_SPACE_ON_RESOURCE'='419 INSUFFICIENT_SPACE_ON_RESOURCE','420 METHOD_FAILURE'='420 METHOD_FAILURE','421 DESTINATION_LOCKED'='421 DESTINATION_LOCKED','422 UNPROCESSABLE_ENTITY'='422 UNPROCESSABLE_ENTITY','423 LOCKED'='423 LOCKED','424 FAILED_DEPENDENCY'='424 FAILED_DEPENDENCY','425 TOO_EARLY'='425 TOO_EARLY','426 UPGRADE_REQUIRED'='426 UPGRADE_REQUIRED','428 PRECONDITION_REQUIRED'='428 PRECONDITION_REQUIRED','429 TOO_MANY_REQUESTS'='429 TOO_MANY_REQUESTS','431 REQUEST_HEADER_FIELDS_TOO_LARGE'='431 REQUEST_HEADER_FIELDS_TOO_LARGE','451 UNAVAILABLE_FOR_LEGAL_REASONS'='451 UNAVAILABLE_FOR_LEGAL_REASONS','500 INTERNAL_SERVER_ERROR'='500 INTERNAL_SERVER_ERROR','501 NOT_IMPLEMENTED'='501 NOT_IMPLEMENTED','502 BAD_GATEWAY'='502 BAD_GATEWAY','503 SERVICE_UNAVAILABLE'='503 SERVICE_UNAVAILABLE','504 GATEWAY_TIMEOUT'='504 GATEWAY_TIMEOUT','505 HTTP_VERSION_NOT_SUPPORTED'='505 HTTP_VERSION_NOT_SUPPORTED','506 VARIANT_ALSO_NEGOTIATES'='506 VARIANT_ALSO_NEGOTIATES','507 INSUFFICIENT_STORAGE'='507 INSUFFICIENT_STORAGE','508 LOOP_DETECTED'='508 LOOP_DETECTED','509 BANDWIDTH_LIMIT_EXCEEDED'='509 BANDWIDTH_LIMIT_EXCEEDED','510 NOT_EXTENDED'='510 NOT_EXTENDED','511 NETWORK_AUTHENTICATION_REQUIRED'='511 NETWORK_AUTHENTICATION_REQUIRED'
      }